<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python序列化数据之pickle详解</title>
      <link href="/2020/03/15/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B9%8Bpickle%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/03/15/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B9%8Bpickle%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>学习python之pickle详解</p><a id="more"></a><h4 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h4><ul><li><p>便于存储（序列化过程：将文本信息转为==二进制数据流，易存储在硬盘中==）</p></li><li><p>反序列化从硬盘读取的数据，可得到原始数据</p></li><li><p>python程序运行中得到的字符串、列表等数据，要长久保存，方便之后使用（pickle模块可以将对象转换为已知可以传输或存储的格式）</p></li><li><p>python中序列化和反序列化</p><ul><li><p>将Python对象转换为二级制形式叫做序列化（Pickling）</p></li><li><p>将二进制数据流恢复为Python对象叫做反序列化（Unpickling）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A01/python_pickle.png" alt="python序列化反序列化"></p></li></ul><h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><ul><li><p>提供了一个简单的==持久化==功能，可以将对象以==文件==形式存放在磁盘上</p></li><li><p>只能在python中使用，可以序列化python中几乎所有的数据类型（列表、字典…）</p></li><li><p>pickle序列化后的数据，可读性差</p></li><li><p>pickle序列化和反序列化示例</p><ul><li><p>819pickling_unpickling_example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># 定义类Part</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    name   = <span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number, name)</span>:</span></span><br><span class="line">        self.number  = number</span><br><span class="line">        self.name    = name</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Part Number: %d"</span>%(self.number))</span><br><span class="line">        print(<span class="string">"Part Name: %s"</span>%(self.name))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实例化part</span></span><br><span class="line">part1=Part(<span class="number">111</span>, <span class="string">"Spindle"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a file to store the pickled object</span></span><br><span class="line"><span class="comment"># 创建文件存储pickled对象</span></span><br><span class="line">objectRepository = open(<span class="string">"ObjectFile.picl"</span>, <span class="string">"wb"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Pickle/serialize the python object and store the bytes into a binary file</span></span><br><span class="line"><span class="comment"># 序列化Python对象并存储为二进制字节流</span></span><br><span class="line">pickle.dump(part1, objectRepository, protocol=pickle.HIGHEST_PROTOCOL)</span><br><span class="line">objectRepository.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Unpickle/de-serialize the python object and print the attributes of the object</span></span><br><span class="line"><span class="comment"># 反序列化Python对象并打印对象属性</span></span><br><span class="line">objectRepository    = open(<span class="string">"ObjectFile.picl"</span>, <span class="string">"rb"</span>,);</span><br><span class="line">reconstructedObject = pickle.load(objectRepository)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Print object attributes</span></span><br><span class="line"><span class="comment"># 打印对象属性</span></span><br><span class="line">reconstructedObject.identify()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 运行结果：</span><br></pre></td></tr></table></figure><p>  (venv) yuhao@fishmouse:~/Envs/venv/project$ python 819pickling_unpickling_example.py<br>  Part Number: 111<br>  Part Name: Spindle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 序列化的数据</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &gt;&gt;&gt; with open(&#39;ObjectFile.picl&#39;,&#39;rb&#39;) as f:</span><br><span class="line">  ...     f.read()</span><br><span class="line">  ... </span><br><span class="line">  b&#39;\x80\x04\x959\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Part\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x06number\x94Ko\x8c\x04name\x94\x8c\x07Spindle\x94ub.&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>==序列化==语法</p><ul><li><p><a href="https://pythontic.com/modules/pickle/dump" target="_blank" rel="noopener">pickle.dump参考链接</a></p></li><li><p>pickle.dump(obj,file[,protocol])</p><ul><li>序列化对象，将结果数据流写入到文件对象或者buffer中</li></ul></li><li><p>参数protocol是序列化模式，一共有5种不同的类型，即（0,1,2,3,4）；</p><ul><li>（0,1,2）早期的版本，默认值为0（表示以文本形式序列化），值为1或2（表示以二级制的形式序列化）；</li><li>（3,4）则是python3之后的版本</li><li>查看（3,4）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.HIGHEST_PROTOCOL</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.DEFAULT_PROTOCOL</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>pickle.dump()：转换的字节流写入buffer中</p><ul><li><p>示例：819pickle_dump_example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>:</span></span><br><span class="line">    title       = <span class="string">""</span></span><br><span class="line">    isbn        = <span class="string">""</span></span><br><span class="line">    parts       = <span class="literal">None</span></span><br><span class="line">    chapters    = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, isbn, parts, chapters)</span>:</span></span><br><span class="line">        self.title      = title</span><br><span class="line">        self.isbn       = isbn</span><br><span class="line">        self.parts      = parts</span><br><span class="line">        self.chapters   = chapters</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Title of the book: %s"</span>%(self.title))</span><br><span class="line">        print(<span class="string">"ISBN of the book: %s"</span>%(self.isbn))</span><br><span class="line">        print(<span class="string">"Parts are:"</span>)</span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> self.parts:</span><br><span class="line">            print(part)</span><br><span class="line">        print(<span class="string">"Chapters are:%s"</span>%(self.chapters))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    partName     = <span class="string">""</span></span><br><span class="line">    beginChapter = <span class="number">-1</span></span><br><span class="line">    endChapter   = <span class="number">-1</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, partName, beginChapter, endChapter)</span>:</span></span><br><span class="line">        self.partName     = partName</span><br><span class="line">        self.beginChapter = beginChapter</span><br><span class="line">        self.endChapter   = endChapter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        stringRep =  <span class="string">"%s"</span>%(self.partName)       </span><br><span class="line">        <span class="keyword">return</span> stringRep</span><br><span class="line"></span><br><span class="line">part1 = Part(<span class="string">"Part 1"</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">part2 = Part(<span class="string">"Part 2"</span>, <span class="number">4</span>, <span class="number">5</span>)       </span><br><span class="line">part3 = Part(<span class="string">"Part 3"</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"> </span><br><span class="line">bookTitle       = <span class="string">"Book yet to be written"</span>;</span><br><span class="line">bookISBN        = <span class="string">"XXX-X-XX-XXXXXX-X"</span>;</span><br><span class="line">bookParts       = [part1, part2, part3]</span><br><span class="line">bookChapters    = [<span class="string">"Chapter 1"</span>, <span class="string">"Chapter 2"</span>, <span class="string">"Chapter 3"</span>,</span><br><span class="line">                   <span class="string">"Chapter 4"</span>, <span class="string">"Chapter 5"</span>, <span class="string">"Chapter 6"</span>,</span><br><span class="line">                   <span class="string">"Chapter 7"</span>];</span><br><span class="line"></span><br><span class="line">book = Book(bookTitle, bookISBN, bookParts, bookChapters)</span><br><span class="line"><span class="comment"># 创建buffer存储pickle对象</span></span><br><span class="line">pickleBuffer = io.BytesIO()</span><br><span class="line">print(<span class="string">"Pickling of the object into the memory buffer started"</span>)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">pickle.dump(book,pickleBuffer)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Pickling of the object into the memory buffer ended"</span>)</span><br><span class="line">print(<span class="string">"Pickled buffer beginning address:"</span>)</span><br><span class="line">print(pickleBuffer.getbuffer())</span><br><span class="line">print(<span class="string">"Unpickling of the object from memory started"</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">unpickledBook = pickle.loads(pickleBuffer.getbuffer())</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Unpickling of the object from memory ended"</span>)</span><br><span class="line">print(<span class="string">"Printing the attributes of unpickled object"</span>)</span><br><span class="line">unpickledBook.identify()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>pickle.dumps()参数</p><p>pickle.dumps(obj, protocol=None,*,fix_imports=True)</p><ul><li>与pickle.dump()区别，pickle.dumps()方法不需要写入文件中，他是直接返回一个序列化的bytes对象</li></ul></li></ul></li><li><p>==反序列化==语法</p><ul><li><p>pickle.load(file)</p><ul><li>反序列化对象（将文件中数据解析为一个Python对象）</li><li>==注意==：load(file)时，要让Python能够找到类的定义,否则会报错</li><li>注意：参数file，必须是以二进制的形式进行操作（读取）</li><li>示例：819test_pickle.py</li></ul></li><li><p>反序列方法pickle.loads()</p><ul><li><p>参数如下：</p><p>pickle.loads(bytes_object, *,fix_imports=True, encoding=”ASCII”. errors=”strict”)</p></li><li><p><code>pickle.loads()</code>方法是直接从bytes对象中读取序列化的信息，而非从文件中读取。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dumps([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">b'\x80\x03]q\x00(K\x01K\x02K\x03e.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.loads(_)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#load(file)时，要让Python能够找到类的定义,否则会报错</span></span><br><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a)</span>:</span>  </span><br><span class="line">        self.name=n  </span><br><span class="line">      self.age=a  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span>  </span><br><span class="line">      print(self.name+<span class="string">" "</span>+str(self.age))  </span><br><span class="line">aa = Person(<span class="string">"JGood"</span>, <span class="number">2</span>)  </span><br><span class="line">aa.show()  </span><br><span class="line"><span class="comment"># del Person</span></span><br><span class="line">f=open(<span class="string">'p.txt'</span>,<span class="string">'wb'</span>)  </span><br><span class="line">pickle.dump(aa,f,<span class="number">0</span>)  </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  注释掉删除类对象操作，若未注释则会报错</span><br><span class="line">del Person  </span><br><span class="line">  f&#x3D;open(&#39;p.txt&#39;,&#39;rb&#39;)  </span><br><span class="line">  bb&#x3D;pickle.load(f)  </span><br><span class="line">  f.close()  </span><br><span class="line">  bb.show()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ python 819test_pickle.py </span><br><span class="line">  JGood 2</span><br><span class="line">JGood 2</span><br></pre></td></tr></table></figure><p>未注释结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  (venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ python 819test_pickle.py </span><br><span class="line">  JGood 2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File &quot;819test_pickle.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">      bb&#x3D;pickle.load(f)  </span><br><span class="line">  AttributeError: Can&#39;t get attribute &#39;Person&#39; on &lt;module &#39;__main__&#39; from &#39;819test_pickle.py&#39;&gt;</span><br><span class="line">  </span><br><span class="line">  [p.txt](p.txt)文件中数据存储格式：</span><br><span class="line">  </span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &gt;&gt;&gt; with open(&#39;p.txt&#39;,&#39;rb&#39;) as f:</span><br><span class="line">  ...     f.read()</span><br><span class="line">  ... </span><br><span class="line">  b&#39;ccopy_reg\n_reconstructor\np0\n(c__main__\nPerson\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\n(dp5\nVname\np6\nVJGood\np7\nsVage\np8\nL2L\nsb.&#39;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络编程01</title>
      <link href="/2020/03/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/03/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h2><ul><li>了解socket基本概念</li><li>利用socket类方法获取主机、网络及目标服务的信息</li><li>UDP、TCP客户端/服务器编写</li><li>案例：python SOCKET实现RSA加密的全双工聊天程序</li></ul><a id="more"></a><h2 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h2><h4 id="构建python环境"><a href="#构建python环境" class="headerlink" title="构建python环境"></a>构建python环境</h4><p>同时开发多个python应用程序（共用一个Python，不同版本的包不兼容会产生无用包），利用virtualenv创建“Python虚拟环境”（小型、独立的、隔离功能的Python环境），从而避免产生无用包</p><ul><li>利用virtualenvwrapper管理virtualenv虚拟环境<ul><li>mkvirtualenv venv ：创建虚拟环境venv</li><li>workon                       ：查看当前已有虚拟环境目录</li><li>workon venv            ：进入venv虚拟环境</li><li>deactivate                 ：退出虚拟环境</li><li>rmvirtualenv venv：删除虚拟环境venv</li></ul></li></ul><h4 id="socket概念"><a href="#socket概念" class="headerlink" title="socket概念"></a>socket概念</h4><ul><li>运行在不同机器上的进程通过套接字发送报文来进行通信，套接字充当了两个进程通信的“中间人”，观察下图（OSI模型中）：</li><li><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/socket.png" alt="socket"></li><li>套接字是个通信端点，操作系统使用整数来标识套接字，Python使用socket.socket对象表示套接字（该对象内部表示的是操作系统标识套接字的整数，可利用fileno()方法查看），调用socket.socket对象的方法请求使用套接字的系统调用是，该对象会自动使用内部维护的套接字整数标识符</li><li>socket.socket对象的fileno()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.fileno()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>IP地址、端口号<ul><li>端口号（port）传输层协议内容、用来标识一个进程</li><li>一个端口号只能被一个进程占用</li><li>IP地址 + 端口号能标识网络上的某一台主机的某一个进程</li></ul></li><li>套接字组成：IP地址和端口号就构成了一个网络中的唯一标识符，即套接字</li><li>套接字类型（常用的两种）<ul><li>流套接字：创建socket对象时（用socket.SOCK_STREAM）<ul><li>面向连接、可靠的数据传输服务。能够保证数据无差错、无重复、按顺序发送</li></ul></li><li>数据包套接字：创建socket对象时，使用socket.SOCK_DGRAM<ul><li>提供无连接服务。无需建立连接，只需将目的地址信息打包后发送；该服务使用UDP进行传输，延迟小且效率高，缺点不能保证数据传输的可靠性</li></ul></li></ul></li></ul><h4 id="利用socket类方法获取主机、网络及目标服务的信息"><a href="#利用socket类方法获取主机、网络及目标服务的信息" class="headerlink" title="利用socket类方法获取主机、网络及目标服务的信息"></a>利用socket类方法获取主机、网络及目标服务的信息</h4><ul><li><p>获取主机名、地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostname()</span><br><span class="line"><span class="string">'fishmouse'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostbyname(_)</span><br><span class="line"><span class="string">'127.0.1.1'</span></span><br></pre></td></tr></table></figure></li><li><p>获取远程设备IP地址（如获取：<a href="http://www.baidu.com）" target="_blank" rel="noopener">www.baidu.com）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostbyname(<span class="string">'www.baidu.com'</span>)</span><br><span class="line"><span class="string">'14.215.177.38'</span></span><br></pre></td></tr></table></figure><p>可看到socket.gethostbyname具有==域名解析的作用==，ping一下看通不通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ ping 14.215.177.38</span><br><span class="line">PING 14.215.177.38 (14.215.177.38) 56(84) bytes of data.</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;1 ttl&#x3D;55 time&#x3D;37.9 ms</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;2 ttl&#x3D;55 time&#x3D;39.4 ms</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;3 ttl&#x3D;55 time&#x3D;34.8 ms</span><br></pre></td></tr></table></figure></li><li><p>IP地址格式转换（打包成32位二进制格式）：socket类方法inet_aton、inet_ntoa</p><ul><li><p>inet_aton()使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip_addr =<span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_aton(ip_addr)</span><br><span class="line"><span class="string">b'\x7f\x00\x00\x01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> binascii</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.hexlify(_)</span><br><span class="line"><span class="string">b'7f000001'</span></span><br></pre></td></tr></table></figure></li></ul><p>观察看到，转换后的32位二进制格式，并调用binasci.hexlify以16进制形式表示二进制数据</p><p>10进制结果，单个字节转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> struct</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">'B'</span>,<span class="string">b'\x7f'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="number">127</span></span><br></pre></td></tr></table></figure><ul><li><p>inet_ntoa()使用：32位二进制包转换为IPv4地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a的主机字节序----------网络字节序 ---------b的主机字节序&gt;&gt;&gt; ip_addr =<span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_aton(ip_addr)</span><br><span class="line"><span class="string">b'\x7f\x00\x00\x01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_ntoa(_)</span><br><span class="line"><span class="string">'127.0.0.1'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过指定的端口和协议找到服务名</p><ul><li><p>socket.getservbyport()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">80</span>)</span><br><span class="line"><span class="string">'http'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">53</span>)</span><br><span class="line"><span class="string">'domain'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">25</span>)</span><br><span class="line"><span class="string">'smtp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">21</span>)</span><br><span class="line"><span class="string">'ftp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">3306</span>)</span><br><span class="line"><span class="string">'mysql'</span></span><br></pre></td></tr></table></figure></li><li><p>socket.getservbyname() ：通过服务名获取端口</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyname(<span class="string">'ssh'</span>)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyname(<span class="string">'http'</span>)</span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><p>linux系统中，etc/services文件中可查看相关服务和端口</p></li><li><p>主机字节序和网络字节序之间的转换</p><p>不同主机a，b之间通信，数据格式需转换</p><p>a的固有数据存储——-标准化——–转化成b的固有格式</p><p>也即为：</p><p>==a的主机字节序———-网络字节序 ———b的主机字节序==</p><ul><li><p>主机字节序</p><p>主机内部，内存中数据的处理方式，可以分为两种：</p><ul><li><p>大端字节序：按照内存的增长方向，高位数据存储在高位内存中</p></li><li><p>小端字节序：按照内存的增长方向，高位数据存储在低位内存中</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%E7%AB%AF.png" alt=""></p></li></ul></li><li><p>socket.ntohl()、socket.htonl()、ntohs()、htons()</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.htonl(data)</span><br><span class="line"><span class="number">3523477504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.htons(data)</span><br><span class="line"><span class="number">53764</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohl(data)</span><br><span class="line"><span class="number">3523477504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohs(data)</span><br><span class="line"><span class="number">53764</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohs(<span class="number">53764</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><ul><li><p>设定并获取默认的套接字超时时间</p><ul><li><p>socket.gettimeout()、socket.settimeout()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.gettimeout()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.settimeout(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.gettimeout()</span><br><span class="line"><span class="number">100.0</span></span><br></pre></td></tr></table></figure><p>默认套接字超时时间为0</p></li></ul></li><li><p>套接字错误异常处理</p><ul><li>try…except  套接字异常类型 as 参数…</li></ul></li><li><p>argparse：命令项选项与参数解析的模块</p><ul><li>parser=argparse.ArgumentParser()：创建解析对象</li><li>parser.add_argument()：向对象中添加关注的命令行参数和选项</li><li>given_args = parser.parse_args()：对象解析</li></ul></li><li><p>套接字发送和接收的缓冲区大小修改</p><ul><li>socket中getsockopt()、setsockopt()方法</li></ul></li><li><p>套接字阻塞模式和非阻塞模式</p><ul><li>s= socket.socket()</li><li>s.setblocking(1)：设为阻塞模式</li><li>s.setblocking(0)：设为非阻塞模式</li></ul><p>默认情况下，TCP套接字处于阻塞模式</p></li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li><p>多路复用：允许多个会话共享同一介质或机制的一种解决方案</p></li><li><p>UDP支持多路复用：UDP协议提供端口号，用于对目标为同一机器上不同服务的多个数据包进行适当的多路分解</p></li><li><p>TCP：多路复用、可靠传输</p></li><li><p>UDP机制：仅使用IP地址和端口进行标识，以此将数据包发送至目标地址</p></li><li><p>使用自环接口的UDP服务器和 客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UDP client and server on localhost</span></span><br><span class="line"><span class="comment"># 814udp_local.py </span></span><br><span class="line"><span class="keyword">import</span> argparse, socket</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">MAX_BYTES = <span class="number">65535</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(port)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">    sock.bind((<span class="string">'127.0.0.1'</span>,port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># getsockname()返回sock示例对象的（地址，端口)</span></span><br><span class="line">    print(<span class="string">"Listening at &#123;&#125;"</span>.format(sock.getsockname()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data, address = sock.recvfrom(MAX_BYTES)</span><br><span class="line">        text = data.decode(<span class="string">'ascii'</span>)</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">"The client at &#123;&#125; says &#123;!r&#125;"</span>.format(address,text))</span><br><span class="line"></span><br><span class="line">        text = <span class="string">'Your data was &#123;&#125; bytes long '</span>.format(len(data))</span><br><span class="line">        data = text.encode(<span class="string">'ascii'</span>)</span><br><span class="line">        sock.sendto(data,address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(port)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    text = <span class="string">'The time is &#123;&#125;'</span>.format(datetime.now())</span><br><span class="line">    data = text.encode(<span class="string">'ascii'</span>)</span><br><span class="line">   </span><br><span class="line">    sock.sendto(data,(<span class="string">'127.0.0.1'</span>,port))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># sock.getsockname()获取当前进程的（地址，端口）元组信息</span></span><br><span class="line">    print(<span class="string">'The OS assigned me the address &#123;&#125;'</span>.format(sock.getsockname()))</span><br><span class="line">    data, address = sock.recvfrom(MAX_BYTES)</span><br><span class="line"></span><br><span class="line">    text = data.decode()</span><br><span class="line">    <span class="comment"># format格式化字符串</span></span><br><span class="line">    print(<span class="string">'The server &#123;&#125; replied &#123;!r&#125;'</span>.format(address,text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 字典</span></span><br><span class="line">    choices = &#123;<span class="string">'client'</span>:client,<span class="string">'server'</span>:server&#125;</span><br><span class="line">    <span class="comment"># 创建参数解析对象</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Send and receive UDP locally'</span>)</span><br><span class="line">    <span class="comment">#添加要解析的参数</span></span><br><span class="line">    parser.add_argument(<span class="string">'role'</span>,choices=choices,help =<span class="string">'which role to play'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-p'</span>,metavar=<span class="string">'PORT'</span>,type=int,default=<span class="number">1060</span>,help=<span class="string">'UDP port (default 1060)'</span>)</span><br><span class="line">    <span class="comment"># 参数解析</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用服务端或客户端函数</span></span><br><span class="line">    function = choices[args.role]</span><br><span class="line">    function(args.p)</span><br></pre></td></tr></table></figure><ul><li><p>先运行服务端</p><ul><li><p>python 814udp_local.py server</p><p>结果：</p><p>Listening at (‘127.0.0.1’, 1060)<br>The client at (‘127.0.0.1’, 60945) says ‘The time is 2019-08-16 16:34:56.276877’</p></li></ul></li><li><p>再运行客户端</p><ul><li><p>python 814udp_local.py client</p><p>The OS assigned me the address (‘0.0.0.0’, 60945)<br>The server (‘127.0.0.1’, 1060) replied ‘Your data was 38 bytes long ‘</p></li></ul></li><li><p>混杂客户端与垃圾回复</p><p>814udp_local.py代码中，客户端程序存在安全隐患，如fg果服务端响应延迟一会，攻击者伪装成服务器的一个响应，客户端并没有检查是否是真正服务器的响应</p><ul><li><p>先运行服务器，再将服务器暂停，创建一个快速发送信息的响应给客户端，再==fg命令==将暂停的服务器开启</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%B7%B7%E6%9D%82%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt=""></p></li><li><p>客户端</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%B7%B7%E6%9D%82%E5%AE%A2%E6%88%B7%E7%AB%AF1.png" alt=""></p><p>观察到，客户端收到的数据实际上是伪装的数据，真正的服务器的响应没到客户端</p></li><li><p>混杂客户端</p><p>不考虑地址是否正确，接收并处理所有收到的数据包的网络监听客户端在技术上叫 作混杂( promiscuous )客户端</p></li></ul></li></ul></li></ul><h4 id="python-SOCKET实现RSA加密的全双工聊天程序实现"><a href="#python-SOCKET实现RSA加密的全双工聊天程序实现" class="headerlink" title="python SOCKET实现RSA加密的全双工聊天程序实现"></a>python SOCKET实现RSA加密的全双工聊天程序实现</h4><ul><li><p>题目背景</p><p>RSA加密解密是利用非对称秘钥解决传输过程中机密性的问题，将之用在聊天程序上，其中使用rsa模块，发送方生产公钥和私钥，然后使用公钥将信息加密后，利用pickle模块封装加密后的消息和私钥，然后发送给接收方，接收方同样通过pickle模块将消息进行解封，使用发送过来的私钥将消息解密，并将内容打印在屏幕上</p></li><li><p>题目要点</p><ul><li><p>传输协议：TCP套接字创建客户端和服务端_</p><p>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p></li><li><p>数据传输格式：pickle序列化数据</p><ul><li><p>pickle.dumps()序列化</p></li><li><p>pickle.loads()反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata = <span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="number">882321</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = pickle.dumps([encryptdata,key])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(message)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">message</span></span></span><br><span class="line"><span class="class"><span class="title">b</span>'\<span class="title">x80</span>\<span class="title">x03</span>]<span class="title">q</span>\<span class="title">x00</span><span class="params">(X\x05\x00\x00\x00helloq\x01J\x91v\r\x00e.<span class="string">'</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">&gt;&gt;&gt; origndata = pickle.loads(message)</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">&gt;&gt;&gt; origndata</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">['</span>hello<span class="string">', 882321]</span></span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据加密方式：RSA加解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;data = <span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> rsa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(PubKey,PrivateKey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata = rsa.encrypt(data.encode(),PubKey)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata</span><br><span class="line"><span class="string">b'=\\\x1c\x93]^(Z/\xac\x81\xfd\xffj!\x0b:r\xb0\x1b\xf9\x97VZ\xdf\xe1\x9e2\xb4\x05G4\x01\x9f\xc8\xfd\x1e\x00\xa1\xb7\xbdU\x98\xbc\x1e5\xa1yy\xee$\xcd\xf8\x10\xf4\xba\t\x84\xba\x13\x99hs\x8d'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decryptdata = rsa.decrypt(encryptdata,PrivateKey)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decryptdata</span><br><span class="line"><span class="string">b'hello'</span></span><br></pre></td></tr></table></figure></li><li><p>题目图解</p></li></ul><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/rsa%E5%8A%A0%E5%AF%86.png" alt=""></p></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line">PORT = <span class="number">4396</span></span><br><span class="line">BUFF = <span class="number">1024</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RsaEncrypt</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="comment"># 利用rsa产生公钥、私钥</span></span><br><span class="line">    (PubKey, PrivateKey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line">    content = str.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 使用公钥加密</span></span><br><span class="line">    Encrypt_Str = rsa.encrypt(content, PubKey)</span><br><span class="line">    <span class="comment"># 返回加密信息和私钥</span></span><br><span class="line">    <span class="keyword">return</span> (Encrypt_Str, PrivateKey)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RsaDecrypt</span><span class="params">(str, pk)</span>:</span></span><br><span class="line">    Decrypt_Str = rsa.decrypt(str, pk)</span><br><span class="line">    Decrypt_Str_1 = Decrypt_Str.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">return</span> Decrypt_Str_1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMessage</span><span class="params">(Sock, test)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        SendData = input()</span><br><span class="line">        <span class="comment"># 加密要发送的数据</span></span><br><span class="line">        (encryptdata, PrivateKey) = RsaEncrypt(SendData)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打印加密后的数据</span></span><br><span class="line">        print(<span class="string">'encrypted data is '</span> + str(encryptdata))</span><br><span class="line">       </span><br><span class="line">        <span class="comment"># pickel封装加密后的数据和私钥</span></span><br><span class="line">        Message = pickle.dumps([encryptdata, PrivateKey])</span><br><span class="line">        <span class="keyword">if</span> len(SendData) &gt; <span class="number">0</span>:</span><br><span class="line">            Sock.send(Message)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RecvMessage</span><span class="params">(Sock, test)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收数据</span></span><br><span class="line">        Message = Sock.recv(BUFF)</span><br><span class="line">        <span class="comment"># pickle解封数据</span></span><br><span class="line">        (recvdata, PrivateKey) = pickle.loads(Message)</span><br><span class="line">        <span class="comment"># 对加密的数据解密</span></span><br><span class="line">        decryptdata = RsaDecrypt(recvdata, PrivateKey)</span><br><span class="line">        <span class="keyword">if</span> len(Message)&gt;<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"receive message:"</span> + decryptdata)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    type = input(<span class="string">'please input server or client:'</span>)</span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">'server'</span>:</span><br><span class="line">        <span class="comment"># 创建套接字</span></span><br><span class="line">        ServerSock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 端口绑定</span></span><br><span class="line">        ServerSock.bind((<span class="string">'127.0.0.1'</span>,PORT))</span><br><span class="line"><span class="comment"># 服务器允许连接的个数</span></span><br><span class="line">        ServerSock.listen(<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">"listening......"</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ConSock,addr = ServerSock.accept()</span><br><span class="line">            print(<span class="string">'connection succeed'</span> + <span class="string">'\n'</span> + <span class="string">'you can chat online'</span>)</span><br><span class="line">            <span class="comment"># 多线程运用</span></span><br><span class="line">            thread_1 = threading.Thread(target = SendMessage, args = (ConSock, <span class="literal">None</span>))</span><br><span class="line">            thread_2 = threading.Thread(target = RecvMessage, args = (ConSock, <span class="literal">None</span>))</span><br><span class="line">            thread_1.start()</span><br><span class="line">            thread_2.start()</span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">'client'</span>:</span><br><span class="line">        ClientSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        ServerAddr = input(<span class="string">"please input the server's ip address:"</span>)</span><br><span class="line">        ClientSock.connect((ServerAddr, PORT))</span><br><span class="line">        print(<span class="string">'connection succeed, chat start!'</span>)</span><br><span class="line">        thread_3 = threading.Thread(target = SendMessage, args = (ClientSock, <span class="literal">None</span>))</span><br><span class="line">        thread_4 = threading.Thread(target = RecvMessage, args = (ClientSock, <span class="literal">None</span>))</span><br><span class="line">        thread_3.start()</span><br><span class="line">        thread_4.start()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>结果演示</p><ul><li><p>先启动server进行监听</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/serverlisten.png" alt=""></p></li><li><p>启动客户端连接server</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/client.png" alt=""></p></li><li><p>客户端向服务器发送消息</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/clientsend.png" alt=""></p></li><li><p>服务器端接收到消息，并将消息打印在屏幕上</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/serversend.png" alt=""></p></li></ul></li><li><p>分析</p><p>综上，该程序利用的是TCP套接字保证了传输的可靠性，并利用多线程进行信息交互，pickle封装数据，rsa产生公钥、私钥、和加/解密等操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
